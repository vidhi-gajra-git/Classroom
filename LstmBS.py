{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7280095,"sourceType":"datasetVersion","datasetId":4221054}],"dockerImageVersionId":30887,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:24.507629Z","iopub.execute_input":"2025-02-10T08:29:24.507949Z","iopub.status.idle":"2025-02-10T08:29:24.515206Z","shell.execute_reply.started":"2025-02-10T08:29:24.507927Z","shell.execute_reply":"2025-02-10T08:29:24.514260Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Salinas_gt.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/PaviaU_gt.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/KSC.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Salinas_corrected.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/PaviaU.mat\n/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/KSC_gt.mat\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"import numpy as np\nimport torch\nfrom scipy.io import loadmat\n\ndef load_IndianPines_dataset_lstm(data_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat',\n                                  gt_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'):\n    \"\"\"\n    Loads the hyperspectral data and ground truth labels for the Indian Pines dataset.\n    For LSTM input, each pixel's spectral signature is treated as a sequence.\n    \n    Args:\n        data_filepath (str): Path to the hyperspectral data file (MAT file).\n        gt_filepath (str): Path to the ground truth (GT) file (MAT file).\n    \n    Returns:\n        X (torch.FloatTensor): Tensor of shape (N, sequence_length, input_dim) where\n                               N is the number of labeled pixels,\n                               sequence_length is the number of spectral bands,\n                               input_dim is typically 1 (each band is a scalar value).\n        y (torch.LongTensor): Tensor of shape (N,) with the class labels.\n    \"\"\"\n    # Load hyperspectral data from the MAT file.\n    # The data is assumed to be in the variable 'indian_pines_corrected'\n    # with shape (H, W, C) where H and W are spatial dimensions and C is the number of spectral bands.\n    data = loadmat(data_filepath)['indian_pines_corrected']\n    print(\"Original data shape:\", data.shape)  # (H, W, C)\n    \n    # Normalize the data to the range [-1, 1]\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))\n    data = (data * 2) - 1  # Scale to range [-1, 1]\n    \n    # Load ground truth labels from the GT file.\n    # The GT data is assumed to be in the variable 'indian_pines_gt' with shape (H, W)\n    gt = loadmat(gt_filepath)['indian_pines_gt']\n    print(\"Ground truth shape:\", gt.shape)  # (H, W)\n    \n    # Get spatial dimensions and number of spectral bands.\n    H, W, C = data.shape  # H: height, W: width, C: number of spectral bands\n    \n    # Reshape the hyperspectral data so that each pixel's spectral signature is a separate sample.\n    # First, flatten the spatial dimensions: the new shape becomes (H*W, C)\n    data_flat = data.reshape(-1, C)  # Each row is one pixel's spectrum.\n    \n    # For LSTM input, we want each pixel to be a sequence.\n    # Here, each pixel's spectral signature is a sequence of length C.\n    # We add a feature dimension (input_dim). In our case, each spectral band is a single value, so input_dim=1.\n    # The resulting shape becomes (H*W, C, 1)\n    X = data_flat[:, :, np.newaxis]\n    \n    # Flatten the ground truth labels to align with the pixels.\n    # The GT shape becomes (H*W,)\n    y = gt.reshape(-1)\n    \n    # Optionally, remove pixels with a label of 0 (often used for unlabeled or background pixels)\n    valid_idx = y > 0  # Keep only pixels with a valid class label.\n    X = X[valid_idx]\n    y = y[valid_idx]\n    \n    print(\"Number of valid pixels (samples):\", X.shape[0])\n    \n    # Convert numpy arrays to PyTorch tensors.\n    X_tensor = torch.tensor(X, dtype=torch.float32)  # Shape: (N, sequence_length, input_dim)\n    y_tensor = torch.tensor(y, dtype=torch.long)       # Shape: (N,)\n    \n    return X_tensor, y_tensor\n\n# Example usage:\nif __name__ == \"__main__\":\n    X, y = load_IndianPines_dataset_lstm()\n    print(\"X shape (for LSTM):\", X.shape)  # Expected: (N, C, 1) where N is the number of labeled pixels\n    print(\"y shape:\", y.shape)             # Expected: (N,)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:24.523743Z","iopub.execute_input":"2025-02-10T08:29:24.524045Z","iopub.status.idle":"2025-02-10T08:29:24.698893Z","shell.execute_reply.started":"2025-02-10T08:29:24.524020Z","shell.execute_reply":"2025-02-10T08:29:24.698035Z"}},"outputs":[{"name":"stdout","text":"Original data shape: (145, 145, 200)\nGround truth shape: (145, 145)\nNumber of valid pixels (samples): 10249\nX shape (for LSTM): torch.Size([10249, 200, 1])\ny shape: torch.Size([10249])\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom sklearn.model_selection import train_test_split\nfrom scipy.io import loadmat\n\n# ----------------------------\n# 1. Data Loading Function\n# ----------------------------\n\ndef load_IndianPines_dataset_lstm(data_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat',\n                                  gt_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'):\n    \"\"\"\n    Loads the hyperspectral data and ground truth labels for the Indian Pines dataset.\n    For LSTM input, each pixel's spectral signature is treated as a sequence.\n    \n    Args:\n        data_filepath (str): Path to the hyperspectral data file (MAT file).\n        gt_filepath (str): Path to the ground truth (GT) file (MAT file).\n    \n    Returns:\n        X (torch.FloatTensor): Tensor of shape (N, sequence_length, input_dim) where\n                               N is the number of labeled pixels,\n                               sequence_length is the number of spectral bands,\n                               input_dim is 1 (each band is a scalar value).\n        y (torch.LongTensor): Tensor of shape (N,) with the class labels.\n    \"\"\"\n    # Load hyperspectral data (expected shape: H x W x C)\n    data = loadmat(data_filepath)['indian_pines_corrected']\n    print(\"Original data shape:\", data.shape)\n    \n    # Normalize data to the range [-1, 1]\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))\n    data = (data * 2) - 1\n    \n    # Load ground truth labels (expected shape: H x W)\n    gt = loadmat(gt_filepath)['indian_pines_gt']\n    plt.imshow(gt)\n    print(\"Ground truth shape:\", gt.shape)\n    \n    H, W, C = data.shape\n    \n    # Flatten spatial dimensions so each pixel's spectrum is one sample.\n    data_flat = data.reshape(-1, C)  # shape: (H*W, C)\n    # For LSTM: each pixel becomes a sequence (sequence length = C, input_dim = 1)\n    X = data_flat[:, :, np.newaxis]  # shape: (N, C, 1)\n    \n    # Flatten ground truth to align with pixels.\n    y = gt.reshape(-1)\n    \n    # Filter out unlabeled pixels (assuming label 0 is unlabeled)\n    valid_idx = y >0\n    X = X[valid_idx]\n    y = y[valid_idx]\n    \n    print(\"Number of labeled pixels:\", X.shape[0])\n    \n    # Convert to PyTorch tensors.\n    X_tensor = torch.tensor(X, dtype=torch.float32)\n    y_tensor = torch.tensor(y, dtype=torch.long)\n    \n    return X_tensor, y_tensor\n\n# ----------------------------\n# 2. Model: BiLSTM with Attention\n# ----------------------------\n\nclass BiLSTMWithAttention(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        \"\"\"\n        Args:\n            input_dim (int): Number of features per time step (e.g., spectral bands per pixel).\n            hidden_dim (int): Number of hidden units in each LSTM direction.\n            num_layers (int): Number of stacked LSTM layers.\n            output_dim (int): Number of classes for classification.\n        \"\"\"\n        super(BiLSTMWithAttention, self).__init__()\n        \n        # Bidirectional LSTM: output features per time step = 2 * hidden_dim.\n        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, \n                            batch_first=True, bidirectional=True) # Set bidirectional to True\n        \n        # Final classification layer: we use 2 * hidden_dim because of bidirectionality\n        self.fc = nn.Linear(hidden_dim*2 , output_dim)  # 2 * hidden_dim for bidirectional LSTM\n    \n    def forward(self, x):\n        \"\"\"\n        Args:\n            x: Input tensor of shape (batch_size, sequence_length, input_dim)\n        Returns:\n            out: Class scores of shape (batch_size, output_dim)\n        \"\"\"\n        # x: (B, L, input_dim)\n        lstm_out, _ = self.lstm(x)  # lstm_out: (B, L, 2 * hidden_dim) due to bidirectional LSTM\n        \n        # We take the output of the last time step (LSTM last hidden state)\n        last_hidden_state = lstm_out[:, -1, :]  # (B, 2 * hidden_dim)\n        \n        # Final classification layer\n        out = self.fc(last_hidden_state)  # (B, output_dim)\n        \n        return out, None \n   \n\n# ----------------------------\n# 3. Training Setup and Loop\n# ----------------------------\n\ndef train_model(model, train_loader, test_loader, device='cuda', num_epochs=50, lr=1e-3, subtract_one=True):\n    criterion = nn.CrossEntropyLoss()  # expects target indices in [0, output_dim-1]\n    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n    \n    train_losses = []\n    test_losses = []\n    test_accuracies = []\n    \n    for epoch in range(1, num_epochs + 1):\n        model.train()\n        epoch_train_loss = 0.0\n        \n        for X_batch, y_batch in train_loader:\n            X_batch = X_batch.to(device)\n            y_batch = y_batch.to(device)\n            optimizer.zero_grad()\n            outputs, _ = model(X_batch)\n            \n            # If your ground truth labels start at 1 (e.g., 1 to num_classes),\n            # subtract 1 so that they are in the range [0, num_classes-1].\n            targets = (y_batch - 1) if subtract_one else y_batch\n            \n            loss = criterion(outputs, targets)\n            loss.backward()\n            optimizer.step()\n            epoch_train_loss += loss.item() * X_batch.size(0)\n        \n        epoch_train_loss /= len(train_loader.dataset)\n        train_losses.append(epoch_train_loss)\n        \n        # Evaluate on the test set.\n        model.eval()\n        epoch_test_loss = 0.0\n        correct = 0\n        total = 0\n        with torch.no_grad():\n            for X_batch, y_batch in test_loader:\n                X_batch = X_batch.to(device)\n                y_batch = y_batch.to(device)\n                outputs, _ = model(X_batch)\n                targets = (y_batch - 1) if subtract_one else y_batch\n                loss = criterion(outputs, targets)\n                epoch_test_loss += loss.item() * X_batch.size(0)\n                \n                _, predicted = torch.max(outputs, 1)\n                total += y_batch.size(0)\n                correct += (predicted == targets).sum().item()\n        \n        epoch_test_loss /= len(test_loader.dataset)\n        test_losses.append(epoch_test_loss)\n        test_accuracy = correct / total\n        test_accuracies.append(test_accuracy)\n        \n        print(f\"Epoch [{epoch}/{num_epochs}], Train Loss: {epoch_train_loss:.4f}, \"\n              f\"Test Loss: {epoch_test_loss:.4f}, Test Acc: {test_accuracy:.4f}\")\n    \n    return train_losses, test_losses, test_accuracies\n\n# ----------------------------\n# 4. Plotting Functions\n# ----------------------------\n\ndef plot_losses(train_losses, test_losses):\n    plt.figure(figsize=(8, 5))\n    plt.plot(train_losses, label=\"Train Loss\")\n    plt.plot(test_losses, label=\"Test Loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Training and Test Loss\")\n    plt.legend()\n    plt.show()\n\ndef plot_attention(band_indices, avg_attn_weights):\n    plt.figure(figsize=(10, 5))\n    plt.stem(band_indices, avg_attn_weights, use_line_collection=True)\n    plt.xlabel(\"Spectral Band Index\")\n    plt.ylabel(\"Average Attention Weight\")\n    plt.title(\"Average Attention Weights for Spectral Bands\")\n    plt.show()\n\n# ----------------------------\n# 5. Main: Load Data, Train Model, Plot Results\n# ----------------------------\n\n    # Optionally set CUDA_LAUNCH_BLOCKING=1 in your environment for debugging:\n    #   %env CUDA_LAUNCH_BLOCKING=1   (in Jupyter Notebook)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# device=torch.device('cpu')\nprint(\"Using device:\", device)\n\n# Load data (adjust paths if needed)\nX, y = load_IndianPines_dataset_lstm(\n)\n# X: (N, sequence_length, 1), y: (N,)\n\n# Determine the number of classes based on ground truth.\n# If your labels are 1-indexed, then:\nnum_classes = int(y.max().item())\nprint(\"Number of classes:\", num_classes)\n\n# Split into training and test sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)\n\n# Create DataLoaders\nbatch_size = 64\ntrain_dataset = TensorDataset(X_train, y_train)\ntest_dataset  = TensorDataset(X_test, y_test)\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\ntest_loader  = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n\n# Model hyperparameters:\n# Our LSTM expects input_dim = 1 (each spectral band is one measurement),\n# and the sequence length equals the number of spectral bands.\ninput_dim = 1       \nhidden_dim = 128\nnum_layers = 3\noutput_dim = num_classes  # Set output_dim equal to the number of classes.\n\n# Instantiate and move the model to the device.\nmodel = BiLSTMWithRegularization(input_dim, hidden_dim, num_layers, output_dim).to(device)\nprint(model)\n\n# Train the model.\n# If your ground truth labels are 1-indexed, we subtract one inside the training loop.\nnum_epochs = 50\ntrain_losses, test_losses, test_accuracies = train_model(\n    model, train_loader, test_loader, device, num_epochs=num_epochs, subtract_one=True\n)\n\n# Plot training and test losses.\nplot_losses(train_losses, test_losses)\n\n# ----------------------------\n# 6. Extract and Plot Average Attention Weights (Band Importance)\n# ----------------------------\nmodel.eval()\nall_attn_weights = []\nwith torch.no_grad():\n    for X_batch, _ in test_loader:\n        X_batch = X_batch.to(device)\n        _, attn_weights = model(X_batch)\n        # attn_weights: (B, sequence_length, 1); squeeze last dimension.\n        all_attn_weights.append(attn_weights.squeeze(-1).cpu().numpy())\n\n# Concatenate attention weights from all batches: (num_samples, sequence_length)\nall_attn_weights = np.concatenate(all_attn_weights, axis=0)\n# Compute the average attention weight for each spectral band.\navg_attn_weights = np.mean(all_attn_weights, axis=0)\n\nband_indices = np.arange(avg_attn_weights.shape[0])\nplot_attention(band_indices, avg_attn_weights)\n\n# Plot test accuracy over epochs.\nplt.figure(figsize=(8, 5))\nplt.plot(test_accuracies, label=\"Test Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Test Accuracy Over Epochs\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:24.715925Z","iopub.execute_input":"2025-02-10T08:29:24.716229Z","iopub.status.idle":"2025-02-10T08:29:25.396989Z","shell.execute_reply.started":"2025-02-10T08:29:24.716206Z","shell.execute_reply":"2025-02-10T08:29:25.394145Z"}},"outputs":[{"name":"stdout","text":"Using device: cuda\nOriginal data shape: (145, 145, 200)\nGround truth shape: (145, 145)\nNumber of labeled pixels: 10249\nNumber of classes: 16\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-e4a1f9b70277>\u001b[0m in \u001b[0;36m<cell line: 235>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    233\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m \u001b[0;31m# Instantiate and move the model to the device.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 235\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBiLSTMWithRegularization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_dim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden_dim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_layers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_dim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    236\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'BiLSTMWithRegularization' is not defined"],"ename":"NameError","evalue":"name 'BiLSTMWithRegularization' is not defined","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"import gc\ngc.collect()\ntorch.cuda.empty_cache()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.397576Z","iopub.status.idle":"2025-02-10T08:29:25.397825Z","shell.execute_reply":"2025-02-10T08:29:25.397724Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%env CUDA_LAUNCH_BLOCKING=1\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.398471Z","iopub.status.idle":"2025-02-10T08:29:25.398762Z","shell.execute_reply":"2025-02-10T08:29:25.398654Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nos.system(\"nvidia-smi\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.399427Z","iopub.status.idle":"2025-02-10T08:29:25.399800Z","shell.execute_reply":"2025-02-10T08:29:25.399638Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the LSTM Autoencoder Model\nclass LSTM_Autoencoder(nn.Module):\n    def __init__(self, input_dim, hidden_dim, seq_len):\n        super(LSTM_Autoencoder, self).__init__()\n        \n        # Encoder\n        self.lstm_encoder = nn.LSTM(input_dim, hidden_dim, batch_first=True)\n        \n        # Decoder\n        self.lstm_decoder = nn.LSTM(hidden_dim, hidden_dim, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, input_dim)  # Fully connected layer to output original dimension\n    \n    def forward(self, x):\n        # Encoder\n        _, (hn, _) = self.lstm_encoder(x)\n        \n        # Repeat the latent state (hn) to match the sequence length\n        decoder_input = hn[-1, :, :].unsqueeze(1).repeat(1, x.size(1), 1)  # Repeat for seq_len\n        \n        # Decoder\n        decoded, _ = self.lstm_decoder(decoder_input)\n        \n        # Output layer (fully connected)\n        decoded = self.fc(decoded)\n        \n        return decoded\n\n# Sample sequence (same as in the Keras code)\nsequence = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\nsequence = sequence.reshape((1, len(sequence), 1))  # Shape (1, seq_len, 1)\n\n# Convert the sequence to a PyTorch tensor\nsequence_tensor = torch.tensor(sequence, dtype=torch.float32)\n\n# Model parameters\ninput_dim = 1\nhidden_dim = 100\nseq_len = sequence.shape[1]\n\n# Initialize the model\nmodel = LSTM_Autoencoder(input_dim, hidden_dim, seq_len)\n\n# Loss and optimizer\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# Train the model\nepochs = 300\nfor epoch in range(epochs):\n    model.train()\n    \n    # Forward pass\n    output = model(sequence_tensor)\n    \n    # Compute the loss\n    loss = criterion(output, sequence_tensor)\n    \n    # Backward pass and optimize\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    # Print the loss after each epoch\n    if epoch % 50 == 0:\n        print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')\n\n# Predict with the trained model\nmodel.eval()\nwith torch.no_grad():\n    reconstructed_sequence = model(sequence_tensor)\n\n# Print the reconstructed sequence\nreconstructed_sequence = reconstructed_sequence.squeeze().numpy()\nprint(\"Reconstructed Sequence:\", reconstructed_sequence)\n\n# Plot the original and reconstructed sequence\nplt.plot(sequence[0, :, 0], label='Original Sequence')\nplt.plot(reconstructed_sequence, label='Reconstructed Sequence')\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.400911Z","iopub.status.idle":"2025-02-10T08:29:25.401223Z","shell.execute_reply":"2025-02-10T08:29:25.401114Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch \ntorch.cuda.empty_cache()\nimport gc\ngc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.401889Z","iopub.status.idle":"2025-02-10T08:29:25.402179Z","shell.execute_reply":"2025-02-10T08:29:25.402046Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%%time\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom scipy.io import loadmat\nimport random\n# Define the LSTM Autoencoder Model\nclass LSTM_Autoencoder(nn.Module):\n    def __init__(self, input_dim, hidden_dim, seq_len):\n        super(LSTM_Autoencoder, self).__init__()\n        \n        # Encoder\n        self.lstm_encoder = nn.LSTM(input_dim, hidden_dim, batch_first=True)\n        self.latent=None\n        # Decoder\n        self.lstm_decoder = nn.LSTM(hidden_dim, hidden_dim, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, input_dim)  # Fully connected layer to output original dimension\n    \n    def forward(self, x):\n        # Encoder\n        _, (hn, _) = self.lstm_encoder(x)\n        \n        # Repeat the latent state (hn) to match the sequence length\n        decoder_input = hn[-1, :, :].unsqueeze(1).repeat(1, x.size(1), 1)  # Repeat for seq_len\n        \n        # Decoder\n        decoded, _ = self.lstm_decoder(decoder_input)\n        \n        # Output layer (fully connected)\n        decoded = self.fc(decoded)\n        \n        return decoded\n\n# Load the hyperspectral image dataset\ndef load_IndianPines_dataset_lstm(data_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat', gt_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'):\n    from scipy.io import loadmat\n    # Load hyperspectral data (expected shape: H x W x C)\n    data = loadmat(data_filepath)['indian_pines_corrected']\n    print(\"Original data shape:\", data.shape)\n    \n    # Normalize data to the range [-1, 1]\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))\n    data = (data * 2) - 1  # Normalize to range [-1, 1]\n    \n    # Load ground truth labels (expected shape: H x W)\n    gt = loadmat(gt_filepath)['indian_pines_gt']\n    print(\"Ground truth shape:\", gt.shape)\n    \n    H, W, C = data.shape\n    \n    # Flatten spatial dimensions so each pixel's spectrum is one sample\n    data_flat = data.reshape(-1, C)  # shape: (H*W, C)\n    X = data_flat[:, :, np.newaxis]  # shape: (N, C, 1)\n    \n    # Flatten ground truth to align with pixels\n    y = gt.reshape(-1)\n    \n    # Filter out unlabeled pixels (assuming label 0 is unlabeled)\n    valid_idx = y > 0\n    X = X[valid_idx]\n    y = y[valid_idx]\n    \n    print(\"Number of labeled pixels:\", X.shape[0])\n    \n    # Convert to PyTorch tensors\n    X_tensor = torch.tensor(X, dtype=torch.float32)\n    y_tensor = torch.tensor(y, dtype=torch.long)\n    \n    return X_tensor, y_tensor\n\n# Load the dataset\ndata_filepath = '/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat'\ngt_filepath = '/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'\nX, y = load_IndianPines_dataset_lstm(data_filepath, gt_filepath)\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Define model parameters\ninput_dim = 1  # Each band is a single feature\nhidden_dim = 100\nseq_len = X_train.shape[1]  # Sequence length = number of spectral bands (C)\n\n# Initialize the model\nmodel = LSTM_Autoencoder(input_dim, hidden_dim, seq_len)\n\n# Check if GPU is available, if not use CPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f\"Using device: {device}\")\n\n# Move model to the selected device (GPU/CPU)\nmodel = model.to(device)\n\n# Loss and optimizer\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(), lr=0.0001)\n\n# Training the model\nepochs = 300\nbatch_size = 128\n\n# Training the model\nfor epoch in range(epochs):\n    model.train()  # Ensure model is in training mode during training\n    total_loss = 0\n    \n    # Mini-batch training\n    for i in range(0, len(X_train), batch_size):\n        X_batch = X_train[i:i+batch_size]\n        y_batch = y_train[i:i+batch_size]\n        \n        # Move batch to the selected device (GPU/CPU)\n        X_batch = X_batch.to(device)\n        y_batch = torch.tensor(y_batch, dtype=torch.long).to(device)\n        \n        # Forward pass\n        output = model(X_batch)\n        \n        # Compute the loss\n        loss = criterion(output, X_batch)\n        total_loss += loss.item()\n        \n        # Backward pass and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # After each mini-batch, plot a random sample from the train set\n        if epoch % 20 == 0 and i% (batch_size*20)==0:  # Plot every 5 mini-batches (to reduce plot frequency)\n            # Pick a random sample from the training set\n            index = random.randint(0, X_batch.shape[0] - 1)\n            \n            # Convert batch to numpy for plotting\n            original = X_batch.squeeze().cpu().numpy()\n            reconstructed = output.squeeze().detach().cpu().numpy()\n            \n            plt.figure(figsize=(10, 5))\n            plt.plot(original[index, :], label='Original Sequence')\n            plt.plot(reconstructed[index, :], label='Reconstructed Sequence')\n            plt.legend()\n            plt.title(f\"Epoch [{epoch+1}/{epochs}] - Sample {index} - Original vs Reconstructed\")\n            plt.show()\n\n    # Print the loss after each epoch\n    print(f'Epoch [{epoch+1}/{epochs}], Loss: {total_loss/len(X_train):.8f}')\n\n# At the end of training, switch the model to evaluation mode if needed\nmodel.eval()\nwith torch.no_grad():\n    # Testing and further evaluation...\n    X_test = X_test.to(device)\n    test_output = model(X_test)\n    test_loss = criterion(test_output, X_test)\n    print(f'Test MSE Loss: {test_loss.item():.4f}')\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.403333Z","iopub.status.idle":"2025-02-10T08:29:25.403727Z","shell.execute_reply":"2025-02-10T08:29:25.403560Z"},"scrolled":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport time\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage.metrics import structural_similarity as ssim\n\nclass LSTM_Autoencoder_with_latent(nn.Module):\n    def __init__(self, input_dim, hidden_dim, seq_len):\n        super(LSTM_Autoencoder_with_latent, self).__init__()\n        \n        # Encoder\n        self.lstm_encoder = nn.LSTM(input_dim, hidden_dim, batch_first=True)\n        \n        # Decoder\n        self.lstm_decoder = nn.LSTM(hidden_dim, hidden_dim, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, input_dim)  # Fully connected layer to output original dimension\n    \n    def forward(self, x):\n        # Encoder\n        _, (hn, _) = self.lstm_encoder(x)\n        \n        # Return the latent (encoded) feature for SSIM comparison\n        latent = hn[-1, :, :]  # Latent feature is the last hidden state (from the last layer of LSTM)\n        \n        # Repeat the latent state (hn) to match the sequence length\n        decoder_input = hn[-1, :, :] .unsqueeze(1).repeat(1, x.size(1), 1)  # Repeat for seq_len\n        \n        # Decoder\n        decoded, _ = self.lstm_decoder(decoder_input)\n        \n        # Output layer (fully connected)\n        decoded = self.fc(decoded)\n        \n        return decoded, latent  # Return both decoded and latent\n\ndef compute_ssim_between_latent_and_original(original, latent):\n    \"\"\"\n    Compute SSIM between original hyperspectral bands and the latent features.\n    original and latent should be of the shape (batch_size, seq_len, 1)\n    \"\"\"\n    # Initialize an array to hold SSIM values for each band\n    ssim_values = np.zeros(original.shape[2])\n\n    # Iterate over each band\n    for band in range(original.shape[2]):\n        orig_band = original[:, :, band].cpu().numpy()\n        latent_band = latent[:, band].cpu().detach().numpy()\n\n        # Compute SSIM for this band (latent should be a 1D feature for comparison)\n        ssim_values[band] = ssim(orig_band, latent_band, data_range=latent_band.max() - latent_band.min(), multichannel=False)\n\n    return ssim_values\n\n# Initialize the model with latent feature extraction\nmodel = LSTM_Autoencoder_with_latent(input_dim=1, hidden_dim=100, seq_len=X_train.shape[1])\n\n# model.to(device)  # Move model to the selected device (GPU/CPU)\n# model = LSTM_Autoencoder(input_dim, hidden_dim, seq_len)\n\n# Check if GPU is available, if not use CPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f\"Using device: {device}\")\n\n# Move model to the selected device (GPU/CPU)\nmodel = model.to(device)\n\n# Loss and optimizer\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(), lr=0.0001)\n\n# Measure computation time for training or evaluation phase\nstart_time = time.time()\nepochs = 300\nbatch_size = 128\n\n# Training the model\nfor epoch in range(epochs):\n    model.train()  # Ensure model is in training mode during training\n    total_loss = 0\n    \n    # Mini-batch training\n    for i in range(0, len(X_train), batch_size):\n        X_batch = X_train[i:i+batch_size]\n        y_batch = y_train[i:i+batch_size]\n        \n        # Move batch to the selected device (GPU/CPU)\n        X_batch = X_batch.to(device)\n        y_batch = torch.tensor(y_batch, dtype=torch.long).to(device)\n        \n        # Forward pass\n        \n        output, latent = model(X_batch)\n        \n        # Compute the loss\n        loss = criterion(output, X_batch)\n        total_loss += loss.item()\n        \n        # Backward pass and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # After each mini-batch, plot a random sample from the train set\n        if epoch % 20 == 0 and i% (batch_size*40)==0:  # Plot every 5 mini-batches (to reduce plot frequency)\n            # Pick a random sample from the training set\n            index = random.randint(0, X_batch.shape[0] - 1)\n            \n            # Convert batch to numpy for plotting\n            original = X_batch.squeeze().cpu().numpy()\n            reconstructed = output.squeeze().detach().cpu().numpy()\n            \n            plt.figure(figsize=(10, 5))\n            plt.plot(original[index, :], label='Original Sequence')\n            plt.plot(reconstructed[index, :], label='Reconstructed Sequence')\n            plt.legend()\n            plt.title(f\"Epoch [{epoch+1}/{epochs}] - Sample {index} - Original vs Reconstructed\")\n            plt.show()\n\n    # Print the loss after each epoch\n    print(f'Epoch [{epoch+1}/{epochs}], Loss: {total_loss/len(X_train):.8f}')\nend_time=time.time()\nprint(f\"Total computation time = {end_time-start_time}\")\n# Assuming model and data are already defined, perform the forward pass and extract latent features\nstart_time=time.time()\nmodel.eval()\nwith torch.no_grad():\n    # Move data to the device\n    X_test = X_test.to(device)\n    \n    # Get the decoded output and latent feature from the model\n    decoded_output, latent_features = model(X_test)  # decoded_output: [batch_size, seq_len, input_dim]\n    \n    # Compute SSIM values for each band between original and latent features\n    ssim_values = compute_ssim_between_latent_and_original(X_test, latent_features)\n\n# End time measurement\nend_time = time.time()\ncomputation_time = end_time - start_time\nprint(f\"Computation Time: {computation_time:.4f} seconds\")\n\n# Plot SSIM values for each band\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, len(ssim_values) + 1), ssim_values, marker='o')\nplt.title('SSIM between Original Bands and Latent Features')\nplt.xlabel('Band Number')\nplt.ylabel('SSIM Value')\nplt.grid(True)\nplt.show()\n\n# Rank bands based on SSIM values and identify important bands\nimportant_bands = np.argsort(ssim_values)[::-1]  # Sort in descending order of SSIM (higher is better)\nprint(\"Important Bands (sorted by SSIM):\", important_bands)\n\n# Optionally, visualize the most important band\ntop_band_idx = important_bands[0]\nprint(f\"Most important band: {top_band_idx + 1} with SSIM: {ssim_values[top_band_idx]}\")\n\n# Visualize the original and latent features for the most important band\nindex = 0  # Random sample index from X_test\noriginal_band = X_test[index, :, top_band_idx].cpu().numpy()\nlatent_band = latent_features[index, top_band_idx].cpu().detach().numpy()\n\nplt.figure(figsize=(10, 5))\nplt.plot(original_band, label='Original Band', color='blue')\nplt.plot(latent_band, label='Latent Feature', color='red', linestyle='--')\nplt.title(f\"Band {top_band_idx + 1} - Original vs Latent Feature\")\nplt.legend()\nplt.show()\n\n# Measure the size of the model (in bytes)\ntorch.save(model.state_dict(), 'model.pth')\nmodel_size = os.path.getsize('model.pth') / (1024 * 1024)  # Convert bytes to megabytes\nprint(f\"Model size: {model_size:.2f} MB\")\n\n# Optionally delete the saved model file to keep the environment clean\nos.remove('model.pth')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.404788Z","iopub.status.idle":"2025-02-10T08:29:25.405153Z","shell.execute_reply":"2025-02-10T08:29:25.404989Z"},"scrolled":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(latent.shape)","metadata":{"trusted":true,"scrolled":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.406088Z","iopub.status.idle":"2025-02-10T08:29:25.406489Z","shell.execute_reply":"2025-02-10T08:29:25.406304Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom tqdm import tqdm\ndef compute_latent_band_similarity(latent, original_bands):\n    \"\"\"\n    Compute similarity between latent features and original spectral bands.\n    We use cosine similarity to compare the latent feature and each band in the original hyperspectral data.\n    \n    latent: Tensor of shape (batch_size, hidden_dim)\n    original_bands: Tensor of shape (batch_size, seq_len, input_dim)\n    \n    Returns: similarity scores for each band.\n    \"\"\"\n    # Initialize a list to hold the cosine similarities for each band\n    batch_size, seq_len, _ = original_bands.shape\n    similarity_scores = np.zeros(seq_len)\n\n    # Iterate over each band (spectral band)\n    for band in tqdm(range(seq_len)):\n        # print()\n        # Extract the original band (shape: batch_size, 1)\n        band_data = original_bands[:, band, :].cpu().numpy()  # (batch_size, 1)\n\n        # Get the latent features (shape: batch_size, hidden_dim)\n        latent_data = latent.cpu().detach().numpy()  # (batch_size, hidden_dim)\n\n        # Compute cosine similarity between the latent features and the band\n        # We need to reshape band_data for similarity computation\n        similarity=np.zeros(latent_data[0].reshape(-1, 1).shape)\n        # print(latent_data.shape)\n        # print(f\"Shape of band_data ={band_data.shape}\")\n        similarity=cosine_similarity(latent_data.reshape(-1, 1), band_data.reshape(-1, 1))  # Reshape band_data for similarity computation\n\n        # Take the mean similarity score across the batch\n        similarity_scores[band] = similarity.mean()\n\n    return similarity_scores\ndata_filepath = '/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat'\ngt_filepath = '/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'\nX, y = load_IndianPines_dataset_lstm(data_filepath, gt_filepath)\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# model=torch.load('/kaggle/working/model.pth')\nclass LSTM_Autoencoder_with_latent(nn.Module):\n    def __init__(self, input_dim, hidden_dim, seq_len):\n        super(LSTM_Autoencoder_with_latent, self).__init__()\n        \n        # Encoder\n        self.lstm_encoder = nn.LSTM(input_dim, hidden_dim, batch_first=True)\n        \n        # Decoder\n        self.lstm_decoder = nn.LSTM(hidden_dim, hidden_dim, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, input_dim)  # Fully connected layer to output original dimension\n    \n    def forward(self, x):\n        # Encoder\n        _, (hn, _) = self.lstm_encoder(x)\n        \n        # Return the latent (encoded) feature for SSIM comparison\n        latent = hn[-1, :, :]  # Latent feature is the last hidden state (from the last layer of LSTM)\n        \n        # Repeat the latent state (hn) to match the sequence length\n        decoder_input = hn[-1, :, :] .unsqueeze(1).repeat(1, x.size(1), 1)  # Repeat for seq_len\n        \n        # Decoder\n        decoded, _ = self.lstm_decoder(decoder_input)\n        \n        # Output layer (fully connected)\n        decoded = self.fc(decoded)\n        \n        return decoded, latent  # Return both decoded and latent\nimport torch\n\n# Define the model architecture (same as the one used for training)\nmodel = LSTM_Autoencoder_with_latent(input_dim=1, hidden_dim=100, seq_len=X_test.shape[1])\n\n# Load the state dictionary\nmodel.load_state_dict(torch.load('/kaggle/working/model.pth'))\n\n# Move the model to the appropriate device (CPU or GPU)\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = model.to(device)\n\n# Set the model to evaluation mode\nmodel.eval()\n\n# Assuming model and data are already defined, perform the forward pass and extract latent features\n# model.eval()\nwith torch.no_grad():\n    # Move data to the device\n    X_test = X_test.to(device)\n    \n    # Get the decoded output and latent feature from the model\n    decoded_output, latent_features = model(X_test)  # decoded_output: [batch_size, seq_len, input_dim]\n    \n    # Compute similarity scores for each band between latent features and original bands\n    similarity_scores = compute_latent_band_similarity(latent_features, X_test)\n\n# Plot Similarity Scores for each band\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, len(similarity_scores) + 1), np.abs(similarity_scores), marker='o')\nplt.title('Cosine Similarity between Latent Features and Original Bands')\nplt.xlabel('Band Number')\nplt.ylabel('Cosine Similarity')\nplt.grid(True)\nplt.show()\n\n# Rank bands based on similarity scores (higher is better)\nimportant_bands = np.argsort(np.abs(similarity_scores))[::-1]  # Sort in descending order of similarity (higher is better)\nprint(\"Important Bands (sorted by similarity):\", important_bands)\n\n# Optionally, visualize the most important band\ntop_band_idx = important_bands[0]\nprint(f\"Most important band: {top_band_idx + 1} with similarity: {similarity_scores[top_band_idx]}\")\n\n# Visualize the original and latent features for the most important band\nindex = 0  # Random sample index from X_test\noriginal_band = X_test[:,  top_band_idx].cpu().numpy()\nlatent_band = latent_features[:, top_band_idx].cpu().detach().numpy()\n\nplt.figure(figsize=(10, 5))\nplt.plot(original_band, label='Original Band', color='blue')\nplt.plot(latent_band, label='Latent Feature', color='red', linestyle='--')\nplt.title(f\"Band {top_band_idx + 1} - Original vs Latent Feature\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.407354Z","iopub.status.idle":"2025-02-10T08:29:25.407684Z","shell.execute_reply":"2025-02-10T08:29:25.407572Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"np.argsort(np.abs(similarity_scores))[::-1] ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.408350Z","iopub.status.idle":"2025-02-10T08:29:25.408681Z","shell.execute_reply":"2025-02-10T08:29:25.408545Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(10, 5))\nplt.plot(range(1, len(similarity_scores) + 1), np.abs(similarity_scores), marker='o')\nplt.title('Cosine Similarity between Latent Features and Original Bands')\nplt.xlabel('Band Number')\nplt.ylabel('Cosine Similarity')\nplt.grid(True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.409717Z","iopub.status.idle":"2025-02-10T08:29:25.409989Z","shell.execute_reply":"2025-02-10T08:29:25.409877Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"torch.save(model.state_dict(), '/kaggle/working/model.pth')\nmodel_size = os.path.getsize('model.pth') / (1024 * 1024)  # Convert bytes to megabytes\nprint(f\"Model size: {model_size:.2f} MB\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.410781Z","iopub.status.idle":"2025-02-10T08:29:25.411070Z","shell.execute_reply":"2025-02-10T08:29:25.410962Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" selected_bands=[\n    41, 37, 40, 38, 42, 43, 47, 49, 48, 51, 50, 36, 52, 44, 46, 6, 7, 8,\n    45, 5, 15, 14, 16, 13, 63, 10, 17, 65, 11, 53, 9, 64, 21, 18, 33, 66,\n    67, 68, 20, 69, 22, 19, 24, 28, 12, 27, 25, 23, 34, 54, 70, 26, 62, 39,\n    55, 71, 30, 32, 35, 72, 4, 29, 31, 73, 2, 3, 61, 153, 154, 155, 156, 157,\n    158, 159, 144, 145, 146, 147, 148, 149, 167, 150, 151, 56, 57, 58, 59, 60, 136, 137,\n    138, 139, 140, 141, 142, 143, 152, 1, 184, 185, 186, 0, 188, 189, 190, 191, 176, 177,\n    178, 179, 180, 181, 164, 166, 165, 198, 163, 162, 161, 160, 182, 174, 173, 172, 171, 170,\n    169, 168, 183, 175, 125, 124, 123, 122, 121, 120, 119, 74, 117, 116, 115, 114, 113, 112,\n    111, 110, 118, 197, 196, 187, 132, 195, 194, 193, 192, 126, 134, 133, 199, 131, 130, 129,\n    128, 127, 135, 90, 89, 88, 87, 86, 85, 84, 109, 82, 81, 80, 79, 78, 77, 76,\n    75, 83, 108, 107, 106, 105, 104, 103, 102, 101, 91, 99, 98, 97, 96, 95, 94, 93,\n    92, 100\n]\n\n#  adam optimizer gradient backpropagation \n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\nimport cupy as cp\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom cuml.ensemble import RandomForestClassifier\nimport scipy.io\nimport math \nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef preprocess_data(image, ground_truth, selected_bands, train_ratio=0.8):\n\n    rows, cols, bands = image.shape\n    # print(image.shape )\n    new_image=image[:,:,selected_bands]\n    # print(new_image.shape)\n    \n    reshaped_data = image.reshape((-1, bands))\n\n    reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(new_image)# Flatten spatial dimensions into 2D\n    reshaped_gt = ground_truth.flatten()  # Flatten ground truth\n\n    # Remove pixels where ground truth is 0 (no label)\n    valid_mask = reshaped_gt >0\n    reshaped_data = reshaped_data[valid_mask]\n    # reshaped_data = new_image [valid_mask]\n    \n    reshaped_gt = reshaped_gt[valid_mask]\n    # rows, cols, bands = image.shape\n    # new_image = image[:, :, selected_bands]\n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    \n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(reshaped_data.shape)# Flatten spatial dimensions into 2D\n    # reshaped_gt = ground_truth.flatten()# Flatten ground truth\n\n    # # Remove pixels where ground truth is 0 (no label)\n    # valid_mask = reshaped_gt >= 0\n    # reshaped_data = reshaped_data[valid_mask]\n    # reshaped_gt = reshaped_gt[valid_mask]\n\n    # Split into train and test\n    num_train = int(len(reshaped_gt) * train_ratio)\n    train_data = reshaped_data[:num_train]\n    train_gt = reshaped_gt[:num_train]\n    test_data = reshaped_data[num_train:]\n    test_gt = reshaped_gt[num_train:]\n    # print(f\"Shape of gt is {train_gt.shape}\")\n\n    return train_data, train_gt, test_data, test_gt\n\n# Load hyperspectral data\ntrain_data = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat')\nimage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\ngt= scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']  # Ground truth (training)\n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\n\n# Selected bands\n# selected_bands = [37, 176, 9, 139, 25, 88, 12, 19, 20, 46, 145, 153, 83, 23, 104, 39, 27, 68, 84, 152, 181, 60, 174, 119, 172, 70, 101, 131, 3, 63, 6, 190, 66, 110, 74, 165, 175, 62, 157, 5]\n\n# Store average frequency of bands for each iteration\navg_frequencies = []\nband_collection=[]\nfor i in range(1, len(selected_bands) + 1):\n    band_collection.append(selected_bands[i if i <=1 else (i-1)*((-1)**i)])\nfor i in range(1, len(selected_bands) + 1,10):\n   \n    # Load the training data\n    # train_data = scipy.io.loadmat('/kaggle/working/Indian_pines_corrected.mat')\n    # mage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\n    # train_gt = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']   # Ground truth (training)\n    \n    print(band_collection[:i])\n    \n    # Preprocess data\n    train_data, train_gt, test_data, test_gt = preprocess_data(image, gt, sorted(band_collection[:i]))\n    \n    # Convert to CuPy arrays\n    train_data_cp = cp.array(train_data).astype('float32')\n    train_gt_cp = cp.array(train_gt).astype('int32')\n    test_data_cp = cp.array(test_data).astype('float32')\n    test_gt_cp = cp.array(test_gt).astype('int32')\n\n    # Normalize\n    train_mean = cp.mean(train_data_cp, axis=0)\n    train_std = cp.std(train_data_cp, axis=0)\n    train_data_cp = (train_data_cp - train_mean) / train_std\n    test_data_cp = (test_data_cp - train_mean) / train_std\n\n    # Train Random Forest model\n    rf_model = RandomForestClassifier(n_estimators=400,n_streams=1, max_depth=25, random_state=42)\n    rf_model.fit(train_data_cp, train_gt_cp)\n\n    # Predict on test set\n    predictions_cp = rf_model.predict(test_data_cp)\n    predictions = cp.asnumpy(predictions_cp)\n    test_gt_np = cp.asnumpy(test_gt_cp)\n\n    # Compute accuracy and confusion matrix\n    conf_matrix = confusion_matrix(test_gt_np, predictions)\n    class_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\n\n    # Average band importance (store for plotting)\n    avg_frequencies.append(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n\n    # Display results\n    # print(\"\\nClassification Report:\")\n    print(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n    \n    # Create classification maps\n    # pred_map = np.zeros_like(train_gt.flatten())\n    height=int(145*0.8)\n    width=int(145*0.8)\n    # train_gt_reshaped = train_gt.reshape(height, width)\n    # test_gt_reshaped=test_gt.reshape(int(145*0.2), 145)\n    # print(f\"reshaped  = {train_gt_reshaped.shape}\")\n    \n    # pred_map[-len(predictions):] = predictions\n    # pred_map = predictions.reshape(int(145*0.2), 145)\n    # plt.figure(figsize=(12, 6))\n    # plt.subplot(1, 2, 1)\n    # plt.title(\"Actual Classification\")\n\n    # plt.imshow(test_gt_reshaped, cmap=\"jet\")\n    # plt.colorbar()\n    # plt.subplot(1, 2, 2)\n    # plt.title(\"Predicted Classification\")\n    # plt.imshow(pred_map, cmap=\"jet\")\n    # plt.colorbar()\n    # plt.show()\n\n# Plot average frequencies\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(selected_bands) + 1,10), avg_frequencies, marker='o')\nplt.xlabel(\"Iteration (Number of Bands Selected)\")\nplt.ylabel(\"Average accuracy achieved\")\nplt.title(\"Average Frequency of Bands per Iteration\")\nplt.grid()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.411645Z","iopub.status.idle":"2025-02-10T08:29:25.411956Z","shell.execute_reply":"2025-02-10T08:29:25.411803Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" selected_bands=[114, 113, 112, 115, 116, 117, 111, 138, 118, 137, 119, 171, 110, 140, 139, 108, 172, 120, 136, 170, 141, 153, 121, 169, 135, 173, 134, 152, 148, 109, 168, 149, 122, 133, 167, 174, 154, 132, 107, 123, 166, 155, 147, 124, 131, 165, 164, 125, 130, 156, 157, 126, 163, 129, 128, 162, 158, 127, 161, 160, 159, 175, 176, 177, 151, 178, 179, 185, 142, 150, 182, 180, 146, 181, 187, 190, 186, 189, 183, 184, 188, 106, 193, 191, 192, 105, 194, 196, 195, 197, 145, 17, 24, 22, 104, 18, 21, 12, 23, 29, 19, 28, 20, 10, 9, 27, 30, 11, 25, 31, 8, 32, 26, 33, 7, 16, 13, 6, 14, 15, 5, 4, 101, 3, 198, 143, 144, 100, 2, 34, 99, 102, 1, 103, 41, 42, 43, 40, 44, 47, 48, 49, 50, 46, 51, 52, 45, 98, 38, 53, 39, 54, 57, 56, 55, 97, 58, 37, 199, 69, 68, 74, 70, 71, 67, 66, 72, 59, 65, 73, 60, 64, 92, 91, 63, 76, 62, 94, 61, 81, 35, 96, 80, 77, 83, 36, 85, 95, 82, 93, 84, 75, 78, 86, 79, 90, 0, 89, 88, 87]\n#  adam optimizer gradient backpropagation \n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\nimport cupy as cp\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom cuml.ensemble import RandomForestClassifier\nimport scipy.io\nimport math \nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef preprocess_data(image, ground_truth, selected_bands, train_ratio=0.8):\n\n    rows, cols, bands = image.shape\n    # print(image.shape )\n    new_image=image[:,:,selected_bands]\n    # print(new_image.shape)\n    \n    reshaped_data = image.reshape((-1, bands))\n\n    reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(new_image)# Flatten spatial dimensions into 2D\n    reshaped_gt = ground_truth.flatten()  # Flatten ground truth\n\n    # Remove pixels where ground truth is 0 (no label)\n    valid_mask = reshaped_gt >0\n    reshaped_data = reshaped_data[valid_mask]\n    # reshaped_data = new_image [valid_mask]\n    \n    reshaped_gt = reshaped_gt[valid_mask]\n    # rows, cols, bands = image.shape\n    # new_image = image[:, :, selected_bands]\n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    \n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(reshaped_data.shape)# Flatten spatial dimensions into 2D\n    # reshaped_gt = ground_truth.flatten()# Flatten ground truth\n\n    # # Remove pixels where ground truth is 0 (no label)\n    # valid_mask = reshaped_gt >= 0\n    # reshaped_data = reshaped_data[valid_mask]\n    # reshaped_gt = reshaped_gt[valid_mask]\n\n    # Split into train and test\n    num_train = int(len(reshaped_gt) * train_ratio)\n    train_data = reshaped_data[:num_train]\n    train_gt = reshaped_gt[:num_train]\n    test_data = reshaped_data[num_train:]\n    test_gt = reshaped_gt[num_train:]\n    # print(f\"Shape of gt is {train_gt.shape}\")\n\n    return train_data, train_gt, test_data, test_gt\n\n# Load hyperspectral data\ntrain_data = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat')\nimage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\ngt= scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']  # Ground truth (training)\n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\n\n# Selected bands\n# selected_bands = [37, 176, 9, 139, 25, 88, 12, 19, 20, 46, 145, 153, 83, 23, 104, 39, 27, 68, 84, 152, 181, 60, 174, 119, 172, 70, 101, 131, 3, 63, 6, 190, 66, 110, 74, 165, 175, 62, 157, 5]\n\n# Store average frequency of bands for each iteration\navg_frequencies = []\nband_collection=[]\n\nfor i in range(1, len(selected_bands) + 1,10):\n   \n    # Load the training data\n    # train_data = scipy.io.loadmat('/kaggle/working/Indian_pines_corrected.mat')\n    # mage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\n    # train_gt = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']   # Ground truth (training)\n    \n    print(selected_bands[:i])\n    \n    # Preprocess data\n    train_data, train_gt, test_data, test_gt = preprocess_data(image, gt, sorted(selected_bands[:i]))\n    \n    # Convert to CuPy arrays\n    train_data_cp = cp.array(train_data).astype('float32')\n    train_gt_cp = cp.array(train_gt).astype('int32')\n    test_data_cp = cp.array(test_data).astype('float32')\n    test_gt_cp = cp.array(test_gt).astype('int32')\n\n    # Normalize\n    train_mean = cp.mean(train_data_cp, axis=0)\n    train_std = cp.std(train_data_cp, axis=0)\n    train_data_cp = (train_data_cp - train_mean) / train_std\n    test_data_cp = (test_data_cp - train_mean) / train_std\n\n    # Train Random Forest model\n    rf_model = RandomForestClassifier(n_estimators=400,n_streams=1, max_depth=25, random_state=42)\n    rf_model.fit(train_data_cp, train_gt_cp)\n\n    # Predict on test set\n    predictions_cp = rf_model.predict(test_data_cp)\n    predictions = cp.asnumpy(predictions_cp)\n    test_gt_np = cp.asnumpy(test_gt_cp)\n\n    # Compute accuracy and confusion matrix\n    conf_matrix = confusion_matrix(test_gt_np, predictions)\n    class_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\n\n    # Average band importance (store for plotting)\n    avg_frequencies.append(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n\n    # Display results\n    # print(\"\\nClassification Report:\")\n    print(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n    \n    # Create classification maps\n    # pred_map = np.zeros_like(train_gt.flatten())\n    height=int(145*0.8)\n    width=int(145*0.8)\n    # train_gt_reshaped = train_gt.reshape(height, width)\n    # test_gt_reshaped=test_gt.reshape(int(145*0.2), 145)\n    # print(f\"reshaped  = {train_gt_reshaped.shape}\")\n    \n    # pred_map[-len(predictions):] = predictions\n    # pred_map = predictions.reshape(int(145*0.2), 145)\n    # plt.figure(figsize=(12, 6))\n    # plt.subplot(1, 2, 1)\n    # plt.title(\"Actual Classification\")\n\n    # plt.imshow(test_gt_reshaped, cmap=\"jet\")\n    # plt.colorbar()\n    # plt.subplot(1, 2, 2)\n    # plt.title(\"Predicted Classification\")\n    # plt.imshow(pred_map, cmap=\"jet\")\n    # plt.colorbar()\n    # plt.show()\n\n# Plot average frequencies\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(selected_bands) + 1,10), avg_frequencies, marker='o')\nplt.xlabel(\"Iteration (Number of Bands Selected)\")\nplt.ylabel(\"Average accuracy achieved\")\nplt.title(\"Average Frequency of Bands per Iteration\")\nplt.grid()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.412857Z","iopub.status.idle":"2025-02-10T08:29:25.413176Z","shell.execute_reply":"2025-02-10T08:29:25.413017Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" selected_bands=[\n    41, 37, 40, 38, 42, 43, 47, 49, 48, 51, 50, 36, 52, 44, 46, 6, 7, 8,\n    45, 5, 15, 14, 16, 13, 63, 10, 17, 65, 11, 53, 9, 64, 21, 18, 33, 66,\n    67, 68, 20, 69, 22, 19, 24, 28, 12, 27, 25, 23, 34, 54, 70, 26, 62, 39,\n    55, 71, 30, 32, 35, 72, 4, 29, 31, 73, 2, 3, 61, 153, 154, 155, 156, 157,\n    158, 159, 144, 145, 146, 147, 148, 149, 167, 150, 151, 56, 57, 58, 59, 60, 136, 137,\n    138, 139, 140, 141, 142, 143, 152, 1, 184, 185, 186, 0, 188, 189, 190, 191, 176, 177,\n    178, 179, 180, 181, 164, 166, 165, 198, 163, 162, 161, 160, 182, 174, 173, 172, 171, 170,\n    169, 168, 183, 175, 125, 124, 123, 122, 121, 120, 119, 74, 117, 116, 115, 114, 113, 112,\n    111, 110, 118, 197, 196, 187, 132, 195, 194, 193, 192, 126, 134, 133, 199, 131, 130, 129,\n    128, 127, 135, 90, 89, 88, 87, 86, 85, 84, 109, 82, 81, 80, 79, 78, 77, 76,\n    75, 83, 108, 107, 106, 105, 104, 103, 102, 101, 91, 99, 98, 97, 96, 95, 94, 93,\n    92, 100\n]\n\n#  adam optimizer gradient backpropagation \n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\nimport cupy as cp\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom cuml.ensemble import RandomForestClassifier\nimport scipy.io\nimport math \nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef preprocess_data(image, ground_truth, selected_bands, train_ratio=0.8):\n\n    rows, cols, bands = image.shape\n    # print(image.shape )\n    new_image=image[:,:,selected_bands]\n    # print(new_image.shape)\n    \n    reshaped_data = image.reshape((-1, bands))\n\n    reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(new_image)# Flatten spatial dimensions into 2D\n    reshaped_gt = ground_truth.flatten()  # Flatten ground truth\n\n    # Remove pixels where ground truth is 0 (no label)\n    valid_mask = reshaped_gt >0\n    reshaped_data = reshaped_data[valid_mask]\n    # reshaped_data = new_image [valid_mask]\n    \n    reshaped_gt = reshaped_gt[valid_mask]\n    # rows, cols, bands = image.shape\n    # new_image = image[:, :, selected_bands]\n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    \n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(reshaped_data.shape)# Flatten spatial dimensions into 2D\n    # reshaped_gt = ground_truth.flatten()# Flatten ground truth\n\n    # # Remove pixels where ground truth is 0 (no label)\n    # valid_mask = reshaped_gt >= 0\n    # reshaped_data = reshaped_data[valid_mask]\n    # reshaped_gt = reshaped_gt[valid_mask]\n\n    # Split into train and test\n    num_train = int(len(reshaped_gt) * train_ratio)\n    train_data = reshaped_data[:num_train]\n    train_gt = reshaped_gt[:num_train]\n    test_data = reshaped_data[num_train:]\n    test_gt = reshaped_gt[num_train:]\n    # print(f\"Shape of gt is {train_gt.shape}\")\n\n    return train_data, train_gt, test_data, test_gt\n\n# Load hyperspectral data\ntrain_data = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat')\nimage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\ngt= scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']  # Ground truth (training)\n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\n\n# Selected bands\n# selected_bands = [37, 176, 9, 139, 25, 88, 12, 19, 20, 46, 145, 153, 83, 23, 104, 39, 27, 68, 84, 152, 181, 60, 174, 119, 172, 70, 101, 131, 3, 63, 6, 190, 66, 110, 74, 165, 175, 62, 157, 5]\n\n# Store average frequency of bands for each iteration\navg_frequencies = []\nband_collection=[]\nfor i in range(1, len(selected_bands) + 1):\n    band_collection.append(selected_bands[i if i <=1 else (i-1)*((-1)**i)])\nfor i in range(1, len(selected_bands) + 1,10):\n   \n    # Load the training data\n    # train_data = scipy.io.loadmat('/kaggle/working/Indian_pines_corrected.mat')\n    # mage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\n    # train_gt = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']   # Ground truth (training)\n    \n    print(band_collection[:i])\n    \n    # Preprocess data\n    train_data, train_gt, test_data, test_gt = preprocess_data(image, gt, sorted(band_collection[:i]))\n    \n    # Convert to CuPy arrays\n    train_data_cp = cp.array(train_data).astype('float32')\n    train_gt_cp = cp.array(train_gt).astype('int32')\n    test_data_cp = cp.array(test_data).astype('float32')\n    test_gt_cp = cp.array(test_gt).astype('int32')\n\n    # Normalize\n    train_mean = cp.mean(train_data_cp, axis=0)\n    train_std = cp.std(train_data_cp, axis=0)\n    train_data_cp = (train_data_cp - train_mean) / train_std\n    test_data_cp = (test_data_cp - train_mean) / train_std\n\n    # Train Random Forest model\n    rf_model = RandomForestClassifier(n_estimators=400,n_streams=1, max_depth=25, random_state=42)\n    rf_model.fit(train_data_cp, train_gt_cp)\n\n    # Predict on test set\n    predictions_cp = rf_model.predict(test_data_cp)\n    predictions = cp.asnumpy(predictions_cp)\n    test_gt_np = cp.asnumpy(test_gt_cp)\n\n    # Compute accuracy and confusion matrix\n    conf_matrix = confusion_matrix(test_gt_np, predictions)\n    class_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\n\n    # Average band importance (store for plotting)\n    avg_frequencies.append(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n\n    # Display results\n    # print(\"\\nClassification Report:\")\n    print(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n    \n    # Create classification maps\n    # pred_map = np.zeros_like(train_gt.flatten())\n    height=int(145*0.8)\n    width=int(145*0.8)\n    # train_gt_reshaped = train_gt.reshape(height, width)\n    # test_gt_reshaped=test_gt.reshape(int(145*0.2), 145)\n    # print(f\"reshaped  = {train_gt_reshaped.shape}\")\n    \n    # pred_map[-len(predictions):] = predictions\n    # pred_map = predictions.reshape(int(145*0.2), 145)\n    # plt.figure(figsize=(12, 6))\n    # plt.subplot(1, 2, 1)\n    # plt.title(\"Actual Classification\")\n\n    # plt.imshow(test_gt_reshaped, cmap=\"jet\")\n    # plt.colorbar()\n    # plt.subplot(1, 2, 2)\n    # plt.title(\"Predicted Classification\")\n    # plt.imshow(pred_map, cmap=\"jet\")\n    # plt.colorbar()\n    # plt.show()\n\n# Plot average frequencies\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(selected_bands) + 1,10), avg_frequencies, marker='o')\nplt.xlabel(\"Iteration (Number of Bands Selected)\")\nplt.ylabel(\"Average accuracy achieved\")\nplt.title(\"Average Frequency of Bands per Iteration\")\nplt.grid()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.414072Z","iopub.status.idle":"2025-02-10T08:29:25.414410Z","shell.execute_reply":"2025-02-10T08:29:25.414240Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nrf_model2= RandomForestClassifier(n_estimators=400, max_depth=25, random_state=42)\nrf_model2.fit(train_data_cp, train_gt_cp)\n# plt.figure(figsize=(10, 5))\nprint(rf_model.feature_importances_)\nplt.plot([i for i in range (0,200)],rf_model.feature_importances_)\nplt.title(\"Feature Importance from Random Forest\")\nplt.xlabel(\"Feature Index\")\nplt.ylabel(\"Importance Score\")\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.415270Z","iopub.status.idle":"2025-02-10T08:29:25.415573Z","shell.execute_reply":"2025-02-10T08:29:25.415459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom tqdm import tqdm\n\ndef compute_latent_band_similarity(latent, original_bands):\n    \"\"\"\n    Compute similarity between latent features and original spectral bands.\n    Uses cosine similarity to compare the latent space with each spectral band.\n\n    latent: Tensor of shape (batch_size, hidden_dim)\n    original_bands: Tensor of shape (batch_size, seq_len, input_dim)\n\n    Returns: similarity scores for each band.\n    \"\"\"\n    batch_size, seq_len, _ = original_bands.shape\n    similarity_scores = np.zeros(seq_len)\n\n    latent_data = latent.cpu().detach().numpy()  # Shape: (batch_size, hidden_dim)\n\n    for band in tqdm(range(seq_len)):\n        band_data = original_bands[:, band, 0].cpu().numpy()  # Shape: (batch_size,)\n        \n        # Reshape correctly for cosine similarity computation\n        band_data = band_data.reshape(-1, 1)  # Shape: (batch_size, 1)\n        latent_data_band = latent_data[:, :1]  # Extract first latent feature (band projection)\n\n        similarity = cosine_similarity(latent_data_band, band_data)\n        \n        # Take the mean similarity score across the batch\n        similarity_scores[band] = similarity.mean()\n\n    return similarity_scores\n\n\n# Load trained model\nmodel = LSTM_Autoencoder(input_dim=1, hidden_dim=100, seq_len=X_test.shape[1])\n\n# Load the state dictionary\nmodel.load_state_dict(torch.load('/kaggle/working/model.pth'))\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.load_state_dict(torch.load('/kaggle/working/model.pth'))\nmodel.eval()\nwith torch.no_grad():\n    X_test = X_test.to(device)\n    \n    # Forward pass to get latent features\n    _, latent_features = model(X_test)  # Assuming model returns (decoded_output, latent_features)\n    \n    # Compute similarity scores for each band\n    similarity_scores = compute_latent_band_similarity(latent_features, X_test)\n\n# Plot similarity scores\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, len(similarity_scores) + 1), similarity_scores, marker='o')\nplt.title('Cosine Similarity between Latent Features and Original Bands')\nplt.xlabel('Band Number')\nplt.ylabel('Cosine Similarity')\nplt.grid(True)\nplt.show()\n\n# Rank bands based on similarity scores (higher is better)\nimportant_bands = np.argsort(np.abs(similarity_scores))[::-1]  # Sort in descending order of similarity\nprint(\"Important Bands (sorted by similarity):\", important_bands.tolist())\n\n# Visualize the most important band\ntop_band_idx = important_bands[0]\nprint(f\"Most important band: {top_band_idx + 1} with similarity: {similarity_scores[top_band_idx]:.4f}\")\n\n# Extract original and latent features for the most important band\nindex = 0  # Sample index\noriginal_band = X_test[:, top_band_idx, 0].cpu().numpy()\nlatent_band = latent_features[:, 0].cpu().detach().numpy()  # Using first latent feature\n\nplt.figure(figsize=(10, 5))\nplt.plot(original_band, label='Original Band', color='blue')\nplt.plot(latent_band, label='Latent Feature', color='red', linestyle='--')\nplt.title(f\"Band {top_band_idx + 1} - Original vs Latent Feature\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.416321Z","iopub.status.idle":"2025-02-10T08:29:25.416672Z","shell.execute_reply":"2025-02-10T08:29:25.416535Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import mutual_info_regression\nfrom scipy.stats import pearsonr\nfrom tqdm import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n# import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom scipy.io import loadmat\nimport random\n# Load the hyperspectral image dataset\ndef load_IndianPines_dataset_lstm(data_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat', gt_filepath='/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'):\n    from scipy.io import loadmat\n    # Load hyperspectral data (expected shape: H x W x C)\n    data = loadmat(data_filepath)['indian_pines_corrected']\n    print(\"Original data shape:\", data.shape)\n    \n    # Normalize data to the range [-1, 1]\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))\n    data = (data * 2) - 1  # Normalize to range [-1, 1]\n    \n    # Load ground truth labels (expected shape: H x W)\n    gt = loadmat(gt_filepath)['indian_pines_gt']\n    print(\"Ground truth shape:\", gt.shape)\n    \n    H, W, C = data.shape\n    \n    # Flatten spatial dimensions so each pixel's spectrum is one sample\n    data_flat = data.reshape(-1, C)  # shape: (H*W, C)\n    X = data_flat[:, :, np.newaxis]  # shape: (N, C, 1)\n    \n    # Flatten ground truth to align with pixels\n    y = gt.reshape(-1)\n    \n    # Filter out unlabeled pixels (assuming label 0 is unlabeled)\n    valid_idx = y > 0\n    X = X[valid_idx]\n    y = y[valid_idx]\n    \n    print(\"Number of labeled pixels:\", X.shape[0])\n    \n    # Convert to PyTorch tensors\n    X_tensor = torch.tensor(X, dtype=torch.float32)\n    y_tensor = torch.tensor(y, dtype=torch.long)\n    \n    return X_tensor, y_tensor\n\n# Load the dataset\ndata_filepath = '/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat'\ngt_filepath = '/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat'\nX, y = load_IndianPines_dataset_lstm(data_filepath, gt_filepath)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Load the state dictionary\nclass LSTM_Autoencoder_with_latent(nn.Module):\n    def __init__(self, input_dim, hidden_dim, seq_len):\n        super(LSTM_Autoencoder_with_latent, self).__init__()\n        \n        # Encoder\n        self.lstm_encoder = nn.LSTM(input_dim, hidden_dim, batch_first=True)\n        \n        # Decoder\n        self.lstm_decoder = nn.LSTM(hidden_dim, hidden_dim, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, input_dim)  # Fully connected layer to output original dimension\n    \n    def forward(self, x):\n        # Encoder\n        _, (hn, _) = self.lstm_encoder(x)\n        \n        # Return the latent (encoded) feature for SSIM comparison\n        latent = hn[-1, :, :]  # Latent feature is the last hidden state (from the last layer of LSTM)\n        \n        # Repeat the latent state (hn) to match the sequence length\n        decoder_input = hn[-1, :, :] .unsqueeze(1).repeat(1, x.size(1), 1)  # Repeat for seq_len\n        \n        # Decoder\n        decoded, _ = self.lstm_decoder(decoder_input)\n        \n        # Output layer (fully connected)\n        decoded = self.fc(decoded)\n        \n        return decoded, latent\n# Load trained model\nmodel = LSTM_Autoencoder_with_latent(input_dim=1, hidden_dim=100, seq_len=X_test.shape[1])\nmodel.load_state_dict(torch.load('/kaggle/working/model.pth'))\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# model.load_state_dict(torch.load('/kaggle/working/model.pth'))\nmodel=model.to(device)\nmodel.eval()\ndef compute_pearson_correlation(latent, original_bands):\n    \"\"\"\n    Compute the Pearson correlation between latent features and each band of the original hyperspectral data.\n\n    latent: Tensor of shape (batch_size, hidden_dim)\n    original_bands: Tensor of shape (batch_size, seq_len, input_dim)\n\n    Returns: Pearson correlation scores for each band.\n    \"\"\"\n    batch_size, seq_len, _ = original_bands.shape\n    correlation_scores = np.zeros(seq_len)\n    print(\"Computing Pearson Coeff\")\n    for band in tqdm(range(seq_len)):\n        # Extract the original band data (shape: batch_size)\n        band_data = original_bands[:, band, :].cpu().numpy().flatten()  # Flatten to 1D vector\n\n        # Compute Pearson correlation between the latent feature and the band\n        latent_data = latent.cpu().detach().numpy().mean(axis=1)  # Take the mean over hidden_dim to get a scalar value per sample\n\n        # Compute Pearson correlation\n        correlation, _ = pearsonr(latent_data, band_data)\n        correlation_scores[band] = correlation\n\n    return correlation_scores\n\ndef compute_mutual_information(latent, original_bands):\n    \"\"\"\n    Compute Mutual Information between latent features and each band of the original hyperspectral data.\n\n    latent: Tensor of shape (batch_size, hidden_dim)\n    original_bands: Tensor of shape (batch_size, seq_len, input_dim)\n\n    Returns: Mutual information scores for each band.\n    \"\"\"\n    batch_size, seq_len, _ = original_bands.shape\n    mi_scores = np.zeros(seq_len)\n    print(\"Computing MI ..........................\")\n    for band in tqdm(range(seq_len)):\n        # Extract the original band data (shape: batch_size)\n        band_data = original_bands[:, band, :].cpu().numpy()  # Use original band data (shape: batch_size)\n\n        # Get the latent features (shape: batch_size, hidden_dim)\n        latent_data = latent.cpu().detach().numpy()\n\n        # Mutual Information computation\n        # Mutual Information between band data (1D) and latent data (latent vector)\n        mi = mutual_info_regression(latent_data, band_data)  # Perform MI regression per band\n        \n        # Aggregate the mutual information scores by taking the mean of all features\n        mi_scores[band] = mi.mean()  # Taking the mean across the latent features\n\n    return mi_scores\n\n\nwith torch.no_grad():\n    # Move data to the device\n    X_test = X_test.to(device)\n    \n    # Get the decoded output and latent feature from the model\n    decoded_output, latent_features = model(X_test)  # decoded_output: [batch_size, seq_len, input_dim]\n\n    # Compute Pearson correlation scores for each band between latent features and original bands\n    pearson_scores = compute_pearson_correlation(latent_features, X_test)\n    \n    # Compute Mutual Information scores for each band\n    mi_scores = compute_mutual_information(latent_features, X_test)\n\n# Combine the two measures and rank bands by their combined score\ncombined_scores = np.abs(pearson_scores) + mi_scores  # You can also experiment with weighted sums if you prefer\n\n# Plot Pearson and Mutual Information Scores\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, len(pearson_scores) + 1), pearson_scores, label='Pearson Correlation', marker='o')\nplt.plot(range(1, len(mi_scores) + 1), mi_scores, label='Mutual Information', marker='x')\nplt.title('Pearson Correlation and Mutual Information for Each Band')\nplt.xlabel('Band Number')\nplt.ylabel('Score')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Rank bands based on combined scores (higher is better)\nimportant_bands_person = np.argsort(combined_scores)[::-1]  # Sort in descending order of combined score (higher is better)\n\n# Print Important Bands\nprint(\"Important Bands (sorted by pearson scores):\", important_bands_pearson)\n\n# Optionally, visualize the most important band\ntop_band_idx = important_bands[0]\nprint(f\"Most important band: {top_band_idx + 1} with combined score: {combined_scores[top_band_idx]}\")\n\n# Visualize the original and latent features for the most important band\nindex = 0  # Random sample index from X_test\noriginal_band = X_test[:, top_band_idx].cpu().numpy()\nlatent_band = latent_features[:, top_band_idx].cpu().detach().numpy()\n\nplt.figure(figsize=(10, 5))\nplt.plot(original_band, label='Original Band', color='blue')\nplt.plot(latent_band, label='Latent Feature', color='red', linestyle='--')\nplt.title(f\"Band {top_band_idx + 1} - Original vs Latent Feature\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.417589Z","iopub.status.idle":"2025-02-10T08:29:25.417920Z","shell.execute_reply":"2025-02-10T08:29:25.417802Z"},"scrolled":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Rank bands based on combined scores (higher is better)\n# Combine the two measures and rank bands by their combined score\ncombined_scores = pearson_scores + mi_scores \nimportant_bands_pearson = np.argsort(pearson_scores)[::-1]  # Sort in descending order of combined score (higher is better)\n\n# Print Important Bands\nprint(\"Important Bands (sorted by pearson scores):\", list(important_bands_pearson))\nprint(f\"Important Bands (sorted by mi scores):, {list(np.argsort(combined_scores)[::-1])}\")\n# Optionally, visualize the most important band\ntop_band_idx = important_bands[0]\nprint(f\"Most important band: {top_band_idx + 1} with combined score: {combined_scores[top_band_idx]}\")\n\n# Visualize the original and latent features for the most important band\nindex = 0  # Random sample index from X_test\noriginal_band = X_test[:, top_band_idx].cpu().numpy()\nlatent_band = latent_features[:, top_band_idx].cpu().detach().numpy()\n\nplt.figure(figsize=(10, 5))\nplt.plot(original_band, label='Original Band', color='blue')\nplt.plot(latent_band, label='Latent Feature', color='red', linestyle='--')\nplt.title(f\"Band {top_band_idx + 1} - Original vs Latent Feature\")\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.418804Z","iopub.status.idle":"2025-02-10T08:29:25.419146Z","shell.execute_reply":"2025-02-10T08:29:25.419008Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" # selected_bands=[113, 115, 114, 116, 117, 118, 112, 119, 120, 172, 121, 173, 111, 122, 138, 137, 135, 136, 168, 139, 171, 134, 169, 167, 132, 133, 123, 170, 166, 174, 140, 165, 124, 164, 131, 163, 130, 125, 162, 126, 175, 127, 128, 129, 110, 161, 158, 108, 160, 157, 159, 154, 153, 176, 141, 155, 156, 109, 177, 178, 179, 180, 107, 181, 183, 152, 182, 148, 149, 185, 147, 186, 184, 187, 189, 188, 190, 142, 191, 151, 193, 28, 146, 20, 27, 29, 150, 24, 19, 18, 21, 26, 17, 25, 192, 30, 22, 12, 23, 194, 13, 16, 11, 106, 10, 31, 14, 32, 15, 9, 8, 33, 7, 6, 196, 105, 195, 5, 4, 101, 197, 100, 3, 145, 104, 34, 99, 2, 198, 98, 47, 143, 51, 49, 144, 41, 52, 45, 44, 48, 42, 46, 50, 43, 53, 1, 40, 54, 56, 55, 57, 97, 39, 38, 70, 68, 69, 58, 71, 72, 67, 66, 74, 102, 73, 59, 37, 65, 64, 91, 63, 60, 92, 62, 94, 76, 61, 103, 81, 96, 95, 80, 35, 83, 93, 82, 85, 77, 84, 75, 36, 78, 86, 199, 90, 89, 87, 88, 79, 0]\nselected_bands=[\n    36, 31, 90, 61, 168, 116, 181, 128, 82, 157, 194, 7, 63, 173, 114, 130, 174, 71,\n    171, 19, 78, 107, 187, 137, 40, 111, 104, 34, 66, 122, 158, 179, 102, 167, 29, 20,\n    45, 153, 73, 147, 180, 124, 131, 132, 3, 33, 68, 38, 24, 143, 4, 81, 54, 191,\n    178, 26, 195, 148, 0, 106, 32, 22, 8, 192, 175, 118, 161, 156, 115, 134, 112, 125,\n    58, 197, 56, 27, 86, 139, 183, 16, 103, 77, 80, 142, 53, 15, 75, 138, 105, 65,\n    152, 83, 28, 5, 184, 150, 87, 42, 48, 37, 117, 44, 30, 49, 10, 163, 93, 74,\n    25, 6, 196, 126, 188, 108, 89, 92, 149, 21, 145, 141, 96, 70, 113, 50, 43, 57,\n    165, 18, 193, 162, 60, 121, 95, 119, 185, 146, 199, 160, 190, 166, 94, 101, 67, 13,\n    120, 59, 186, 35, 127, 97, 23, 98, 100, 12, 151, 155, 11, 52, 176, 51, 144, 136,\n    47, 55, 129, 76, 177, 79, 9, 154, 14, 135, 72, 85, 169, 91, 99, 1, 140, 109,\n    2, 46, 17, 110, 64, 41, 198, 69, 84, 133, 88, 172, 170, 39, 164, 189, 62, 123,\n    182, 159\n]\n# 11, 151, 31, 10, 146, 32, 15, 90, 9, 150, 8, 33, 7, 192, 86, 194, 6, 93, 106, 84, 95, 82, 5, 79, 83, 85, 101, 96, 0, 80, 196, 94, 4, 81, 91, 195, 100, 105, 92, 97, 35, 99, 98, 34, 197, 3, 2, 145, 104, 1, 198, 102, 144, 143, 103, 199]\n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\nimport cupy as cp\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom cuml.ensemble import RandomForestClassifier\nimport scipy.io\nimport math \nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef preprocess_data(image, ground_truth, selected_bands, train_ratio=0.8):\n\n    rows, cols, bands = image.shape\n    # print(image.shape )\n    new_image=image[:,:,selected_bands]\n    # print(new_image.shape)\n    \n    reshaped_data = image.reshape((-1, bands))\n\n    reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(new_image)# Flatten spatial dimensions into 2D\n    reshaped_gt = ground_truth.flatten()  # Flatten ground truth\n\n    # Remove pixels where ground truth is 0 (no label)\n    valid_mask = reshaped_gt >=0\n    reshaped_data = reshaped_data[valid_mask]\n    # reshaped_data = new_image [valid_mask]\n    \n    reshaped_gt = reshaped_gt[valid_mask]\n    # rows, cols, bands = image.shape\n    # new_image = image[:, :, selected_bands]\n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    \n    # reshaped_data = new_image.reshape((-1, len(selected_bands)))\n    # print(reshaped_data.shape)# Flatten spatial dimensions into 2D\n    # reshaped_gt = ground_truth.flatten()# Flatten ground truth\n\n    # # Remove pixels where ground truth is 0 (no label)\n    # valid_mask = reshaped_gt >= 0\n    # reshaped_data = reshaped_data[valid_mask]\n    # reshaped_gt = reshaped_gt[valid_mask]\n\n    # Split into train and test\n    num_train = int(len(reshaped_gt) * train_ratio)\n    train_data = reshaped_data[:num_train]\n    train_gt = reshaped_gt[:num_train]\n    test_data = reshaped_data[num_train:]\n    test_gt = reshaped_gt[num_train:]\n    # print(f\"Shape of gt is {train_gt.shape}\")\n\n    return train_data, train_gt, test_data, test_gt\n\n# Load hyperspectral data\ntrain_data = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat')\nimage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\ngt= scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']  # Ground truth (training)\n# selected_bands=[44, 45, 49, 42, 47, 52, 50, 46, 36, 69, 38, 37, 51, 40, 39, 41, 55, 48, 53, 56, 70, 63, 54, 65, 182, 66, 105, 186, 114, 68, 132, 74, 67, 60, 64, 167, 73, 168, 159, 107]\n\n# Selected bands\n# selected_bands = [37, 176, 9, 139, 25, 88, 12, 19, 20, 46, 145, 153, 83, 23, 104, 39, 27, 68, 84, 152, 181, 60, 174, 119, 172, 70, 101, 131, 3, 63, 6, 190, 66, 110, 74, 165, 175, 62, 157, 5]\n\n# Store average frequency of bands for each iteration\navg_frequencies = []\nband_collection=[]\n\nfor i in range(1, len(selected_bands) + 1,30):\n   \n    # Load the training data\n    # train_data = scipy.io.loadmat('/kaggle/working/Indian_pines_corrected.mat')\n    # mage = train_data['indian_pines_corrected']  # Hyperspectral image (training)\n    # train_gt = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']   # Ground truth (training)\n    \n    print(sorted(selected_bands[:i]))\n    \n    # Preprocess data\n    train_data, train_gt, test_data, test_gt = preprocess_data(image, gt, sorted(selected_bands[:i]))\n    \n    # Convert to CuPy arrays\n    train_data_cp = cp.array(train_data).astype('float32')\n    train_gt_cp = cp.array(train_gt).astype('int32')\n    test_data_cp = cp.array(test_data).astype('float32')\n    test_gt_cp = cp.array(test_gt).astype('int32')\n\n    # Normalize\n    train_mean = cp.mean(train_data_cp, axis=0)\n    train_std = cp.std(train_data_cp, axis=0)\n    train_data_cp = (train_data_cp - train_mean) / train_std\n    test_data_cp = (test_data_cp - train_mean) / train_std\n\n    # Train Random Forest model\n    rf_model = RandomForestClassifier(n_estimators=300,n_streams=1, max_depth=15, random_state=42)\n    rf_model.fit(train_data_cp, train_gt_cp)\n\n    # Predict on test set\n    predictions_cp = rf_model.predict(test_data_cp)\n    predictions = cp.asnumpy(predictions_cp)\n    test_gt_np = cp.asnumpy(test_gt_cp)\n\n    # Compute accuracy and confusion matrix\n    conf_matrix = confusion_matrix(test_gt_np, predictions)\n    class_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\n\n    # Average band importance (store for plotting)\n    avg_frequencies.append(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n\n    # Display results\n    # print(\"\\nClassification Report:\")\n    print(classification_report(test_gt_np, predictions, output_dict=True)['accuracy'])\n    \n    # Create classification maps\n    pred_map = np.zeros_like(train_gt.flatten())\n    # height=int(145*0.8)\n    # width=int(145*0.8)\n    # train_gt_reshaped = train_gt.reshape(height, width)\n    test_gt_reshaped=test_gt.reshape(int(145*0.2), 145)\n    # print(f\"reshaped  = {train_gt_reshaped.shape}\")\n    \n    pred_map[-len(predictions):] = predictions\n    pred_map = predictions.reshape(int(145*0.2), 145)\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(\"Actual Classification\")\n\n    plt.imshow(test_gt_reshaped, cmap=\"jet\")\n    plt.colorbar()\n    plt.subplot(1, 2, 2)\n    plt.title(\"Predicted Classification\")\n    plt.imshow(pred_map, cmap=\"jet\")\n    plt.colorbar()\n    plt.show()\n\n# Plot average frequencies\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(selected_bands) + 1,30), avg_frequencies, marker='o')\nplt.xlabel(\"Iteration (Number of Bands Selected)\")\nplt.ylabel(\"Average accuracy achieved\")\nplt.title(\"Average Frequency of Bands per Iteration\")\nplt.grid()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T11:59:57.677483Z","iopub.execute_input":"2025-02-10T11:59:57.677789Z","iopub.status.idle":"2025-02-10T12:00:33.044425Z","shell.execute_reply.started":"2025-02-10T11:59:57.677767Z","shell.execute_reply":"2025-02-10T12:00:33.043546Z"}},"outputs":[{"name":"stdout","text":"[36]\n0.6185493460166468\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"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OnbsqKZNm0qS+vfvrwoVKmjcuHGaM2eOevXqle/XHD58WKVKlbI9lpCQEEVGRto+blHo27evNmzYoA8//FA33XSTz2tPPfWUHnvssSBFlld+3+e9e/dKkvdS6ZP8PTlhl/yOYYDihkumDTVt2jSVK1dOnTp1Uo8ePTRt2rR89ztw4IAeeOAB1ahRQ263W1WrVtXf//537du3T0uXLtXll18uSerXr5/3cq4pU6ZIOvP9PKff53L8+HGNGDFCTZo0UUxMjEqVKqWrrrpKS5YsKdRn++ijj/TVV1/psccey1MMS1J0dLRGjx591jGef/55XXnllapQoYKioqLUpEkTffjhh3n2W7hwoVq1aqWyZcuqdOnSuuSSS/Too4/67PPyyy+rXr16uuCCC1SuXDk1bdpU06dP975++v03LpdLkydP1uHDhwv0PT3bz0gq2Pd3165dqlSpkiRp1KhR3vc9eRY/v/uosrOz9dRTT6lmzZpyu92qUaOGHn30UR07dsxnvxo1aqhz585asWKFmjVrpsjISF144YV6++23z/ozgHN5FKpsmx9OvYwKcKprrrlGUu4Jbim30CtdurR++OEHXX/99SpTpox69+4tScrJydH48eNVr149RUZGKi4uTnfffbf++OMPnzEty9LTTz+tqlWr6oILLlDbtm317bff5nnvM93bumrVKl1//fUqV66cSpUqpYYNG+rFF1/0xjdhwgRJ8rkE/CS7Y8zPqlWr9Mknn+gf//hHnmJYyj3p/Pzzz591jMmTJ+uaa65RbGys3G636tatq4kTJ+bZb+3atWrfvr0qVqyoqKgoJSUl6Y477vDZZ8aMGWrSpInKlCmj6OhoNWjQwPv9kvJ+n2vUqOFtXlSqVMknT+d3D/HRo0eVmpqqiy++WJGRkapcubK6d++uH374wbtPQY53XC6XDh8+rKlTp3p/biePRc50D/Grr76qevXqye12KyEhQSkpKTpw4IDPPm3atFH9+vX13XffqW3btrrgggtUpUoVPffcc2f7EaCImJTrafkYatq0aerevbsiIiLUq1cvTZw4UWvWrPEWuJJ06NAhXXXVVdq8ebPuuOMOXXbZZdq3b5/mzp2rn376SXXq1NGTTz6pESNG6K677tJVV10lSbryyiv9iiUzM1NvvvmmevXqpTvvvFMHDx7UW2+9pfbt22v16tV+X4o9d+5cSbmX8RTWiy++qBtuuEG9e/fW8ePHNWPGDN18882aN2+eOnXqJEn69ttv1blzZzVs2FBPPvmk3G63tm/fri+++MI7zhtvvKGBAweqR48eGjRokI4ePaqvv/5aq1at0t/+9rd83/vf//63Xn/9da1evVpvvvmmpDN/T8/1M6pYsWKBvr+VKlXSxIkTde+99+rGG29U9+7dJUkNGzY84/eof//+mjp1qnr06KEHH3xQq1at0pgxY7R582bNmjXLZ9/t27erR48e+sc//qE+ffroX//6l/r27asmTZqoXr16Bf/BAAAkyVvUVKhQwbstOztb7du3V6tWrfT88897L6W+++67NWXKFPXr108DBw7Uzp079corr2jDhg364osvFB4eLkkaMWKEnn76aV1//fW6/vrrtX79erVr165AlxAvXLhQnTt3VuXKlTVo0CDFx8dr8+bNmjdvngYNGqS7775bv/zyixYuXKh///vfeb6+KGK04/hg4sSJqlevnm644QaFhYXp448/1n333aecnBylpKRIyu3itmvXTpUqVdKwYcNUtmxZ7dq1SzNnzvT5fvXq1UvXXnut96q1zZs364svvtCgQYPyfe/x48fr7bff1qxZszRx4kSVLl36jHna4/Goc+fOWrRokXr27KlBgwbp4MGDWrhwoTZt2qSaNWtKKtjxzr///W/1799fzZo101133SVJ3q/PT2pqqkaNGqXk5GTde++92rp1q/c489SfpST98ccf6tChg7p3765bbrlFH374oYYOHaoGDRqoY8eOBf2xAOfHgnHWrl1rSbIWLlxoWZZl5eTkWFWrVrUGDRrks9+IESMsSdbMmTPzjJGTk2NZlmWtWbPGkmRNnjw5zz7Vq1e3+vTpk2d769atrdatW3ufZ2dnW8eOHfPZ548//rDi4uKsO+64w2e7JGvkyJFn/XyXXnqpFRMTc9Z9TtWnTx+revXqPtuOHDni8/z48eNW/fr1rWuuuca77YUXXrAkWb/99tsZx+7atatVr169s77/5MmTLUnWzp07fWIqVapUnn1P/54W5GdU0O/vb7/9dsbv78iRI61T/1xs3LjRkmT179/fZ7+HHnrIkmQtXrzYJ2ZJ1vLly73b9u7da7ndbuvBBx/M815wroyMDEuStTIjydpk1bT1sTIjyZJkZWRkBPtjAo5yMkd8/vnn1m+//WalpaVZM2bMsCpUqGBFRUVZP/30k2VZuXlDkjVs2DCfr//vf/9rSbKmTZvms33BggU+2/fu3WtFRERYnTp18uYPy7KsRx991JLkk3uWLFliSbKWLFliWVZunklKSrKqV69u/fHHHz7vc+pYKSkpVn6HnoGIMT833nijJSlPjGdyeu6zrLzHB5ZlWe3bt7cuvPBC7/NZs2ZZkqw1a9accexBgwZZ0dHRVnZ29hn3Of37fGpMpx97nH5s9a9//cuSZI0bNy7PuKd+7wpyvGNZllWqVKl8v7+nH8Oc/Bm1a9fO8ng83v1eeeUVS5L1r3/9yydmSdbbb7/t3Xbs2DErPj7euummm/J+Q1AkTMz1XDJtoGnTpikuLk5t27aVlHspzK233qoZM2bI4/F49/voo4/UqFEj3XjjjXnGsHMZgtDQUO+9Lzk5Odq/f7+ys7PVtGlTrV+/3u/xMjMzVaZMmfOKKSoqyvvvP/74QxkZGbrqqqt84jl5/86cOXOUk5OT7zhly5bVTz/9pDVr1pxXPGdSkJ+R3d9fKXdiFEkaMmSIz/YHH3xQkvTJJ5/4bK9bt673CgIp91KvSy65RDt27CjU+wOAaZKTk1WpUiUlJiaqZ8+eKl26tGbNmqUqVar47Hfvvff6PP/ggw8UExOj6667Tvv27fM+mjRpotKlS3tvn/n88891/Phx3X///T45fvDgweeMbcOGDdq5c6cGDx6c597WghwvFEWMUu7xgaTzOkY49fggIyND+/btU+vWrbVjxw5lZGRI+uv4YN68ecrKysp3nLJly+rw4cNauHBhoWM5m48++kgVK1bU/fffn+e1U793BTne8cfJn9HgwYN9JgG98847FR0dnef4oHTp0rrtttu8zyMiItSsWTOOD1CkKIgN4/F4NGPGDLVt21Y7d+7U9u3btX37djVv3lx79uzRokWLvPv+8MMPql+/fpHENXXqVDVs2FCRkZGqUKGCKlWqpE8++cSbXPwRHR2tgwcPnlc88+bN0xVXXKHIyEiVL1/ee0nxqfHceuutatmypfr376+4uDj17NlT77//vk9xPHToUJUuXVrNmjVTrVq1lJKS4nNJ9fkq6M/Izu+vJO3evVshISF5ZiaPj49X2bJltXv3bp/t1apVyzNGuXLl8twbhuLBo5AALMVAOgLOZsKECVq4cKGWLFmi7777Tjt27FD79u199gkLC1PVqlV9tm3btk0ZGRmKjY1VpUqVfB6HDh3yTtJ08u92rVq1fL6+UqVKKleu3FljO3n5dmGPGYoiRin3+EDSeR0jfPHFF0pOTlapUqVUtmxZVapUyTt3yMmc2rp1a910000aNWqUKlasqK5du2ry5Mk+c2zcd999uvjii9WxY0dVrVpVd9xxhxYsWFDouE73ww8/6JJLLjnnhJgFOd7xx8mf0SWXXOKzPSIiQhdeeGGe44OqVavmOWnC8YEzmJTruYfYMIsXL9avv/6qGTNmaMaMGXlenzZtmtq1a2fLe53prLDH4/GZkfCdd95R37591a1bNz388MOKjY1VaGioxowZ4zPxQ0HVrl1bGzZsUFpamhITE/3++v/+97+64YYbdPXVV+vVV19V5cqVFR4ersmTJ/tMhhUVFaXly5dryZIl+uSTT7RgwQK99957uuaaa/TZZ58pNDRUderU0datWzVv3jwtWLBAH330kV599VWNGDHCu8RRoNn9/T1VQa8UONMMlJZlndf7A4ApmjVr5p1l+kzcbneepflycnIUGxt7xskzT06oGExFFWPt2rUlSd98843PVUsF9cMPP+jaa69V7dq1NW7cOCUmJioiIkL/+c9/9MILL3hPiLtcLn344YdauXKlPv74Y3366ae644479M9//lMrV65U6dKlFRsbq40bN+rTTz/V/PnzNX/+fE2ePFl///vfNXXqVFs+77kU9HgnkDg+gBNQEBtm2rRpio2N9c70eKqZM2dq1qxZmjRpkqKiolSzZk1t2rTprOOdrSAqV65cnhkFpdyzhxdeeKH3+YcffqgLL7xQM2fO9BmvsMtAdenSRe+++67eeecdDR8+3O+v/+ijjxQZGalPP/3UZ5mjyZMn59k3JCRE1157ra699lqNGzdOzzzzjB577DEtWbJEycnJkqRSpUrp1ltv1a233qrjx4+re/fuGj16tIYPH37ey1YU5GdU0O+vP5fBV69eXTk5Odq2bZvq1Knj3b5nzx4dOHBA1atXL/BYKH5Onum1d0wAgVCzZk19/vnnatmypc/lsac7+Xd727ZtPjn6t99+O2e37uQES5s2bfLmvvycKc8URYxS7vHBmDFj9M477xSqIP7444917NgxzZ071+fKpzOtinHFFVfoiiuu0OjRozV9+nT17t1bM2bMUP/+/SXldk27dOmiLl26KCcnR/fdd59ee+01PfHEE3muwPJXzZo1tWrVKmVlZflMYnUqf453CnqMcPJntHXrVp+f0fHjx7Vz586z/v+As5iU653Zt0ZA/Pnnn5o5c6Y6d+6sHj165HkMGDBABw8e9M7CeNNNN+mrr77KM2Ow9NeZu5PrG+ZX+NasWVMrV670mflx3rx5SktL89nv5NnBU88Grlq1Sl9++WWhPmePHj3UoEEDjR49Ot8xDh48eNZ1BkNDQ+VyuXzup961a5dmz57ts9/+/fvzfO3JGbFPXhb1+++/+7weERGhunXryrKsM95X5I+C/IwK+v09ORtpfj/L011//fWScme8PNW4ceMkyTszJUomu5dhOPkAYL9bbrlFHo9HTz31VJ7XsrOzvX/zk5OTFR4erpdfftknX5z+dz4/l112mZKSkjR+/Pg8OeTUsc50zFAUMUpSixYt1KFDB7355pt5crqUW7Q99NBDZ/z6/PJpRkZGngLyjz/+yNPhPNfxQUhIiHfG6NOXLyyMm266Sfv27dMrr7yS57VTjw8Kcrwj5f7sCnJ8kJycrIiICL300ks+34O33npLGRkZHB8UIyblejrEBpk7d64OHjyoG264Id/Xr7jiClWqVEnTpk3Trbfeqocfflgffvihbr75Zt1xxx1q0qSJ9u/fr7lz52rSpElq1KiRatasqbJly2rSpEkqU6aMSpUqpebNmyspKUn9+/fXhx9+qA4dOuiWW27RDz/8oHfeeSfPVP2dO3fWzJkzdeONN6pTp07auXOnJk2apLp16+rQoUN+f87w8HDNnDlTycnJuvrqq3XLLbeoZcuWCg8P17fffqvp06erXLlyZ1yLuFOnTho3bpw6dOigv/3tb9q7d68mTJigiy66SF9//bV3vyeffFLLly9Xp06dVL16de3du1evvvqqqlat6l3/uF27doqPj1fLli0VFxenzZs365VXXlGnTp3Oe+IvSQX6GRX0+xsVFaW6devqvffe08UXX6zy5curfv36+d4T1qhRI/Xp00evv/66Dhw4oNatW2v16tWaOnWqunXr5p2wDQAQXK1bt9bdd9+tMWPGaOPGjWrXrp3Cw8O1bds2ffDBB3rxxRfVo0cPVapUSQ899JDGjBmjzp076/rrr9eGDRs0f/58VaxY8azvERISookTJ6pLly5q3Lix+vXrp8qVK2vLli369ttv9emnn0qSmjRpIkkaOHCg2rdvr9DQUPXs2bNIYjzp7bffVrt27dS9e3d16dJF1157rUqVKqVt27ZpxowZ+vXXX8+4FnG7du28Xd27775bhw4d0htvvKHY2Fj9+uuv3v2mTp2qV199VTfeeKNq1qypgwcP6o033lB0dLT3hHL//v21f/9+XXPNNapatap2796tl19+WY0bN/a58qqw/v73v+vtt9/WkCFDtHr1al111VU6fPiwPv/8c913333q2rVrgY93pNyf3eeff65x48YpISFBSUlJat68eZ73rVSpkoYPH65Ro0apQ4cOuuGGG7R161a9+uqruvzyy30m0AIcIxhTWyM4unTpYkVGRlqHDx8+4z59+/a1wsPDrX379lmWZVm///67NWDAAKtKlSpWRESEVbVqVatPnz7e1y3LsubMmWPVrVvXCgsLy7ME0z//+U+rSpUqltvttlq2bGmtXbs2z9IAOTk51jPPPGNVr17dcrvd1qWXXmrNmzcv3+WQVIBll076448/rBEjRlgNGjSwLrjgAisyMtKqX7++NXz4cOvXX3/17pff+7z11ltWrVq1LLfbbdWuXduaPHlynuUXFi1aZHXt2tVKSEiwIiIirISEBKtXr17W999/793ntddes66++mqrQoUKltvttmrWrGk9/PDDPtPNn8+yS5Z17p+RP9/f//3vf1aTJk2siIgIn+91fktPZGVlWaNGjbKSkpKs8PBwKzEx0Ro+fLh19OjRPDF36tQpz2c5/f8BnO/kUgyfZzSwvrQa2/r4PKOBI5diAILtZI442xI+lnXmvHHS66+/bjVp0sSKioqyypQpYzVo0MB65JFHrF9++cW7j8fjsUaNGmVVrlzZioqKstq0aWNt2rQpT+7Jbzkgy7KsFStWWNddd51VpkwZq1SpUlbDhg2tl19+2ft6dna2df/991uVKlWyXC5XnrxiZ4xnc+TIEev555+3Lr/8cqt06dJWRESEVatWLev++++3tm/f7t0vv9w3d+5cq2HDhlZkZKRVo0YNa+zYsd4ljk7m8fXr11u9evWyqlWrZrndbis2Ntbq3LmztXbtWu84H374odWuXTsrNjbWioiIsKpVq2bdfffdPscn57Ps0snP+dhjj3nzdHx8vNWjRw/rhx9+8O5TkOMdy7KsLVu2WFdffbUVFRXls8RV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1atXlyQlJSUpPj7eJ/bMzEytWrUqqLEfOXJEISG+v2qhoaHKycmR5Ny4T1eQOFu0aKEDBw5o3bp13n0WL16snJwcNW/evMhjPtXJBLlt2zZ9/vnnqlChgs/rToz99ttv19dff+3z+5qQkKCHH35Yn376qWPjBs6muOR6qfjme3J90SPXOyPvFMdcL5Hvgy64c3rlNWPGDMvtdltTpkyxvvvuO+uuu+6yypYta6Wnpwc7NK97773XiomJsZYuXWr9+uuv3seRI0e8+9xzzz1WtWrVrMWLF1tr1661WrRoYbVo0SKIUZ/ZqTNPWpZzY1+9erUVFhZmjR492tq2bZs1bdo064ILLrDeeecd7z7PPvusVbZsWWvOnDnW119/bXXt2tVKSkqy/vzzz6DF3adPH6tKlSrWvHnzrJ07d1ozZ860KlasaD3yyCOOi/vgwYPWhg0brA0bNliSrHHjxlkbNmzwzs5YkDg7dOhgXXrppdaqVausFStWWLVq1bJ69eoV1NiPHz9u3XDDDVbVqlWtjRs3+vzeHjt2LKixn+t7frrTZ50syrhPzjyZkLHeqmpts/WRkLHekTNPIjCKQ663rJKV78n1gUWuJ9efT+z5CVa+NzHXO64gtizLevnll61q1apZERERVrNmzayVK1cGOyQfkvJ9TJ482bvPn3/+ad13331WuXLlrAsuuMC68cYbrV9//TV4QZ/F6UnSybF//PHHVv369S23223Vrl3bev31131ez8nJsZ544gkrLi7Ocrvd1rXXXmtt3bo1SNHmyszMtAYNGmRVq1bNioyMtC688ELrscce8/nj7JS4lyxZku//7T59+hQ4zt9//93q1auXVbp0aSs6Otrq16+fdfDgwaDGvnPnzjP+3i5ZsiSosZ/re366/BJkUcVtYpJE4Dg911tWycr35PrAIteT688n9vwEK9+bmOtdlmVZ59djBgCYIDMzUzExMYrL+Eoh0WVsHTsn86D2xDRSRkaGz/1eAACg6JiY65llGgDgF49CZRmyFAMAACYyKdc7alItAAAAAACKCh1iAIBfPDmhsnJsPmts83gAAKDwTMr1dIgBAAAAAI717LPPyuVyafDgwbaPTYcYAOAXT3aocrLtPctr2TweAAAoPCfl+jVr1ui1115Tw4YNbY3nJDrEAAAAAADHOXTokHr37q033nhD5cqVC8h70CEGAPjFkx0mV7a96cOyeTwAAFB4Tsn1KSkp6tSpk5KTk/X000/bGs9JHIEAAAAAAIpEZmamz3O32y23251nvxkzZmj9+vVas2ZNQOOhIAYA+MWTHSKX7fcVcQcPAABOEchcn5iY6LN95MiRSk1N9dmWlpamQYMGaeHChYqMjLQ1jtNREAMA/OLJDg1AkmRSLQAAnCKQuT4tLU3R0dHe7fl1h9etW6e9e/fqsssu+ysmj0fLly/XK6+8omPHjik01J74KIgBAAAAAEUiOjrapyDOz7XXXqtvvvnGZ1u/fv1Uu3ZtDR061LZiWKIgBgD4KTs7VK4sOsQAAJRUwc71ZcqUUf369X22lSpVShUqVMiz/Xxx0xYAAAAAwEh0iAEAfrE8YbI8NqcPu8cDAACF5sRcv3TpUnviOA0dYgAAAACAkTglDwDwT3Zo7sPuMQEAgDMYlOvpEAMAAAAAjESHGADgH4POGgMAYCSDcj0FMQDAPx6XlO2yf0wAAOAMBuV6LpkGAAAAABiJDjEAwD/ZJx52jwkAAJzBoFxPhxgAAAAAYCQ6xAAA/xh01hgAACMZlOvpEAMAAAAAjESHGADgH4POGgMAYCSDcj0dYgAAAACAkegQAwD8ky0pKwBjAgAAZzAo19MhBgAAAAAYiQ4xAMA/nhMPu8cEAADOYFCupyAGAPjHoIk2AAAwkkG5nkumAQAAAABGokMMAPCPQWeNAQAwkkG5ng4xAAAAAMBIdIgBAP4x6KwxAABGMijX0yEGAAAAABiJDjEAwD8e2X+W16FLMQAAYCSDcj0dYgAAAACAkegQAwD8Y9B9RQAAGMmgXE9BDADwj0FJEgAAIxmU67lkGgBQrD377LNyuVwaPHhwsEMBAADFDB1iAIB/sk487B6zENasWaPXXntNDRs2tDceAABM5qBcH2h0iAEAxdKhQ4fUu3dvvfHGGypXrlywwwEAAMUQBTEAwD+eAD38lJKSok6dOik5Ofm8Pg4AADiNQ3J9UeCSaQCAY2RmZvo8d7vdcrvdefabMWOG1q9frzVr1hRVaAAAoASiQwwA8I9Hf80+adfjxFnjxMRExcTEeB9jxozJ8/ZpaWkaNGiQpk2bpsjIyMB9TgAATBXAXO80dIgBAI6Rlpam6Oho7/P8usPr1q3T3r17ddlll3m3eTweLV++XK+88oqOHTum0NDQIokXAAAUbxTEAAD/BHBtwujoaJ+COD/XXnutvvnmG59t/fr1U+3atTV06FCKYQAAzpdB6xBTEAMA/BPkJFmmTBnVr1/fZ1upUqVUoUKFPNsBAEAhGFQQcw8xAAAAAMBIdIgBAP5x4FnjpUuX2hIGAACQI3N9oNAhBgAAAAAYiQ4xAMA/J5disHtMAADgDAblejrEAAAAAAAj0SEGAPjHoPuKAAAwkkG5ng4xAAAAAMBIdIgBAP7JkhQagDEBAIAzGJTrKYgBAP7xyP6JMRw60QYAAEYyKNdzyTQAAAAAwEh0iAEA/jFoog0AAIxkUK6nQwwAAAAAMBIdYgCAfzyy/yyvQ+8rAgDASAblejrEAAAAAAAj0SEGAPgnW/YvxeDQ+4oAADCSQbmeDjEAAAAAwEh0iAEA/smS/adTs2weDwAAFJ5BuZ6CGADgH4/snxjDoRNtAABgJINyPZdMAwAAAACMRIcYAOAfg5ZiAADASAblejrEAAAAAAAj0SEGAPgnW/afTnXoUgwAABjJoFxPhxgAAAAAYCQ6xAAA/2RJcgVgTAAA4AwG5Xo6xAAAAAAAI9EhBgD4x6C1CQEAMJJBuZ6CGADgH4Mm2gAAwEgG5XoumQYAAAAAGIkOMQDAPx7Zf5bXoZdRAQBgJINyPR1iAAAAAICR6BADAPwTiGUTHLoUAwAARjIo19MhBgAAAAAYiQ4xAMA/Htl/OtWh9xUBAGAkg3I9HWIAAAAAgJHoEAMA/JMtyRWAMQEAgDMYlOspiAEA/jEoSQIAYCSDcj2XTAMAAAAAjESHGADgn0Cc4XXoWWMAAIxkUK6nQwwAAAAAMBIFMQDAP54APQAAgDM4INePGTNGl19+ucqUKaPY2Fh169ZNW7duPe+PdjoKYgAAAACAoyxbtkwpKSlauXKlFi5cqKysLLVr106HDx+29X24hxgA4B+D7isCAMBIDsj1CxYs8Hk+ZcoUxcbGat26dbr66qttC4sOMQAAAADA0TIyMiRJ5cuXt3VcOsQAAP844KwxAAAIoADm+szMTJ/Nbrdbbrf7rF+ak5OjwYMHq2XLlqpfv76tYVEQAwD8ky3JsnlMJtUCAMA5ApjrExMTfTaPHDlSqampZ/3SlJQUbdq0SStWrLA5KApiAAAAAEARSUtLU3R0tPf5ubrDAwYM0Lx587R8+XJVrVrV9ngoiAEA/glEN5cOMQAAzhHAXB8dHe1TEJ+JZVm6//77NWvWLC1dulRJSUkBCIqCGAAAAADgMCkpKZo+fbrmzJmjMmXKKD09XZIUExOjqKgo296HghgA4B/uIQYAoGRzQK6fOHGiJKlNmzY+2ydPnqy+ffvaE5MoiAEAAAAADmNZdlfk+aMgBgD4xwFnjQEAQAAZlOtDgh0AAAAAAADBQIcYAOCfbEk5No9p93gAAKDwDMr1dIgBAAAAAEaiQwwA8I9H9t9X5NCzxgAAGMmgXE9BDADwT7bsv77IoUkSAAAjGZTruWQaAAAAAGAkCmIAgH+yA/QooDFjxujyyy9XmTJlFBsbq27dumnr1q22fDQAAKCg5/qiREEMAChWli1bppSUFK1cuVILFy5UVlaW2rVrp8OHDwc7NAAAUMxwDzEAwD9ZCup9RQsWLPB5PmXKFMXGxmrdunW6+uqrbQ4MAAADBTnXFyU6xACAYi0jI0OSVL58+SBHAgAAihs6xAAA/+TI/qUYToyXmZnps9ntdsvtdp85lJwcDR48WC1btlT9+vVtDgoAAEMFMNc7DR1iAIBjJCYmKiYmxvsYM2bMWfdPSUnRpk2bNGPGjCKKEAAAlCR0iAEA/smW5LJ5zBNnjdPS0hQdHe3dfLbu8IABAzRv3jwtX75cVatWtTkgAAAMFsBc7zQUxAAA/wQwSUZHR/sUxPnualm6//77NWvWLC1dulRJSUk2BwMAgOEoiAEAcKaUlBRNnz5dc+bMUZkyZZSeni5JiomJUVRUVJCjAwAAxYnLsiyH1uoAACfJzMxUTEyMFJohuc7exfWblSl5YpSRkXHODrHLlf8p68mTJ6tv3772xgUAgEGckuuLEh1iAECxwnlcAABgFwpiAIB/PDLmviIAAIxkUK5n2SUAAAAAgJHoEAMA/OfQs7wAAMAmhuR6OsQAAAAAACNREAMAAAAAjERBDAAAAAAwEgUxAAAAAMBIFMQAAAAAACNREAMAAAAAjMSySwAAP2WdeNg9JgAAcAZzcj0dYgAAAACAkegQAwD8lH3iYfeYAADAGczJ9XSIAQAAAABGokMMAPCTOfcVAQBgJnNyPQUxAMBP5lxGBQCAmczJ9VwyDQAAAAAwEh1iAICfsmX/ZU/OPGsMAICZzMn1dIgBAAAAAEaiQwwA8JM5E20AAGAmc3I9HWIAAAAAgJHoEAMA/GTOzJMAAJjJnFxPhxgAAAAAYCQ6xAAAP5kz8yQAAGYyJ9dTEAMA/GTOZVQAAJjJnFzPJdMAAAAAACPRIQYA+MmcpRgAADCTObmeDjEAAAAAwEh0iAEAfjLnviIAAMxkTq6nQwwAAAAAMBIdYgCAn8xZigEAADOZk+vpEAMAAAAAjESHGADgJ3PuKwIAwEzm5HoKYgCAn8xZigEAADOZk+u5ZBoAAAAAYCQ6xAAAP5lzGRUAAGYyJ9fTIQYAAAAAGIkOMQDAT+YsxQAAgJnMyfV0iAEAAAAARqJDDADwkzn3FQEAYCZzcj0dYgAAAACAkegQAwD8ZM7ahAAAmMmcXE9BDADwkzlJEgAAM5mT67lkGgAAAABgJDrEAAA/mTPRBgAAZjIn19MhBgAAAAAYiQ4xAMBP2bL/PiBnnjUGAMBM5uR6OsQAAAAAACPRIQYA+Mmc+4oAADCTObmeDjEAAAAAwEh0iAEAfsqS/enDmWsTAgBgJnNyPQUxAMBP5lxGBQCAmczJ9VwyDQAAAAAwEh1iAICfzFmKAQAAM5mT6+kQAwAAAACMRIcYAOAnc+4rAgDATObkejrEAIBiacKECapRo4YiIyPVvHlzrV69OtghAQAAmwU631MQAwD8lBWgR8G99957GjJkiEaOHKn169erUaNGat++vfbu3Xv+Hw8AAOMFP9dLRZPvKYgBAMXOuHHjdOedd6pfv36qW7euJk2apAsuuED/+te/gh0aAACwSVHkewpiAICfsgP0KJjjx49r3bp1Sk5O9m4LCQlRcnKyvvzyy/P8bAAAINi5Xiq6fM+kWgAAPx0L2JiZmZk+W91ut9xut8+2ffv2yePxKC4uzmd7XFyctmzZEoDYAAAwTXBzvVR0+Z6CGABQIBEREYqPj1d6+gsBGb906dJKTEz02TZy5EilpqYG5P0AAIAvE3M9BTEAoEAiIyO1c+dOHT9+PCDjW5Yll8vlsy2/M8YVK1ZUaGio9uzZ47N9z549io+PD0hsAACYwCm5Xiq6fE9BDAAosMjISEVGRgY1hoiICDVp0kSLFi1St27dJEk5OTlatGiRBgwYENTYAAAo7pyQ66Wiy/cUxACAYmfIkCHq06ePmjZtqmbNmmn8+PE6fPiw+vXrF+zQAACATYoi31MQAwCKnVtvvVW//fabRowYofT0dDVu3FgLFizIM/EGAAAovooi37ssy7JsGw0AAAAAgGKCdYgBAAAAAEaiIAYAAAAAGImCGAAAAABgJApiAAAAAICRKIgBAAAAAEaiIAYAAAAAGImCGAAAAABgJApiAAAAAICRKIgBAAAAAEaiIAYAAAAAGImCGAAAAABgJApiAAAAAICR/h8uDlc4CY4P6QAAAABJRU5ErkJggg==\n"},"metadata":{}},{"name":"stdout","text":"[7, 19, 31, 34, 36, 40, 61, 63, 66, 71, 78, 82, 90, 104, 107, 111, 114, 116, 122, 128, 130, 137, 157, 158, 168, 171, 173, 174, 181, 187, 194]\n0.5843043995243757\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"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12rHjh264oorvG5j//79Gj9+vKpVq+buxTSDnTt3Kj4+Xn/88YfuvvtuPfLIIwoLC9PPP/+st99+W3PnzjVN0uvZs6fuvfde2e1297alS5cqKChIb7/9tsLCwtzbt23bpqAg/1zHOnHihMaPHy9J2a4yP/PMMxo1apRf3heFj5WGUQFm8a9//UvVq1dXenq6Vq5cqalTp+qrr77Spk2bVKxYsQKN5YYbbtDJkyc98lNefPXVV5oyZUpAi+LDhw/r5ptv1oYNG9S5c2fdd999KlGihLZt26bZs2dr+vTpOn36dMDiO19O3/Py5cuVlZWlV155xeO87X//+59fY3n++efVtWtX3X777R7bczqHQdFgpVxPQWxRu3bt0g8//KA5c+aoX79+mjVrlsaNGxfosHwiMzNTd955pw4ePKjly5erdevWHvsnTJigiRMnBii67IKDgxUc7HnF7NChQ4qIiMh2shGohBMSEqKQEP5cAECgdOzYUc2aNZMk9e3bV2XKlNGkSZP0+eefq3v37jm+Ji0tTcWLF/d5LEFBQQoPD/d5uwWhd+/e+vHHH/Xpp5/qrrvu8tj37LPP6umnnw5QZNnl9D0fOnRIktxDpc/y9uKEr+R0DgMUNgyZtqhZs2apVKlS6tSpk7p27apZs2bleNzRo0f12GOPqVq1arLb7apUqZIeeOABHT58WMuXL9c111wjSerTp497ONfMmTMl5X4/z4X3uZw+fVpjx45V06ZNFR0dreLFi+v666/XsmXL8vXZPvvsM/300096+umnsxXDkhQVFaUJEyZctI2XXnpJ1113ncqUKaOIiAg1bdpUn376abbjFi9erNatW6tkyZIqUaKErrrqKj311FMex7z22muqV6+eihUrplKlSqlZs2b64IMP3PsvvP/GZrNpxowZSktLy9N3erGfkZS373f37t0qV66cJGn8+PHu9z17FT+n+6gyMzP17LPPqmbNmrLb7apWrZqeeuopnTp1yuO4atWqqXPnzlq5cqWaN2+u8PBw1ahRQ+++++5FfwYwL6eClenjh1mHUQFmdeONN0pyXeCWXIVeiRIl9Pvvv+uWW25RZGSkevToIUnKyspSUlKS6tWrp/DwcMXExKhfv376559/PNo0DEPPPfecKlWqpGLFiqldu3b69ddfs713bve2rlmzRrfccotKlSql4sWLq2HDhnrllVfc8U2ZMkWSPIaAn+XrGHOyZs0affnll3rooYeyFcOS66LzSy+9dNE2ZsyYoRtvvFHly5eX3W5X3bp1NXXq1GzHrV+/Xh06dFDZsmUVERGh6tWr68EHH/Q4Zvbs2WratKkiIyMVFRWlBg0auL8vKfv3XK1aNXfnRbly5TzydE73EKenpyshIUFXXnmlwsPDVaFCBd155536/fff3cfk5XzHZrMpLS1N77zzjvvndvZcJLd7iF9//XXVq1dPdrtdcXFxGjhwoI4ePepxTNu2bVW/fn1t3rxZ7dq1U7FixVSxYkW9+OKLF/sRoIBYKdfT5WNRs2bN0p133qmwsDB1795dU6dO1bp169wFriQdP35c119/vbZs2aIHH3xQTZo00eHDhzV//nzt3btXderU0b/+9S+NHTtWjzzyiK6//npJ0nXXXedVLA6HQ2+99Za6d++uhx9+WMeOHdPbb7+tDh06aO3atV4PxZ4/f74k1zCe/HrllVd06623qkePHjp9+rRmz56tu+++WwsWLFCnTp0kSb/++qs6d+6shg0b6l//+pfsdrt27Nih77//3t3Om2++qSFDhqhr164aOnSo0tPT9fPPP2vNmjW67777cnzv9957T9OnT9fatWv11ltvScr9O73Uz6hs2bJ5+n7LlSunqVOnqn///rrjjjt05513SpIaNmyY63fUt29fvfPOO+ratasef/xxrVmzRomJidqyZYvmzp3rceyOHTvUtWtXPfTQQ+rVq5f++9//qnfv3mratKnq1auX9x8MAECS3EVNmTJl3NsyMzPVoUMHtW7dWi+99JJ7KHW/fv00c+ZM9enTR0OGDNGuXbs0efJk/fjjj/r+++8VGhoqSRo7dqyee+453XLLLbrllluUnJys9u3b52kI8eLFi9W5c2dVqFBBQ4cOVWxsrLZs2aIFCxZo6NCh6tevn/bv36/Fixfrvffey/b6gojRF+cHU6dOVb169XTrrbcqJCREX3zxhQYMGKCsrCwNHDhQkqsXt3379ipXrpxGjRqlkiVLavfu3ZozZ47H99W9e3fddNNN7lFrW7Zs0ffff6+hQ4fm+N5JSUl69913NXfuXE2dOlUlSpTINU87nU517txZS5Ys0b333quhQ4fq2LFjWrx4sTZt2qSaNWtKytv5znvvvae+ffuqefPmeuSRRyTJ/fqcJCQkaPz48YqPj1f//v21bds293nm+T9LSfrnn3908803684779Q999yjTz/9VCNHjlSDBg3UsWPHvP5YgMtjwHLWr19vSDIWL15sGIZhZGVlGZUqVTKGDh3qcdzYsWMNScacOXOytZGVlWUYhmGsW7fOkGTMmDEj2zFVq1Y1evXqlW17mzZtjDZt2rifZ2ZmGqdOnfI45p9//jFiYmKMBx980GO7JGPcuHEX/XxXX321ER0dfdFjzterVy+jatWqHttOnDjh8fz06dNG/fr1jRtvvNG97eWXXzYkGX/99Veubd92221GvXr1Lvr+M2bMMCQZu3bt8oipePHi2Y698DvNy88or9/vX3/9lev3O27cOOP8PxcbN240JBl9+/b1OO6JJ54wJBlLly71iFmSsWLFCve2Q4cOGXa73Xj88cezvRfMKzU11ZBkrE6tbmwyavr0sTq1uiHJSE1NDfTHBEzlbI745ptvjL/++stISUkxZs+ebZQpU8aIiIgw9u7daxiGK29IMkaNGuXx+u+++86QZMyaNctj+6JFizy2Hzp0yAgLCzM6derkzh+GYRhPPfWUIckj9yxbtsyQZCxbtswwDFeeqV69ulG1alXjn3/+8Xif89saOHCgkdOppz9izMkdd9xhSMoWY24uzH2Gkf38wDAMo0OHDkaNGjXcz+fOnWtIMtatW5dr20OHDjWioqKMzMzMXI+58Hs+P6YLzz0uPLf673//a0gyJk2alK3d87+7vJzvGIZhFC9ePMfv98JzmLM/o/bt2xtOp9N93OTJkw1Jxn//+1+PmCUZ7777rnvbqVOnjNjYWOOuu+7K/oWgQFgx1zNk2oJmzZqlmJgYtWvXTpJrKEy3bt00e/ZsOZ1O93GfffaZGjVqpDvuuCNbG75chiA4ONh970tWVpaOHDmizMxMNWvWTMnJyV6353A4FBkZeVkxRUREuP//n3/+UWpqqq6//nqPeM7ev/P5558rKysrx3ZKliypvXv3at26dZcVT27y8jPy9fcruSZGkaThw4d7bH/88cclSV9++aXH9rp167pHEEiuoV5XXXWVdu7cma/3BwCriY+PV7ly5VS5cmXde++9KlGihObOnauKFSt6HNe/f3+P55988omio6P1f//3fzp8+LD70bRpU5UoUcJ9+8w333yj06dPa/DgwR45ftiwYZeM7ccff9SuXbs0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9emnn+rmm2/WPffco99//13vv/9+tqn6O3furDlz5uiOO+5Qp06dtGvXLk2bNk1169bV8ePHvf6coaGhmjNnjuLj43XDDTfonnvuUatWrRQaGqpff/1VH3zwgUqVKpXrWsSdOnXSpEmTdPPNN+u+++7ToUOHNGXKFF1xxRX6+eef3cf961//0ooVK9SpUydVrVpVhw4d0uuvv65KlSq51z9u3769YmNj1apVK8XExGjLli2aPHmyOnXqdNkTf0nK088or99vRESE6tatq48++khXXnmlSpcurfr16+d4T1ijRo3Uq1cvTZ8+XUePHlWbNm20du1avfPOO7r99tvdE7YBAAKrTZs26tevnxITE7Vx40a1b99eoaGh2r59uz755BO98sor6tq1q8qVK6cnnnhCiYmJ6ty5s2655Rb9+OOPWrhwocqWLXvR9wgKCtLUqVPVpUsXNW7cWH369FGFChW0detW/frrr/r6668lSU2bNpUkDRkyRB06dFBwcLDuvffeAonxrHfffVft27fXnXfeqS5duuimm25S8eLFtX37ds2ePVt//vlnrmsRt2/f3t2r269fPx0/flxvvvmmypcvrz///NN93DvvvKPXX39dd9xxh2rWrKljx47pzTffVFRUlPuCct++fXXkyBHdeOONqlSpkvbs2aPXXntNjRs39hh5lV8PPPCA3n33XQ0fPlxr167V9ddfr7S0NH3zzTcaMGCAbrvttjyf70iun90333yjSZMmKS4uTtWrV1eLFi2yvW+5cuU0evRojR8/XjfffLNuvfVWbdu2Ta+//rquueYajwm0ANMIxNTWCIwuXboY4eHhRlpaWq7H9O7d2wgNDTUOHz5sGIZh/P3338agQYOMihUrGmFhYUalSpWMXr16ufcbhmF8/vnnRt26dY2QkJBsSzD95z//MSpWrGjY7XajVatWxvr167MtDZCVlWU8//zzRtWqVQ273W5cffXVxoIFC3JcDkl5WHbprH/++ccYO3as0aBBA6NYsWJGeHi4Ub9+fWP06NHGn3/+6T4up/d5++23jVq1ahl2u92oXbu2MWPGjGzLLyxZssS47bbbjLi4OCMsLMyIi4szunfvbvz222/uY9544w3jhhtuMMqUKWPY7XajZs2axogRIzymm7+cZZcM49I/I2++3x9++MFo2rSpERYW5vFd57T0REZG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\n"},"metadata":{}},{"name":"stdout","text":"[0, 3, 4, 7, 19, 20, 24, 26, 29, 31, 32, 33, 34, 36, 38, 40, 45, 54, 61, 63, 66, 68, 71, 73, 78, 81, 82, 90, 102, 104, 106, 107, 111, 114, 116, 122, 124, 128, 130, 131, 132, 137, 143, 147, 148, 153, 157, 158, 167, 168, 171, 173, 174, 178, 179, 180, 181, 187, 191, 194, 195]\n0.5821640903686088\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"[0, 3, 4, 7, 8, 15, 16, 19, 20, 22, 24, 26, 27, 29, 31, 32, 33, 34, 36, 38, 40, 45, 53, 54, 56, 58, 61, 63, 65, 66, 68, 71, 73, 75, 77, 78, 80, 81, 82, 86, 90, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 118, 122, 124, 125, 128, 130, 131, 132, 134, 137, 138, 139, 142, 143, 147, 148, 152, 153, 156, 157, 158, 161, 167, 168, 171, 173, 174, 175, 178, 179, 180, 181, 183, 187, 191, 192, 194, 195, 197]\n0.5759809750297266\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"[0, 3, 4, 5, 6, 7, 8, 10, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 44, 45, 48, 49, 53, 54, 56, 58, 61, 63, 65, 66, 68, 71, 73, 74, 75, 77, 78, 80, 81, 82, 83, 86, 87, 89, 90, 92, 93, 96, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 115, 116, 117, 118, 122, 124, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 141, 142, 143, 145, 147, 148, 149, 150, 152, 153, 156, 157, 158, 161, 163, 167, 168, 171, 173, 174, 175, 178, 179, 180, 181, 183, 184, 187, 188, 191, 192, 194, 195, 196, 197]\n0.5776456599286564\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"[0, 3, 4, 5, 6, 7, 8, 10, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 77, 78, 80, 81, 82, 83, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 171, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199]\n0.5797859690844233\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199]\n0.5766944114149821\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 4 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"torch.cuda.empty_cache()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.421071Z","iopub.status.idle":"2025-02-10T08:29:25.421367Z","shell.execute_reply":"2025-02-10T08:29:25.421258Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Plot average frequencies\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(selected_bands) + 1,10), avg_frequencies, marker='o')\nplt.xlabel(\"Iteration (Number of Bands Selected)\")\nplt.ylabel(\"Average accuracy achieved\")\nplt.title(\"Average Frequency of Bands per Iteration\")\nplt.grid()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.422141Z","iopub.status.idle":"2025-02-10T08:29:25.422485Z","shell.execute_reply":"2025-02-10T08:29:25.422340Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport xgboost as xgb\nimport scipy.io\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n# Function to preprocess data\ndef preprocess_data(image, ground_truth, selected_bands, train_ratio=0.8):\n    rows, cols, bands = image.shape\n    new_image = image[:, :, selected_bands]  # Select specific bands\n    reshaped_data = new_image.reshape((-1, len(selected_bands)))  # Flatten spatial dimensions into 2D\n    reshaped_gt = ground_truth.flatten()  # Flatten ground truth\n\n    # Remove pixels where ground truth is 0 (no label)\n    valid_mask = reshaped_gt >=0\n    reshaped_data = reshaped_data[valid_mask]\n    reshaped_gt = reshaped_gt[valid_mask]\n\n    # Split into train and test\n    num_train = int(len(reshaped_gt) * train_ratio)\n    train_data = reshaped_data[:num_train]\n    train_gt = reshaped_gt[:num_train]\n    test_data = reshaped_data[num_train:]\n    test_gt = reshaped_gt[num_train:]\n\n    return train_data, train_gt, test_data, test_gt\n\n# Load hyperspectral data\ndata = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_corrected.mat')\nimage = data['indian_pines_corrected']  # Hyperspectral image\ngt = scipy.io.loadmat('/kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/Indian_pines_gt.mat')['indian_pines_gt']  # Ground truth\n\n# List of selected bands\nselected_bands = [\n    36, 31, 90, 61, 168, 116, 181, 128, 82, 157, 194, 7, 63, 173, 114, 130, 174, 71,\n    171, 19, 78, 107, 187, 137, 40, 111, 104, 34, 66, 122, 158, 179, 102, 167, 29, 20,\n    45, 153, 73, 147, 180, 124, 131, 132, 3, 33, 68, 38, 24, 143, 4, 81, 54, 191,\n    178, 26, 195, 148, 0, 106, 32, 22, 8, 192, 175, 118, 161, 156, 115, 134, 112, 125,\n    58, 197, 56, 27, 86, 139, 183, 16, 103, 77, 80, 142, 53, 15, 75, 138, 105, 65,\n    152, 83, 28, 5, 184, 150, 87, 42, 48, 37, 117, 44, 30, 49, 10, 163, 93, 74,\n    25, 6, 196, 126, 188, 108, 89, 92, 149, 21, 145, 141, 96, 70, 113, 50, 43, 57,\n    165, 18, 193, 162, 60, 121, 95, 119, 185, 146, 199, 160, 190, 166, 94, 101, 67, 13,\n    120, 59, 186, 35, 127, 97, 23, 98, 100, 12, 151, 155, 11, 52, 176, 51, 144, 136,\n    47, 55, 129, 76, 177, 79, 9, 154, 14, 135, 72, 85, 169, 91, 99, 1, 140, 109,\n    2, 46, 17, 110, 64, 41, 198, 69, 84, 133, 88, 172, 170, 39, 164, 189, 62, 123,\n    182, 159\n]\n\n# Preprocess data\ntrain_data, train_gt, test_data, test_gt = preprocess_data(image, gt, selected_bands)\n\n# Normalize the data\ntrain_mean = np.mean(train_data, axis=0)\ntrain_std = np.std(train_data, axis=0)\ntrain_data = (train_data - train_mean) / train_std\ntest_data = (test_data - train_mean) / train_std\n\n# Train XGBoost model\nxgb_model = xgb.XGBClassifier(n_estimators=200, max_depth=10, learning_rate=0.1, random_state=42, use_label_encoder=False, eval_metric=\"mlogloss\")\nxgb_model.fit(train_data, train_gt)\n\n# Predict on test data\npredictions = xgb_model.predict(test_data)\n\n# Compute accuracy\naccuracy = accuracy_score(test_gt, predictions)\nprint(f\"XGBoost Accuracy: {accuracy:.4f}\")\n\n# Compute confusion matrix\nconf_matrix = confusion_matrix(test_gt, predictions)\nprint(\"\\nConfusion Matrix:\")\nprint(conf_matrix)\n\n# Visualize confusion matrix\nplt.figure(figsize=(10, 6))\nsns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=np.unique(test_gt), yticklabels=np.unique(test_gt))\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix of XGBoost Classifier\")\nplt.show()\n\n# Display classification report\nprint(\"\\nClassification Report:\")\nprint(classification_report(test_gt, predictions))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T12:04:11.104565Z","iopub.execute_input":"2025-02-10T12:04:11.104908Z","iopub.status.idle":"2025-02-10T12:04:11.244734Z","shell.execute_reply.started":"2025-02-10T12:04:11.104882Z","shell.execute_reply":"2025-02-10T12:04:11.243726Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-5a825fb044df>\u001b[0m in \u001b[0;36m<cell line: 61>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;31m# Train XGBoost model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0mxgb_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_label_encoder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_metric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"mlogloss\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m \u001b[0mxgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_gt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;31m# Predict on test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1469\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mclasses\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mexpected_classes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1470\u001b[0m             ):\n\u001b[0;32m-> 1471\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m   1472\u001b[0m                     \u001b[0;34mf\"Invalid classes inferred from unique values of `y`.  \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1473\u001b[0m                     \u001b[0;34mf\"Expected: {expected_classes}, got {classes}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid classes inferred from unique values of `y`.  Expected: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15], got [ 0  1  2  3  4  5  6  7  8  9 10 11 12 14 15 16]"],"ename":"ValueError","evalue":"Invalid classes inferred from unique values of `y`.  Expected: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15], got [ 0  1  2  3  4  5  6  7  8  9 10 11 12 14 15 16]","output_type":"error"}],"execution_count":29},{"cell_type":"markdown","source":"# **1D SOA implementation**","metadata":{}},{"cell_type":"markdown","source":" ## Taylor based kernels <!--  -->","metadata":{}},{"cell_type":"code","source":"#  import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import convolve1d\n\n# Sample 1D image signal (pixel intensities)\nX = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Define a second-order Taylor-based filter\n# Instead of a simple linear filter, we include squared terms\ndef taylor_filter(x, w):\n    return w[0] + w[1]*x + w[2]*x**2\n\n# Filter coefficients (trainable parameters)\nw = [0.5, -1.2, 0.3]  # Example values\n\n# Apply the Taylor-based filter to each pixel\nfiltered_output = taylor_filter(X, w)\n\n# Plot results\nplt.plot(X, label=\"Original Signal\")\nplt.plot(filtered_output, label=\"Taylor Filtered Signal\", linestyle=\"dashed\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.423087Z","iopub.status.idle":"2025-02-10T08:29:25.423329Z","shell.execute_reply":"2025-02-10T08:29:25.423225Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from scipy.ndimage import convolve\n\n# Sample 2D image (grayscale)\nimage = np.array([\n    [10, 20, 30],\n    [40, 50, 60],\n    [70, 80, 90]\n], dtype=np.float32)\n\n# Define a second-order Taylor-based filter\ndef taylor_filter_2d(x, w):\n    return w[0] + w[1]*x + w[2]*x**2\n\n# Apply Taylor transformation pixel-wise\nw = [0.1, -0.5, 0.2]  # Example weights\nfiltered_image = taylor_filter_2d(image, w)\nplt.imshow(image,cmap=\"gray\")\nplt.show()\n# Display result\nplt.imshow(filtered_image, cmap=\"gray\")\nplt.colorbar()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nos.environ[\"PATH\"] = \"/opt/conda/bin:\" + os.environ[\"PATH\"]\n!wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\n!bash miniconda.sh -b -p /opt/conda \n!rm miniconda.sh\n!/opt/conda/bin/conda init bash\n\n!conda create -n srl-soa python=3.7 -y \n!eval \"$(/opt/conda/bin/conda shell.bash hook)\"\n!pip install tensorflow numpy argparse scipy scikit-learn skfeature-chappers munkres==1.1.4\n\n# !pip install -r /kaggle/working/SRL-SOA/requirements.txt\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-14T07:05:48.808924Z","iopub.execute_input":"2025-02-14T07:05:48.809126Z","iopub.status.idle":"2025-02-14T07:07:00.584853Z","shell.execute_reply.started":"2025-02-14T07:05:48.809107Z","shell.execute_reply":"2025-02-14T07:07:00.583859Z"}},"outputs":[{"name":"stdout","text":"--2025-02-14 07:05:48--  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nResolving repo.anaconda.com (repo.anaconda.com)... 104.16.191.158, 104.16.32.241, 2606:4700::6810:20f1, ...\nConnecting to repo.anaconda.com (repo.anaconda.com)|104.16.191.158|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 154615621 (147M) [application/octet-stream]\nSaving to: ‘miniconda.sh’\n\nminiconda.sh        100%[===================>] 147.45M   241MB/s    in 0.6s    \n\n2025-02-14 07:05:49 (241 MB/s) - ‘miniconda.sh’ saved [154615621/154615621]\n\nPREFIX=/opt/conda\nUnpacking payload ...\n\nInstalling base environment...\n\nPreparing transaction: ...working... done\nExecuting transaction: ...working... done\ninstallation finished.\nWARNING:\n    You currently have a PYTHONPATH environment variable set. This may cause\n    unexpected behavior when running the Python interpreter in Miniconda3.\n    For best results, please verify that your PYTHONPATH only points to\n    directories of packages that are compatible with the Python interpreter\n    in Miniconda3: /opt/conda\nno change     /opt/conda/condabin/conda\nno change     /opt/conda/bin/conda\nno change     /opt/conda/bin/conda-env\nno change     /opt/conda/bin/activate\nno change     /opt/conda/bin/deactivate\nno change     /opt/conda/etc/profile.d/conda.sh\nno change     /opt/conda/etc/fish/conf.d/conda.fish\nno change     /opt/conda/shell/condabin/Conda.psm1\nno change     /opt/conda/shell/condabin/conda-hook.ps1\nno change     /opt/conda/lib/python3.12/site-packages/xontrib/conda.xsh\nno change     /opt/conda/etc/profile.d/conda.csh\nmodified      /root/.bashrc\n\n==> For changes to take effect, close and re-open your current shell. <==\n\nChannels:\n - defaults\nPlatform: linux-64\nCollecting package metadata (repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/conda/envs/srl-soa\n\n  added / updated specs:\n    - python=3.7\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    certifi-2022.12.7          |   py37h06a4308_0         150 KB\n    openssl-1.1.1w             |       h7f8727e_0         3.7 MB\n    pip-22.3.1                 |   py37h06a4308_0         2.7 MB\n    python-3.7.16              |       h7a1cb2a_0        44.8 MB\n    setuptools-65.6.3          |   py37h06a4308_0         1.1 MB\n    wheel-0.38.4               |   py37h06a4308_0          63 KB\n    xz-5.6.4                   |       h5eee18b_1         567 KB\n    ------------------------------------------------------------\n                                           Total:        53.2 MB\n\nThe following NEW packages will be INSTALLED:\n\n  _libgcc_mutex      pkgs/main/linux-64::_libgcc_mutex-0.1-main \n  _openmp_mutex      pkgs/main/linux-64::_openmp_mutex-5.1-1_gnu \n  ca-certificates    pkgs/main/linux-64::ca-certificates-2024.12.31-h06a4308_0 \n  certifi            pkgs/main/linux-64::certifi-2022.12.7-py37h06a4308_0 \n  ld_impl_linux-64   pkgs/main/linux-64::ld_impl_linux-64-2.40-h12ee557_0 \n  libffi             pkgs/main/linux-64::libffi-3.4.4-h6a678d5_1 \n  libgcc-ng          pkgs/main/linux-64::libgcc-ng-11.2.0-h1234567_1 \n  libgomp            pkgs/main/linux-64::libgomp-11.2.0-h1234567_1 \n  libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-11.2.0-h1234567_1 \n  ncurses            pkgs/main/linux-64::ncurses-6.4-h6a678d5_0 \n  openssl            pkgs/main/linux-64::openssl-1.1.1w-h7f8727e_0 \n  pip                pkgs/main/linux-64::pip-22.3.1-py37h06a4308_0 \n  python             pkgs/main/linux-64::python-3.7.16-h7a1cb2a_0 \n  readline           pkgs/main/linux-64::readline-8.2-h5eee18b_0 \n  setuptools         pkgs/main/linux-64::setuptools-65.6.3-py37h06a4308_0 \n  sqlite             pkgs/main/linux-64::sqlite-3.45.3-h5eee18b_0 \n  tk                 pkgs/main/linux-64::tk-8.6.14-h39e8969_0 \n  wheel              pkgs/main/linux-64::wheel-0.38.4-py37h06a4308_0 \n  xz                 pkgs/main/linux-64::xz-5.6.4-h5eee18b_1 \n  zlib               pkgs/main/linux-64::zlib-1.2.13-h5eee18b_1 \n\n\n\nDownloading and Extracting Packages:\npython-3.7.16        | 44.8 MB   |                                       |   0% \nopenssl-1.1.1w       | 3.7 MB    |                                       |   0% \u001b[A\n\npip-22.3.1           | 2.7 MB    |                                       |   0% \u001b[A\u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    |                                       |   0% \u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    |                                       |   0% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    |                                       |   0% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\npython-3.7.16        | 44.8 MB   | 1                                     |   0% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\nopenssl-1.1.1w       | 3.7 MB    | #3                                    |   4% \u001b[A\n\npip-22.3.1           | 2.7 MB    | #7                                    |   5% \u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    | #############5                        |  37% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    | #####5                                |  15% \u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    | ###9                                  |  11% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\npython-3.7.16        | 44.8 MB   | ##                                    |   6% \u001b[A\u001b[A\u001b[A\n\npip-22.3.1           | 2.7 MB    | ########################4             |  66% \u001b[A\u001b[A\nopenssl-1.1.1w       | 3.7 MB    | ####################2                 |  55% \u001b[A\n\n\n\n\n\nwheel-0.38.4         | 63 KB     | #########3                            |  25% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\nwheel-0.38.4         | 63 KB     | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\npython-3.7.16        | 44.8 MB   | ###9                                  |  11% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\npip-22.3.1           | 2.7 MB    | ##################################### | 100% \u001b[A\u001b[A\nopenssl-1.1.1w       | 3.7 MB    | ##################################### | 100% \u001b[A\npython-3.7.16        | 44.8 MB   | ######3                               |  17% \u001b[A\n\n\n\n\n\nwheel-0.38.4         | 63 KB     | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\npython-3.7.16        | 44.8 MB   | ##############2                       |  38% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\npython-3.7.16        | 44.8 MB   | ############################7         |  78% \u001b[A\u001b[A\u001b[A\u001b[A\npython-3.7.16        | 44.8 MB   | ##################################5   |  93% \u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\n\n\npython-3.7.16        | 44.8 MB   | ##################################### | 100% \u001b[A\u001b[A\u001b[A\n\n                                                                                \u001b[A\u001b[A\n                                                                                \u001b[A\n\n                                                                                \u001b[A\u001b[A\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\n\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use\n#\n#     $ conda activate srl-soa\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n\nCollecting tensorflow\n  Downloading tensorflow-2.18.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\nCollecting numpy\n  Downloading numpy-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (62 kB)\nCollecting argparse\n  Downloading argparse-1.4.0-py2.py3-none-any.whl.metadata (2.8 kB)\nCollecting scipy\n  Downloading scipy-1.15.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\nCollecting scikit-learn\n  Downloading scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\nCollecting skfeature-chappers\n  Downloading skfeature_chappers-1.1.0-py3-none-any.whl.metadata (926 bytes)\nCollecting munkres==1.1.4\n  Downloading munkres-1.1.4-py2.py3-none-any.whl.metadata (980 bytes)\nCollecting absl-py>=1.0.0 (from tensorflow)\n  Downloading absl_py-2.1.0-py3-none-any.whl.metadata (2.3 kB)\nCollecting astunparse>=1.6.0 (from tensorflow)\n  Downloading astunparse-1.6.3-py2.py3-none-any.whl.metadata (4.4 kB)\nCollecting flatbuffers>=24.3.25 (from tensorflow)\n  Downloading flatbuffers-25.2.10-py2.py3-none-any.whl.metadata (875 bytes)\nCollecting gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 (from tensorflow)\n  Downloading gast-0.6.0-py3-none-any.whl.metadata (1.3 kB)\nCollecting google-pasta>=0.1.1 (from tensorflow)\n  Downloading google_pasta-0.2.0-py3-none-any.whl.metadata (814 bytes)\nCollecting libclang>=13.0.0 (from tensorflow)\n  Downloading libclang-18.1.1-py2.py3-none-manylinux2010_x86_64.whl.metadata (5.2 kB)\nCollecting opt-einsum>=2.3.2 (from tensorflow)\n  Downloading opt_einsum-3.4.0-py3-none-any.whl.metadata (6.3 kB)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.12/site-packages (from tensorflow) (24.2)\nCollecting protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 (from tensorflow)\n  Downloading protobuf-5.29.3-cp38-abi3-manylinux2014_x86_64.whl.metadata (592 bytes)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.12/site-packages (from tensorflow) (2.32.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.12/site-packages (from tensorflow) (75.8.0)\nCollecting six>=1.12.0 (from tensorflow)\n  Downloading six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)\nCollecting termcolor>=1.1.0 (from tensorflow)\n  Downloading termcolor-2.5.0-py3-none-any.whl.metadata (6.1 kB)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.12/site-packages (from tensorflow) (4.12.2)\nCollecting wrapt>=1.11.0 (from tensorflow)\n  Downloading wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.4 kB)\nCollecting grpcio<2.0,>=1.24.3 (from tensorflow)\n  Downloading grpcio-1.70.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.9 kB)\nCollecting tensorboard<2.19,>=2.18 (from tensorflow)\n  Downloading tensorboard-2.18.0-py3-none-any.whl.metadata (1.6 kB)\nCollecting keras>=3.5.0 (from tensorflow)\n  Downloading keras-3.8.0-py3-none-any.whl.metadata (5.8 kB)\nCollecting numpy\n  Downloading numpy-2.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\nCollecting h5py>=3.11.0 (from tensorflow)\n  Downloading h5py-3.12.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.5 kB)\nCollecting ml-dtypes<0.5.0,>=0.4.0 (from tensorflow)\n  Downloading ml_dtypes-0.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (20 kB)\nCollecting joblib>=1.2.0 (from scikit-learn)\n  Downloading joblib-1.4.2-py3-none-any.whl.metadata (5.4 kB)\nCollecting threadpoolctl>=3.1.0 (from scikit-learn)\n  Downloading threadpoolctl-3.5.0-py3-none-any.whl.metadata (13 kB)\nCollecting pandas (from skfeature-chappers)\n  Downloading pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (89 kB)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.12/site-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\nRequirement already satisfied: rich in /opt/conda/lib/python3.12/site-packages (from keras>=3.5.0->tensorflow) (13.9.4)\nCollecting namex (from keras>=3.5.0->tensorflow)\n  Downloading namex-0.0.8-py3-none-any.whl.metadata (246 bytes)\nCollecting optree (from keras>=3.5.0->tensorflow)\n  Downloading optree-0.14.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (47 kB)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (2025.1.31)\nCollecting markdown>=2.6.8 (from tensorboard<2.19,>=2.18->tensorflow)\n  Downloading Markdown-3.7-py3-none-any.whl.metadata (7.0 kB)\nCollecting tensorboard-data-server<0.8.0,>=0.7.0 (from tensorboard<2.19,>=2.18->tensorflow)\n  Downloading tensorboard_data_server-0.7.2-py3-none-manylinux_2_31_x86_64.whl.metadata (1.1 kB)\nCollecting werkzeug>=1.0.1 (from tensorboard<2.19,>=2.18->tensorflow)\n  Downloading werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)\nCollecting python-dateutil>=2.8.2 (from pandas->skfeature-chappers)\n  Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)\nCollecting pytz>=2020.1 (from pandas->skfeature-chappers)\n  Downloading pytz-2025.1-py2.py3-none-any.whl.metadata (22 kB)\nCollecting tzdata>=2022.7 (from pandas->skfeature-chappers)\n  Downloading tzdata-2025.1-py2.py3-none-any.whl.metadata (1.4 kB)\nCollecting MarkupSafe>=2.1.1 (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow)\n  Downloading MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.12/site-packages (from rich->keras>=3.5.0->tensorflow) (2.2.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.12/site-packages (from rich->keras>=3.5.0->tensorflow) (2.15.1)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.12/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.0)\nDownloading munkres-1.1.4-py2.py3-none-any.whl (7.0 kB)\nDownloading tensorflow-2.18.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (615.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m615.5/615.5 MB\u001b[0m \u001b[31m51.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading numpy-2.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.2/19.2 MB\u001b[0m \u001b[31m131.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading argparse-1.4.0-py2.py3-none-any.whl (23 kB)\nDownloading scipy-1.15.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (40.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.2/40.2 MB\u001b[0m \u001b[31m104.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.1/13.1 MB\u001b[0m \u001b[31m116.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading skfeature_chappers-1.1.0-py3-none-any.whl (66 kB)\nDownloading absl_py-2.1.0-py3-none-any.whl (133 kB)\nDownloading astunparse-1.6.3-py2.py3-none-any.whl (12 kB)\nDownloading flatbuffers-25.2.10-py2.py3-none-any.whl (30 kB)\nDownloading gast-0.6.0-py3-none-any.whl (21 kB)\nDownloading google_pasta-0.2.0-py3-none-any.whl (57 kB)\nDownloading grpcio-1.70.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.9/5.9 MB\u001b[0m \u001b[31m93.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading h5py-3.12.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.4 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.4/5.4 MB\u001b[0m \u001b[31m99.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading joblib-1.4.2-py3-none-any.whl (301 kB)\nDownloading keras-3.8.0-py3-none-any.whl (1.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m41.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading libclang-18.1.1-py2.py3-none-manylinux2010_x86_64.whl (24.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.5/24.5 MB\u001b[0m \u001b[31m128.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading ml_dtypes-0.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m59.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading opt_einsum-3.4.0-py3-none-any.whl (71 kB)\nDownloading protobuf-5.29.3-cp38-abi3-manylinux2014_x86_64.whl (319 kB)\nDownloading six-1.17.0-py2.py3-none-any.whl (11 kB)\nDownloading tensorboard-2.18.0-py3-none-any.whl (5.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.5/5.5 MB\u001b[0m \u001b[31m96.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading termcolor-2.5.0-py3-none-any.whl (7.8 kB)\nDownloading threadpoolctl-3.5.0-py3-none-any.whl (18 kB)\nDownloading wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (89 kB)\nDownloading pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.7/12.7 MB\u001b[0m \u001b[31m122.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading Markdown-3.7-py3-none-any.whl (106 kB)\nDownloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)\nDownloading pytz-2025.1-py2.py3-none-any.whl (507 kB)\nDownloading tensorboard_data_server-0.7.2-py3-none-manylinux_2_31_x86_64.whl (6.6 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.6/6.6 MB\u001b[0m \u001b[31m96.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tzdata-2025.1-py2.py3-none-any.whl (346 kB)\nDownloading werkzeug-3.1.3-py3-none-any.whl (224 kB)\nDownloading namex-0.0.8-py3-none-any.whl (5.8 kB)\nDownloading optree-0.14.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (400 kB)\nDownloading MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (23 kB)\nInstalling collected packages: pytz, namex, munkres, libclang, flatbuffers, argparse, wrapt, tzdata, threadpoolctl, termcolor, tensorboard-data-server, six, protobuf, optree, opt-einsum, numpy, MarkupSafe, markdown, joblib, grpcio, gast, absl-py, werkzeug, scipy, python-dateutil, ml-dtypes, h5py, google-pasta, astunparse, tensorboard, scikit-learn, pandas, keras, tensorflow, skfeature-chappers\nSuccessfully installed MarkupSafe-3.0.2 absl-py-2.1.0 argparse-1.4.0 astunparse-1.6.3 flatbuffers-25.2.10 gast-0.6.0 google-pasta-0.2.0 grpcio-1.70.0 h5py-3.12.1 joblib-1.4.2 keras-3.8.0 libclang-18.1.1 markdown-3.7 ml-dtypes-0.4.1 munkres-1.1.4 namex-0.0.8 numpy-2.0.2 opt-einsum-3.4.0 optree-0.14.0 pandas-2.2.3 protobuf-5.29.3 python-dateutil-2.9.0.post0 pytz-2025.1 scikit-learn-1.6.1 scipy-1.15.1 six-1.17.0 skfeature-chappers-1.1.0 tensorboard-2.18.0 tensorboard-data-server-0.7.2 tensorflow-2.18.0 termcolor-2.5.0 threadpoolctl-3.5.0 tzdata-2025.1 werkzeug-3.1.3 wrapt-1.17.2\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"#  REMOVE OR DEACTIVATE THE ENV\n# import os\n\n# # Remove Conda paths from the environment variables\n# os.environ[\"PATH\"] = os.environ[\"PATH\"].replace('/opt/conda/bin:', '')\n# os.environ[\"LD_LIBRARY_PATH\"] = os.environ[\"LD_LIBRARY_PATH\"].replace('/opt/conda/lib:', '')\n# os.environ[\"CUDA_HOME\"] = ''\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.427177Z","iopub.status.idle":"2025-02-10T08:29:25.427528Z","shell.execute_reply":"2025-02-10T08:29:25.427344Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!export PATH=/usr/local/cuda-12.2/bin:$PATH\n!export LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64:$LD_LIBRARY_PATH\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.428316Z","iopub.status.idle":"2025-02-10T08:29:25.428652Z","shell.execute_reply":"2025-02-10T08:29:25.428495Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%cd SRL-SOA","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T11:12:26.980946Z","iopub.execute_input":"2025-02-10T11:12:26.981285Z","iopub.status.idle":"2025-02-10T11:12:26.988738Z","shell.execute_reply.started":"2025-02-10T11:12:26.981250Z","shell.execute_reply":"2025-02-10T11:12:26.987963Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working/SRL-SOA\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"!pip install tabulate seaborn\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T11:12:28.939300Z","iopub.execute_input":"2025-02-10T11:12:28.939612Z","iopub.status.idle":"2025-02-10T11:12:36.020410Z","shell.execute_reply.started":"2025-02-10T11:12:28.939588Z","shell.execute_reply":"2025-02-10T11:12:36.019588Z"}},"outputs":[{"name":"stdout","text":"Collecting tabulate\n  Downloading tabulate-0.9.0-py3-none-any.whl.metadata (34 kB)\nCollecting seaborn\n  Downloading seaborn-0.13.2-py3-none-any.whl.metadata (5.4 kB)\nRequirement already satisfied: numpy!=1.24.0,>=1.20 in /opt/conda/lib/python3.12/site-packages (from seaborn) (2.0.2)\nRequirement already satisfied: pandas>=1.2 in /opt/conda/lib/python3.12/site-packages (from seaborn) (2.2.3)\nCollecting matplotlib!=3.6.1,>=3.4 (from seaborn)\n  Downloading matplotlib-3.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\nCollecting contourpy>=1.0.1 (from matplotlib!=3.6.1,>=3.4->seaborn)\n  Downloading contourpy-1.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.4 kB)\nCollecting cycler>=0.10 (from matplotlib!=3.6.1,>=3.4->seaborn)\n  Downloading cycler-0.12.1-py3-none-any.whl.metadata (3.8 kB)\nCollecting fonttools>=4.22.0 (from matplotlib!=3.6.1,>=3.4->seaborn)\n  Downloading fonttools-4.56.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (101 kB)\nCollecting kiwisolver>=1.3.1 (from matplotlib!=3.6.1,>=3.4->seaborn)\n  Downloading kiwisolver-1.4.8-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.2 kB)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.12/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\nCollecting pillow>=8 (from matplotlib!=3.6.1,>=3.4->seaborn)\n  Downloading pillow-11.1.0-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (9.1 kB)\nCollecting pyparsing>=2.3.1 (from matplotlib!=3.6.1,>=3.4->seaborn)\n  Downloading pyparsing-3.2.1-py3-none-any.whl.metadata (5.0 kB)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.12/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.12/site-packages (from pandas>=1.2->seaborn) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.12/site-packages (from pandas>=1.2->seaborn) (2025.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.12/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\nDownloading tabulate-0.9.0-py3-none-any.whl (35 kB)\nDownloading seaborn-0.13.2-py3-none-any.whl (294 kB)\nDownloading matplotlib-3.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.6 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.6/8.6 MB\u001b[0m \u001b[31m95.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading contourpy-1.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (323 kB)\nDownloading cycler-0.12.1-py3-none-any.whl (8.3 kB)\nDownloading fonttools-4.56.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m102.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading kiwisolver-1.4.8-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m45.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pillow-11.1.0-cp312-cp312-manylinux_2_28_x86_64.whl (4.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.5/4.5 MB\u001b[0m \u001b[31m104.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pyparsing-3.2.1-py3-none-any.whl (107 kB)\nInstalling collected packages: tabulate, pyparsing, pillow, kiwisolver, fonttools, cycler, contourpy, matplotlib, seaborn\nSuccessfully installed contourpy-1.3.1 cycler-0.12.1 fonttools-4.56.0 kiwisolver-1.4.8 matplotlib-3.10.0 pillow-11.1.0 pyparsing-3.2.1 seaborn-0.13.2 tabulate-0.9.0\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"%cd ..\n!rm -r SRL-SOA\n!git clone https://github.com/vidhi-gajra-git/SRL-SOA.git\n%cd SRL-SOA\n!mkdir data \n!mkdir results \n!cp /kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/*.mat data/\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T08:25:48.255161Z","iopub.execute_input":"2025-02-19T08:25:48.255679Z","iopub.status.idle":"2025-02-19T08:25:49.561500Z","shell.execute_reply.started":"2025-02-19T08:25:48.255626Z","shell.execute_reply":"2025-02-19T08:25:49.559684Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working\nCloning into 'SRL-SOA'...\nremote: Enumerating objects: 598, done.\u001b[K\nremote: Counting objects: 100% (145/145), done.\u001b[K\nremote: Compressing objects: 100% (114/114), done.\u001b[K\nremote: Total 598 (delta 102), reused 31 (delta 31), pack-reused 453 (from 1)\u001b[K\nReceiving objects: 100% (598/598), 1.03 MiB | 22.83 MiB/s, done.\nResolving deltas: 100% (383/383), done.\n/kaggle/working/SRL-SOA\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T06:38:03.486239Z","iopub.execute_input":"2025-02-20T06:38:03.486763Z","iopub.status.idle":"2025-02-20T06:38:09.086209Z","shell.execute_reply.started":"2025-02-20T06:38:03.486720Z","shell.execute_reply":"2025-02-20T06:38:09.084499Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"2025-02-20 06:38:04.137981: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1740033484.179082     216 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1740033484.190884     216 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nTraceback (most recent call last):\n  File \"/kaggle/working/SRL-SOA/main.py\", line 10, in <module>\n    import utils\n  File \"/kaggle/working/SRL-SOA/utils.py\", line 27\n    %matplotlib inline \n    ^\nSyntaxError: invalid syntax\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"[36  31  90  61 168 116 181 128  82 157 194   7  63 173 114 130 174  71\n 171  19  78 107 187 137  40 111 104  34  66 122 158 179 102 167  29  20\n  45 153  73 147 180 124 131 132   3  33  68  38  24 143   4  81  54 191\n 178  26 195 148   0 106  32  22   8 192 175 118 161 156 115 134 112 125\n  58 197  56  27  86 139 183  16 103  77  80 142  53  15  75 138 105  65\n 152  83  28   5 184 150  87  42  48  37 117  44  30  49  10 163  93  74\n  25   6 196 126 188 108  89  92 149  21 145 141  96  70 113  50  43  57\n 165  18 193 162  60 121  95 119 185 146 199 160 190 166  94 101  67  13\n 120  59 186  35 127  97  23  98 100  12 151 155  11  52 176  51 144 136\n  47  55 129  76 177  79   9 154  14 135  72  85 169  91  99   1 140 109\n   2  46  17 110  64  41 198  69  84 133  88 172 170  39 164 189  62 123\n 182 159]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install tensorflow==2.18.0\n!nvcc --version\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-10T08:29:25.432647Z","iopub.status.idle":"2025-02-10T08:29:25.432913Z","shell.execute_reply":"2025-02-10T08:29:25.432807Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Env Install ","metadata":{}},{"cell_type":"code","source":"import os\nos.environ[\"PATH\"] = \"/opt/conda/bin:\" + os.environ[\"PATH\"]\n!wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\n!bash miniconda.sh -b -p /opt/conda \n!rm miniconda.sh\n!/opt/conda/bin/conda init bash\n\n!conda create -n srl-soa python=3.7 -y \n!eval \"$(/opt/conda/bin/conda shell.bash hook)\"\n!pip install tensorflow numpy argparse scipy scikit-learn skfeature-chappers munkres==1.1.4\n%cd SRL-SOA\n\n# !pip install -r /kaggle/working/SRL-SOA/requirements.txt\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T11:43:20.107553Z","iopub.execute_input":"2025-02-20T11:43:20.107927Z","iopub.status.idle":"2025-02-20T11:45:02.739729Z","shell.execute_reply.started":"2025-02-20T11:43:20.107899Z","shell.execute_reply":"2025-02-20T11:45:02.737688Z"}},"outputs":[{"name":"stdout","text":"--2025-02-20 11:43:20--  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nResolving repo.anaconda.com (repo.anaconda.com)... 104.16.191.158, 104.16.32.241, 2606:4700::6810:bf9e, ...\nConnecting to repo.anaconda.com (repo.anaconda.com)|104.16.191.158|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 154615621 (147M) [application/octet-stream]\nSaving to: ‘miniconda.sh’\n\nminiconda.sh        100%[===================>] 147.45M   293MB/s    in 0.5s    \n\n2025-02-20 11:43:20 (293 MB/s) - ‘miniconda.sh’ saved [154615621/154615621]\n\nPREFIX=/opt/conda\nUnpacking payload ...\n\nInstalling base environment...\n\nPreparing transaction: ...working... done\nExecuting transaction: ...working... done\ninstallation finished.\nWARNING:\n    You currently have a PYTHONPATH environment variable set. This may cause\n    unexpected behavior when running the Python interpreter in Miniconda3.\n    For best results, please verify that your PYTHONPATH only points to\n    directories of packages that are compatible with the Python interpreter\n    in Miniconda3: /opt/conda\nno change     /opt/conda/condabin/conda\nno change     /opt/conda/bin/conda\nno change     /opt/conda/bin/conda-env\nno change     /opt/conda/bin/activate\nno change     /opt/conda/bin/deactivate\nno change     /opt/conda/etc/profile.d/conda.sh\nno change     /opt/conda/etc/fish/conf.d/conda.fish\nno change     /opt/conda/shell/condabin/Conda.psm1\nno change     /opt/conda/shell/condabin/conda-hook.ps1\nno change     /opt/conda/lib/python3.12/site-packages/xontrib/conda.xsh\nno change     /opt/conda/etc/profile.d/conda.csh\nmodified      /root/.bashrc\n\n==> For changes to take effect, close and re-open your current shell. <==\n\nChannels:\n - defaults\nPlatform: linux-64\nCollecting package metadata (repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/conda/envs/srl-soa\n\n  added / updated specs:\n    - python=3.7\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    certifi-2022.12.7          |   py37h06a4308_0         150 KB\n    openssl-1.1.1w             |       h7f8727e_0         3.7 MB\n    pip-22.3.1                 |   py37h06a4308_0         2.7 MB\n    python-3.7.16              |       h7a1cb2a_0        44.8 MB\n    setuptools-65.6.3          |   py37h06a4308_0         1.1 MB\n    wheel-0.38.4               |   py37h06a4308_0          63 KB\n    xz-5.6.4                   |       h5eee18b_1         567 KB\n    ------------------------------------------------------------\n                                           Total:        53.2 MB\n\nThe following NEW packages will be INSTALLED:\n\n  _libgcc_mutex      pkgs/main/linux-64::_libgcc_mutex-0.1-main \n  _openmp_mutex      pkgs/main/linux-64::_openmp_mutex-5.1-1_gnu \n  ca-certificates    pkgs/main/linux-64::ca-certificates-2024.12.31-h06a4308_0 \n  certifi            pkgs/main/linux-64::certifi-2022.12.7-py37h06a4308_0 \n  ld_impl_linux-64   pkgs/main/linux-64::ld_impl_linux-64-2.40-h12ee557_0 \n  libffi             pkgs/main/linux-64::libffi-3.4.4-h6a678d5_1 \n  libgcc-ng          pkgs/main/linux-64::libgcc-ng-11.2.0-h1234567_1 \n  libgomp            pkgs/main/linux-64::libgomp-11.2.0-h1234567_1 \n  libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-11.2.0-h1234567_1 \n  ncurses            pkgs/main/linux-64::ncurses-6.4-h6a678d5_0 \n  openssl            pkgs/main/linux-64::openssl-1.1.1w-h7f8727e_0 \n  pip                pkgs/main/linux-64::pip-22.3.1-py37h06a4308_0 \n  python             pkgs/main/linux-64::python-3.7.16-h7a1cb2a_0 \n  readline           pkgs/main/linux-64::readline-8.2-h5eee18b_0 \n  setuptools         pkgs/main/linux-64::setuptools-65.6.3-py37h06a4308_0 \n  sqlite             pkgs/main/linux-64::sqlite-3.45.3-h5eee18b_0 \n  tk                 pkgs/main/linux-64::tk-8.6.14-h39e8969_0 \n  wheel              pkgs/main/linux-64::wheel-0.38.4-py37h06a4308_0 \n  xz                 pkgs/main/linux-64::xz-5.6.4-h5eee18b_1 \n  zlib               pkgs/main/linux-64::zlib-1.2.13-h5eee18b_1 \n\n\n\nDownloading and Extracting Packages:\npython-3.7.16        | 44.8 MB   |                                       |   0% \nopenssl-1.1.1w       | 3.7 MB    |                                       |   0% \u001b[A\n\npip-22.3.1           | 2.7 MB    |                                       |   0% \u001b[A\u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    |                                       |   0% \u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    |                                       |   0% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    |                                       |   0% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\npython-3.7.16        | 44.8 MB   | 5                                     |   1% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\nopenssl-1.1.1w       | 3.7 MB    | #######4                              |  20% \u001b[A\n\npip-22.3.1           | 2.7 MB    | ##7                                   |   8% \u001b[A\u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    | ##################7                   |  51% \u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    | ################7                     |  45% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\npython-3.7.16        | 44.8 MB   | #9                                    |   5% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\nopenssl-1.1.1w       | 3.7 MB    | ###########################8          |  75% \u001b[A\n\npip-22.3.1           | 2.7 MB    | ############################7         |  78% \u001b[A\u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\nwheel-0.38.4         | 63 KB     | #########3                            |  25% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\npython-3.7.16        | 44.8 MB   | ###2                                  |   9% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\npython-3.7.16        | 44.8 MB   | ####8                                 |  13% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\ncertifi-2022.12.7    | 150 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\npip-22.3.1           | 2.7 MB    | ##################################### | 100% \u001b[A\u001b[A\npython-3.7.16        | 44.8 MB   | ########9                             |  24% \u001b[A\n\n\n\n\n\nwheel-0.38.4         | 63 KB     | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\npython-3.7.16        | 44.8 MB   | #################                     |  46% \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\nxz-5.6.4             | 567 KB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\npython-3.7.16        | 44.8 MB   | ####################################2 |  98% \u001b[A\u001b[A\u001b[A\u001b[A\nopenssl-1.1.1w       | 3.7 MB    | ##################################### | 100% \u001b[A\n\n\nsetuptools-65.6.3    | 1.1 MB    | ##################################### | 100% \u001b[A\u001b[A\u001b[A\n\n                                                                                \u001b[A\u001b[A\n                                                                                \u001b[A\n\n                                                                                \u001b[A\u001b[A\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\n\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\n\n\n                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use\n#\n#     $ conda activate srl-soa\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n\nCollecting tensorflow\n  Downloading tensorflow-2.18.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\nCollecting numpy\n  Downloading numpy-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (62 kB)\nCollecting argparse\n  Downloading argparse-1.4.0-py2.py3-none-any.whl.metadata (2.8 kB)\nCollecting scipy\n  Downloading scipy-1.15.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\nCollecting scikit-learn\n  Downloading scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\nCollecting skfeature-chappers\n  Downloading skfeature_chappers-1.1.0-py3-none-any.whl.metadata (926 bytes)\nCollecting munkres==1.1.4\n  Downloading munkres-1.1.4-py2.py3-none-any.whl.metadata (980 bytes)\nCollecting absl-py>=1.0.0 (from tensorflow)\n  Downloading absl_py-2.1.0-py3-none-any.whl.metadata (2.3 kB)\nCollecting astunparse>=1.6.0 (from tensorflow)\n  Downloading astunparse-1.6.3-py2.py3-none-any.whl.metadata (4.4 kB)\nCollecting flatbuffers>=24.3.25 (from tensorflow)\n  Downloading flatbuffers-25.2.10-py2.py3-none-any.whl.metadata (875 bytes)\nCollecting gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 (from tensorflow)\n  Downloading gast-0.6.0-py3-none-any.whl.metadata (1.3 kB)\nCollecting google-pasta>=0.1.1 (from tensorflow)\n  Downloading google_pasta-0.2.0-py3-none-any.whl.metadata (814 bytes)\nCollecting libclang>=13.0.0 (from tensorflow)\n  Downloading libclang-18.1.1-py2.py3-none-manylinux2010_x86_64.whl.metadata (5.2 kB)\nCollecting opt-einsum>=2.3.2 (from tensorflow)\n  Downloading opt_einsum-3.4.0-py3-none-any.whl.metadata (6.3 kB)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.12/site-packages (from tensorflow) (24.2)\nCollecting protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 (from tensorflow)\n  Downloading protobuf-5.29.3-cp38-abi3-manylinux2014_x86_64.whl.metadata (592 bytes)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.12/site-packages (from tensorflow) (2.32.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.12/site-packages (from tensorflow) (75.8.0)\nCollecting six>=1.12.0 (from tensorflow)\n  Downloading six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)\nCollecting termcolor>=1.1.0 (from tensorflow)\n  Downloading termcolor-2.5.0-py3-none-any.whl.metadata (6.1 kB)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.12/site-packages (from tensorflow) (4.12.2)\nCollecting wrapt>=1.11.0 (from tensorflow)\n  Downloading wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.4 kB)\nCollecting grpcio<2.0,>=1.24.3 (from tensorflow)\n  Downloading grpcio-1.70.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.9 kB)\nCollecting tensorboard<2.19,>=2.18 (from tensorflow)\n  Downloading tensorboard-2.18.0-py3-none-any.whl.metadata (1.6 kB)\nCollecting keras>=3.5.0 (from tensorflow)\n  Downloading keras-3.8.0-py3-none-any.whl.metadata (5.8 kB)\nCollecting numpy\n  Downloading numpy-2.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\nCollecting h5py>=3.11.0 (from tensorflow)\n  Downloading h5py-3.13.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.5 kB)\nCollecting ml-dtypes<0.5.0,>=0.4.0 (from tensorflow)\n  Downloading ml_dtypes-0.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (20 kB)\nCollecting joblib>=1.2.0 (from scikit-learn)\n  Downloading joblib-1.4.2-py3-none-any.whl.metadata (5.4 kB)\nCollecting threadpoolctl>=3.1.0 (from scikit-learn)\n  Downloading threadpoolctl-3.5.0-py3-none-any.whl.metadata (13 kB)\nCollecting pandas (from skfeature-chappers)\n  Downloading pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (89 kB)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.12/site-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\nRequirement already satisfied: rich in /opt/conda/lib/python3.12/site-packages (from keras>=3.5.0->tensorflow) (13.9.4)\nCollecting namex (from keras>=3.5.0->tensorflow)\n  Downloading namex-0.0.8-py3-none-any.whl.metadata (246 bytes)\nCollecting optree (from keras>=3.5.0->tensorflow)\n  Downloading optree-0.14.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (47 kB)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.12/site-packages (from requests<3,>=2.21.0->tensorflow) (2025.1.31)\nCollecting markdown>=2.6.8 (from tensorboard<2.19,>=2.18->tensorflow)\n  Downloading Markdown-3.7-py3-none-any.whl.metadata (7.0 kB)\nCollecting tensorboard-data-server<0.8.0,>=0.7.0 (from tensorboard<2.19,>=2.18->tensorflow)\n  Downloading tensorboard_data_server-0.7.2-py3-none-manylinux_2_31_x86_64.whl.metadata (1.1 kB)\nCollecting werkzeug>=1.0.1 (from tensorboard<2.19,>=2.18->tensorflow)\n  Downloading werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)\nCollecting python-dateutil>=2.8.2 (from pandas->skfeature-chappers)\n  Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)\nCollecting pytz>=2020.1 (from pandas->skfeature-chappers)\n  Downloading pytz-2025.1-py2.py3-none-any.whl.metadata (22 kB)\nCollecting tzdata>=2022.7 (from pandas->skfeature-chappers)\n  Downloading tzdata-2025.1-py2.py3-none-any.whl.metadata (1.4 kB)\nCollecting MarkupSafe>=2.1.1 (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow)\n  Downloading MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.12/site-packages (from rich->keras>=3.5.0->tensorflow) (2.2.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.12/site-packages (from rich->keras>=3.5.0->tensorflow) (2.15.1)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.12/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.0)\nDownloading munkres-1.1.4-py2.py3-none-any.whl (7.0 kB)\nDownloading tensorflow-2.18.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (615.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m615.5/615.5 MB\u001b[0m \u001b[31m46.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading numpy-2.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.2/19.2 MB\u001b[0m \u001b[31m32.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading argparse-1.4.0-py2.py3-none-any.whl (23 kB)\nDownloading scipy-1.15.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (37.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m37.3/37.3 MB\u001b[0m \u001b[31m19.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.1/13.1 MB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading skfeature_chappers-1.1.0-py3-none-any.whl (66 kB)\nDownloading absl_py-2.1.0-py3-none-any.whl (133 kB)\nDownloading astunparse-1.6.3-py2.py3-none-any.whl (12 kB)\nDownloading flatbuffers-25.2.10-py2.py3-none-any.whl (30 kB)\nDownloading gast-0.6.0-py3-none-any.whl (21 kB)\nDownloading google_pasta-0.2.0-py3-none-any.whl (57 kB)\nDownloading grpcio-1.70.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.9/5.9 MB\u001b[0m \u001b[31m82.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading h5py-3.13.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m82.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading joblib-1.4.2-py3-none-any.whl (301 kB)\nDownloading keras-3.8.0-py3-none-any.whl (1.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m36.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading libclang-18.1.1-py2.py3-none-manylinux2010_x86_64.whl (24.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.5/24.5 MB\u001b[0m \u001b[31m116.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading ml_dtypes-0.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m59.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading opt_einsum-3.4.0-py3-none-any.whl (71 kB)\nDownloading protobuf-5.29.3-cp38-abi3-manylinux2014_x86_64.whl (319 kB)\nDownloading six-1.17.0-py2.py3-none-any.whl (11 kB)\nDownloading tensorboard-2.18.0-py3-none-any.whl (5.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.5/5.5 MB\u001b[0m \u001b[31m94.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading termcolor-2.5.0-py3-none-any.whl (7.8 kB)\nDownloading threadpoolctl-3.5.0-py3-none-any.whl (18 kB)\nDownloading wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (89 kB)\nDownloading pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.7/12.7 MB\u001b[0m \u001b[31m112.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading Markdown-3.7-py3-none-any.whl (106 kB)\nDownloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)\nDownloading pytz-2025.1-py2.py3-none-any.whl (507 kB)\nDownloading tensorboard_data_server-0.7.2-py3-none-manylinux_2_31_x86_64.whl (6.6 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.6/6.6 MB\u001b[0m \u001b[31m100.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tzdata-2025.1-py2.py3-none-any.whl (346 kB)\nDownloading werkzeug-3.1.3-py3-none-any.whl (224 kB)\nDownloading namex-0.0.8-py3-none-any.whl (5.8 kB)\nDownloading optree-0.14.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (400 kB)\nDownloading MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (23 kB)\nInstalling collected packages: pytz, namex, munkres, libclang, flatbuffers, argparse, wrapt, tzdata, threadpoolctl, termcolor, tensorboard-data-server, six, protobuf, optree, opt-einsum, numpy, MarkupSafe, markdown, joblib, grpcio, gast, absl-py, werkzeug, scipy, python-dateutil, ml-dtypes, h5py, google-pasta, astunparse, tensorboard, scikit-learn, pandas, keras, tensorflow, skfeature-chappers\nSuccessfully installed MarkupSafe-3.0.2 absl-py-2.1.0 argparse-1.4.0 astunparse-1.6.3 flatbuffers-25.2.10 gast-0.6.0 google-pasta-0.2.0 grpcio-1.70.0 h5py-3.13.0 joblib-1.4.2 keras-3.8.0 libclang-18.1.1 markdown-3.7 ml-dtypes-0.4.1 munkres-1.1.4 namex-0.0.8 numpy-2.0.2 opt-einsum-3.4.0 optree-0.14.0 pandas-2.2.3 protobuf-5.29.3 python-dateutil-2.9.0.post0 pytz-2025.1 scikit-learn-1.6.1 scipy-1.15.2 six-1.17.0 skfeature-chappers-1.1.0 tensorboard-2.18.0 tensorboard-data-server-0.7.2 tensorflow-2.18.0 termcolor-2.5.0 threadpoolctl-3.5.0 tzdata-2025.1 werkzeug-3.1.3 wrapt-1.17.2\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"!pip install -q tabulate seaborn ipykernel pandas matplotlib mlflow dagshub ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T11:45:02.742691Z","iopub.execute_input":"2025-02-20T11:45:02.743341Z","iopub.status.idle":"2025-02-20T11:45:52.918333Z","shell.execute_reply.started":"2025-02-20T11:45:02.743283Z","shell.execute_reply":"2025-02-20T11:45:52.916642Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.6/8.6 MB\u001b[0m \u001b[31m25.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m28.4/28.4 MB\u001b[0m \u001b[31m69.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.0/6.0 MB\u001b[0m \u001b[31m96.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.2/4.2 MB\u001b[0m \u001b[31m64.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m63.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m825.5/825.5 kB\u001b[0m \u001b[31m20.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m36.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.5/4.5 MB\u001b[0m \u001b[31m63.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.1/40.1 MB\u001b[0m \u001b[31m79.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m767.5/767.5 kB\u001b[0m \u001b[31m22.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m865.9/865.9 kB\u001b[0m \u001b[31m26.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m80.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.4/13.4 MB\u001b[0m \u001b[31m91.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m648.7/648.7 kB\u001b[0m \u001b[31m16.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m613.1/613.1 kB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m39.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.0/5.0 MB\u001b[0m \u001b[31m65.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"!pwd ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T06:33:38.446692Z","iopub.execute_input":"2025-02-20T06:33:38.447898Z","iopub.status.idle":"2025-02-20T06:33:38.577917Z","shell.execute_reply.started":"2025-02-20T06:33:38.447840Z","shell.execute_reply":"2025-02-20T06:33:38.576719Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working/SRL-SOA\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"%cd ..\n!rm -r SRL-SOA\n!git clone https://github.com/vidhi-gajra-git/SRL-SOA.git\n%cd SRL-SOA\n!mkdir data \n!cp /kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/*.mat data/\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T11:45:52.920524Z","iopub.execute_input":"2025-02-20T11:45:52.921110Z","iopub.status.idle":"2025-02-20T11:45:54.263774Z","shell.execute_reply.started":"2025-02-20T11:45:52.921073Z","shell.execute_reply":"2025-02-20T11:45:54.262101Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working\nCloning into 'SRL-SOA'...\nremote: Enumerating objects: 839, done.\u001b[K\nremote: Counting objects: 100% (82/82), done.\u001b[K\nremote: Compressing objects: 100% (51/51), done.\u001b[K\nremote: Total 839 (delta 60), reused 31 (delta 31), pack-reused 757 (from 3)\u001b[K\nReceiving objects: 100% (839/839), 1.11 MiB | 8.90 MiB/s, done.\nResolving deltas: 100% (530/530), done.\n/kaggle/working/SRL-SOA\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-13T18:43:48.037209Z","iopub.execute_input":"2025-02-13T18:43:48.037536Z","iopub.status.idle":"2025-02-13T18:54:41.404226Z","shell.execute_reply.started":"2025-02-13T18:43:48.037508Z","shell.execute_reply":"2025-02-13T18:54:41.403095Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"2025-02-13 18:43:48.511748: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1739472228.535678     285 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1739472228.542683     285 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n\nScene:  (145, 145, 200)\n\nClassification:\nTraining samples:  512\nTest samples:  9737\n\n\nNumber of bands:  200\n**********  METHOD : SVM **********\n\t\t\t\t\t *****  #RUNS : 6  *****\nW0000 00:00:1739472234.046325     285 gpu_device.cc:2344] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\nSkipping registering GPU devices...\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1DMultiScaleCombin…\u001b[0m │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │        \u001b[32m134,600\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot (\u001b[94mDot\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 85.5271\nEpoch 1: val_loss improved from inf to 13.70896, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - loss: 83.7494 - val_loss: 13.7090\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.8624\nEpoch 2: val_loss improved from 13.70896 to 13.70729, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 6.8624 - val_loss: 13.7073\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.2293\nEpoch 3: val_loss improved from 13.70729 to 13.70571, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 5.2268 - val_loss: 13.7057\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.1129\nEpoch 4: val_loss improved from 13.70571 to 13.70415, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 4.1177 - val_loss: 13.7041\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.9391\nEpoch 5: val_loss improved from 13.70415 to 13.70243, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.9355 - val_loss: 13.7024\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.2384\nEpoch 6: val_loss improved from 13.70243 to 13.70072, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.2406 - val_loss: 13.7007\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0915\nEpoch 7: val_loss improved from 13.70072 to 13.69891, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.0982 - val_loss: 13.6989\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.2701\nEpoch 8: val_loss improved from 13.69891 to 13.69689, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 3.2736 - val_loss: 13.6969\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9545\nEpoch 9: val_loss improved from 13.69689 to 13.69485, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.9555 - val_loss: 13.6949\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.7043\nEpoch 10: val_loss improved from 13.69485 to 13.69286, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.7057 - val_loss: 13.6929\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6009\nEpoch 11: val_loss improved from 13.69286 to 13.69099, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.5982 - val_loss: 13.6910\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6977\nEpoch 12: val_loss improved from 13.69099 to 13.68907, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.6937 - val_loss: 13.6891\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 2.5936\nEpoch 13: val_loss improved from 13.68907 to 13.68711, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - loss: 2.5903 - val_loss: 13.6871\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 2.2155\nEpoch 14: val_loss improved from 13.68711 to 13.68518, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 2.2107 - val_loss: 13.6852\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.3087\nEpoch 15: val_loss improved from 13.68518 to 13.68299, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.3116 - val_loss: 13.6830\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8093\nEpoch 16: val_loss improved from 13.68299 to 13.68103, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8114 - val_loss: 13.6810\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.4948\nEpoch 17: val_loss improved from 13.68103 to 13.67898, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.4958 - val_loss: 13.6790\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.5024\nEpoch 18: val_loss improved from 13.67898 to 13.67682, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.5033 - val_loss: 13.6768\nEpoch 19/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.6016\nEpoch 19: val_loss improved from 13.67682 to 13.67405, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 1.6021 - val_loss: 13.6740\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.4993\nEpoch 20: val_loss improved from 13.67405 to 13.67162, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.4964 - val_loss: 13.6716\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.4623\nEpoch 21: val_loss improved from 13.67162 to 13.66946, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.4611 - val_loss: 13.6695\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.6296\nEpoch 22: val_loss improved from 13.66946 to 13.66701, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.6256 - val_loss: 13.6670\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.6165\nEpoch 23: val_loss improved from 13.66701 to 13.66456, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.6234 - val_loss: 13.6646\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 2.3962\nEpoch 24: val_loss improved from 13.66456 to 13.66152, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 2.3995 - val_loss: 13.6615\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.7958\nEpoch 25: val_loss did not improve from 13.66152\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 5.9457 - val_loss: 13.6654\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.1114\nEpoch 26: val_loss did not improve from 13.66152\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 12.9740 - val_loss: 13.6654\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.3515\nEpoch 27: val_loss did not improve from 13.66152\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.3522 - val_loss: 13.6627\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6572\nEpoch 28: val_loss improved from 13.66152 to 13.66079, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.6588 - val_loss: 13.6608\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 2.4020\nEpoch 29: val_loss improved from 13.66079 to 13.65887, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - loss: 2.3995 - val_loss: 13.6589\nEpoch 30/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 2.3961\nEpoch 30: val_loss improved from 13.65887 to 13.65673, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 2.3876 - val_loss: 13.6567\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.8777\nEpoch 31: val_loss improved from 13.65673 to 13.65445, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 1.8736 - val_loss: 13.6545\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.3759\nEpoch 32: val_loss improved from 13.65445 to 13.65178, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.3731 - val_loss: 13.6518\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.1502\nEpoch 33: val_loss improved from 13.65178 to 13.64922, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.1507 - val_loss: 13.6492\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.1228\nEpoch 34: val_loss improved from 13.64922 to 13.64681, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.1225 - val_loss: 13.6468\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.0668\nEpoch 35: val_loss improved from 13.64681 to 13.64408, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.0670 - val_loss: 13.6441\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.1872\nEpoch 36: val_loss improved from 13.64408 to 13.64186, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.1867 - val_loss: 13.6419\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.9077\nEpoch 37: val_loss improved from 13.64186 to 13.64183, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.9400 - val_loss: 13.6418\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.5638\nEpoch 38: val_loss improved from 13.64183 to 13.64140, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 4.5379 - val_loss: 13.6414\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6681\nEpoch 39: val_loss improved from 13.64140 to 13.63906, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.6605 - val_loss: 13.6391\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1269\nEpoch 40: val_loss improved from 13.63906 to 13.63669, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1194 - val_loss: 13.6367\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1469\nEpoch 41: val_loss improved from 13.63669 to 13.63557, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1507 - val_loss: 13.6356\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.4342\nEpoch 42: val_loss improved from 13.63557 to 13.63449, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.4352 - val_loss: 13.6345\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.4416\nEpoch 43: val_loss improved from 13.63449 to 13.63264, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.4347 - val_loss: 13.6326\nEpoch 44/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.9244\nEpoch 44: val_loss improved from 13.63264 to 13.63079, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 1.9336 - val_loss: 13.6308\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6858\nEpoch 45: val_loss improved from 13.63079 to 13.62926, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 2.6781 - val_loss: 13.6293\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 1.6370\nEpoch 46: val_loss improved from 13.62926 to 13.62726, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 1.6399 - val_loss: 13.6273\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8961\nEpoch 47: val_loss improved from 13.62726 to 13.62616, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8983 - val_loss: 13.6262\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.0784\nEpoch 48: val_loss improved from 13.62616 to 13.62398, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 2.0717 - val_loss: 13.6240\nEpoch 49/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.3760\nEpoch 49: val_loss improved from 13.62398 to 13.62210, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 1.3936 - val_loss: 13.6221\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.0109\nEpoch 50: val_loss improved from 13.62210 to 13.62137, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.9939 - val_loss: 13.6214\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 25  62 198 190 118  14 164 121  70 105 117  93  55 126  36 140 188  89\n  16 197 179 100  12   6  71]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1DMultiScaleCombin…\u001b[0m │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │        \u001b[32m134,600\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_1 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 132.9436\nEpoch 1: val_loss improved from inf to 82.14404, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step - loss: 131.4734 - val_loss: 82.1440\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.6654\nEpoch 2: val_loss improved from 82.14404 to 82.14281, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 8.6338 - val_loss: 82.1428\nEpoch 3/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.0611\nEpoch 3: val_loss improved from 82.14281 to 82.14159, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 7.0551 - val_loss: 82.1416\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.3634\nEpoch 4: val_loss improved from 82.14159 to 82.14023, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 5.3557 - val_loss: 82.1402\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.0495\nEpoch 5: val_loss improved from 82.14023 to 82.13892, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 4.0475 - val_loss: 82.1389\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.5993\nEpoch 6: val_loss improved from 82.13892 to 82.13766, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.5981 - val_loss: 82.1377\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.9078\nEpoch 7: val_loss improved from 82.13766 to 82.13625, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.9052 - val_loss: 82.1363\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.2131\nEpoch 8: val_loss improved from 82.13625 to 82.13506, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.2206 - val_loss: 82.1351\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.8218\nEpoch 9: val_loss improved from 82.13506 to 82.13373, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 4.7944 - val_loss: 82.1337\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.1789\nEpoch 10: val_loss improved from 82.13373 to 82.13210, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.1710 - val_loss: 82.1321\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9141\nEpoch 11: val_loss improved from 82.13210 to 82.13068, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.9060 - val_loss: 82.1307\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8706\nEpoch 12: val_loss improved from 82.13068 to 82.12922, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.8655 - val_loss: 82.1292\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.7331\nEpoch 13: val_loss improved from 82.12922 to 82.12778, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.7278 - val_loss: 82.1278\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9764\nEpoch 14: val_loss improved from 82.12778 to 82.12614, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.9770 - val_loss: 82.1261\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.4255\nEpoch 15: val_loss improved from 82.12614 to 82.12447, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.4270 - val_loss: 82.1245\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0387\nEpoch 16: val_loss improved from 82.12447 to 82.12307, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.0280 - val_loss: 82.1231\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 2.3258\nEpoch 17: val_loss improved from 82.12307 to 82.12151, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 2.3212 - val_loss: 82.1215\nEpoch 18/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.9806\nEpoch 18: val_loss improved from 82.12151 to 82.12001, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 1.9814 - val_loss: 82.1200\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.9807\nEpoch 19: val_loss improved from 82.12001 to 82.11842, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.9789 - val_loss: 82.1184\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1008\nEpoch 20: val_loss improved from 82.11842 to 82.11693, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1145 - val_loss: 82.1169\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.8902\nEpoch 21: val_loss improved from 82.11693 to 82.11637, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.8917 - val_loss: 82.1164\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9630\nEpoch 22: val_loss improved from 82.11637 to 82.11471, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.9539 - val_loss: 82.1147\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1146\nEpoch 23: val_loss improved from 82.11471 to 82.11320, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1101 - val_loss: 82.1132\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8837\nEpoch 24: val_loss improved from 82.11320 to 82.11109, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8803 - val_loss: 82.1111\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.5558\nEpoch 25: val_loss improved from 82.11109 to 82.10931, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.5568 - val_loss: 82.1093\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.7744\nEpoch 26: val_loss improved from 82.10931 to 82.10757, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.7742 - val_loss: 82.1076\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.6999\nEpoch 27: val_loss improved from 82.10757 to 82.10577, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.7066 - val_loss: 82.1058\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.7138\nEpoch 28: val_loss improved from 82.10577 to 82.10480, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 2.7249 - val_loss: 82.1048\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9512\nEpoch 29: val_loss improved from 82.10480 to 82.10326, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.9432 - val_loss: 82.1033\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1215\nEpoch 30: val_loss improved from 82.10326 to 82.10171, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1139 - val_loss: 82.1017\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.9300\nEpoch 31: val_loss did not improve from 82.10171\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 6.9583 - val_loss: 82.1078\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.7682\nEpoch 32: val_loss did not improve from 82.10171\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 5.7646 - val_loss: 82.1067\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.9607\nEpoch 33: val_loss did not improve from 82.10171\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 4.9427 - val_loss: 82.1051\nEpoch 34/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 3.9850\nEpoch 34: val_loss improved from 82.10171 to 82.10143, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - loss: 3.9522 - val_loss: 82.1014\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8942\nEpoch 35: val_loss improved from 82.10143 to 82.09886, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.8910 - val_loss: 82.0989\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.8643\nEpoch 36: val_loss improved from 82.09886 to 82.09737, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.8613 - val_loss: 82.0974\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.5130\nEpoch 37: val_loss improved from 82.09737 to 82.09494, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.5100 - val_loss: 82.0949\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.3609\nEpoch 38: val_loss improved from 82.09494 to 82.09254, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.3571 - val_loss: 82.0925\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.3567\nEpoch 39: val_loss improved from 82.09254 to 82.09129, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.3447 - val_loss: 82.0913\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.2263\nEpoch 40: val_loss improved from 82.09129 to 82.08923, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.2244 - val_loss: 82.0892\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1918\nEpoch 41: val_loss improved from 82.08923 to 82.08672, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1908 - val_loss: 82.0867\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.1358\nEpoch 42: val_loss improved from 82.08672 to 82.08503, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.1331 - val_loss: 82.0850\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.4277\nEpoch 43: val_loss improved from 82.08503 to 82.08333, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.4221 - val_loss: 82.0833\nEpoch 44/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.5103\nEpoch 44: val_loss improved from 82.08333 to 82.08109, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.5076 - val_loss: 82.0811\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.9718\nEpoch 45: val_loss improved from 82.08109 to 82.07847, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9658 - val_loss: 82.0785\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.6739\nEpoch 46: val_loss improved from 82.07847 to 82.07643, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.6718 - val_loss: 82.0764\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8205\nEpoch 47: val_loss improved from 82.07643 to 82.07581, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.8239 - val_loss: 82.0758\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.2884\nEpoch 48: val_loss improved from 82.07581 to 82.07464, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.2835 - val_loss: 82.0746\nEpoch 49/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.4485\nEpoch 49: val_loss improved from 82.07464 to 82.07441, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.4474 - val_loss: 82.0744\nEpoch 50/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 4.7873\nEpoch 50: val_loss did not improve from 82.07441\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 4.7734 - val_loss: 82.0775\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 10 189  62 126  87 119  80 174 147  39  23  55  21 166 132 129 192  45\n 159  16  53 186 185 175 102]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1DMultiScaleCombin…\u001b[0m │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │        \u001b[32m134,600\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_2 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 144.3615\nEpoch 1: val_loss improved from inf to 10.16136, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - loss: 142.8054 - val_loss: 10.1614\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.5380\nEpoch 2: val_loss improved from 10.16136 to 10.16024, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 6.5033 - val_loss: 10.1602\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.4139\nEpoch 3: val_loss improved from 10.16024 to 10.15907, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 5.3831 - val_loss: 10.1591\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.9053\nEpoch 4: val_loss improved from 10.15907 to 10.15787, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.8970 - val_loss: 10.1579\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.6507\nEpoch 5: val_loss improved from 10.15787 to 10.15654, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.6420 - val_loss: 10.1565\nEpoch 6/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.3162\nEpoch 6: val_loss improved from 10.15654 to 10.15512, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.3105 - val_loss: 10.1551\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.3831\nEpoch 7: val_loss improved from 10.15512 to 10.15359, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.3742 - val_loss: 10.1536\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0242\nEpoch 8: val_loss improved from 10.15359 to 10.15197, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.0206 - val_loss: 10.1520\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9862\nEpoch 9: val_loss improved from 10.15197 to 10.15030, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.9821 - val_loss: 10.1503\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8634\nEpoch 10: val_loss improved from 10.15030 to 10.14859, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.8616 - val_loss: 10.1486\nEpoch 11/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8197\nEpoch 11: val_loss improved from 10.14859 to 10.14676, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.8191 - val_loss: 10.1468\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8724\nEpoch 12: val_loss improved from 10.14676 to 10.14490, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.8698 - val_loss: 10.1449\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 2.4221\nEpoch 13: val_loss improved from 10.14490 to 10.14299, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 2.4236 - val_loss: 10.1430\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6198\nEpoch 14: val_loss improved from 10.14299 to 10.14111, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.6182 - val_loss: 10.1411\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.2913\nEpoch 15: val_loss improved from 10.14111 to 10.13928, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.2927 - val_loss: 10.1393\nEpoch 16/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.3470\nEpoch 16: val_loss improved from 10.13928 to 10.13738, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.3484 - val_loss: 10.1374\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.2388\nEpoch 17: val_loss improved from 10.13738 to 10.13561, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.2408 - val_loss: 10.1356\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1089\nEpoch 18: val_loss improved from 10.13561 to 10.13387, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1096 - val_loss: 10.1339\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.2162\nEpoch 19: val_loss improved from 10.13387 to 10.13192, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.2152 - val_loss: 10.1319\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.0881\nEpoch 20: val_loss improved from 10.13192 to 10.12991, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.0834 - val_loss: 10.1299\nEpoch 21/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8809\nEpoch 21: val_loss improved from 10.12991 to 10.12773, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8811 - val_loss: 10.1277\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.2441\nEpoch 22: val_loss improved from 10.12773 to 10.12557, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.2369 - val_loss: 10.1256\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8569\nEpoch 23: val_loss improved from 10.12557 to 10.12323, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8543 - val_loss: 10.1232\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1411\nEpoch 24: val_loss improved from 10.12323 to 10.12119, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1441 - val_loss: 10.1212\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.2116\nEpoch 25: val_loss improved from 10.12119 to 10.11888, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.2062 - val_loss: 10.1189\nEpoch 26/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8490\nEpoch 26: val_loss improved from 10.11888 to 10.11678, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8388 - val_loss: 10.1168\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0500\nEpoch 27: val_loss improved from 10.11678 to 10.11566, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.1527 - val_loss: 10.1157\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 17.6170\nEpoch 28: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 17.4041 - val_loss: 10.1333\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.3185\nEpoch 29: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.3250 - val_loss: 10.1305\nEpoch 30/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 3.5202\nEpoch 30: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 3.5239 - val_loss: 10.1277\nEpoch 31/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.2105\nEpoch 31: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.2100 - val_loss: 10.1248\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9334\nEpoch 32: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9343 - val_loss: 10.1222\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9314\nEpoch 33: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9321 - val_loss: 10.1195\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8825\nEpoch 34: val_loss did not improve from 10.11566\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.8837 - val_loss: 10.1165\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.5384\nEpoch 35: val_loss improved from 10.11566 to 10.11383, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.5287 - val_loss: 10.1138\nEpoch 36/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.7542\nEpoch 36: val_loss improved from 10.11383 to 10.11098, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.7584 - val_loss: 10.1110\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.4828\nEpoch 37: val_loss improved from 10.11098 to 10.10915, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.4689 - val_loss: 10.1091\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.4575\nEpoch 38: val_loss improved from 10.10915 to 10.10694, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.4598 - val_loss: 10.1069\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.1881\nEpoch 39: val_loss improved from 10.10694 to 10.10487, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.1741 - val_loss: 10.1049\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9415\nEpoch 40: val_loss improved from 10.10487 to 10.10272, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9406 - val_loss: 10.1027\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.1276\nEpoch 41: val_loss improved from 10.10272 to 10.10263, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.1256 - val_loss: 10.1026\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.9302\nEpoch 42: val_loss improved from 10.10263 to 10.10039, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9313 - val_loss: 10.1004\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6244\nEpoch 43: val_loss improved from 10.10039 to 10.09817, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.6237 - val_loss: 10.0982\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.2593\nEpoch 44: val_loss improved from 10.09817 to 10.09664, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.2537 - val_loss: 10.0966\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.8633\nEpoch 45: val_loss improved from 10.09664 to 10.09524, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.8582 - val_loss: 10.0952\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 2.0410\nEpoch 46: val_loss improved from 10.09524 to 10.09284, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 2.0466 - val_loss: 10.0928\nEpoch 47/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.2744\nEpoch 47: val_loss improved from 10.09284 to 10.09001, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.2758 - val_loss: 10.0900\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.1364\nEpoch 48: val_loss improved from 10.09001 to 10.08767, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1389 - val_loss: 10.0877\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.9918\nEpoch 49: val_loss improved from 10.08767 to 10.08516, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9974 - val_loss: 10.0852\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1101\nEpoch 50: val_loss improved from 10.08516 to 10.08281, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1158 - val_loss: 10.0828\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [149 197 173  11 144 185  17 119  53 140  87 152 145  34 170  16 100  54\n  29 151 128 191  51 117 154]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1DMultiScaleCombin…\u001b[0m │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │        \u001b[32m134,600\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_3 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 256.5965\nEpoch 1: val_loss improved from inf to 17.72358, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - loss: 252.3562 - val_loss: 17.7236\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.7828\nEpoch 2: val_loss improved from 17.72358 to 17.72285, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 4.7857 - val_loss: 17.7229\nEpoch 3/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.1101\nEpoch 3: val_loss improved from 17.72285 to 17.72195, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 4.1086 - val_loss: 17.7220\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.6262\nEpoch 4: val_loss improved from 17.72195 to 17.72099, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.6258 - val_loss: 17.7210\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.3958\nEpoch 5: val_loss improved from 17.72099 to 17.71989, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.3942 - val_loss: 17.7199\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0940\nEpoch 6: val_loss improved from 17.71989 to 17.71873, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.0962 - val_loss: 17.7187\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.8720\nEpoch 7: val_loss improved from 17.71873 to 17.71754, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.8735 - val_loss: 17.7175\nEpoch 8/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.8315\nEpoch 8: val_loss improved from 17.71754 to 17.71621, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.8470\nEpoch 42: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 5.8376 - val_loss: 17.6915\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 4.5122\nEpoch 43: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 4.5044 - val_loss: 17.6892\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.0074\nEpoch 44: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 4.0039 - val_loss: 17.6872\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.8348\nEpoch 45: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.8270 - val_loss: 17.6849\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.4893\nEpoch 46: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.4861 - val_loss: 17.6824\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.4482\nEpoch 47: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.4461 - val_loss: 17.6800\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.7575\nEpoch 48: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.7464 - val_loss: 17.6773\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.0481\nEpoch 49: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.0482 - val_loss: 17.6749\nEpoch 50/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0486\nEpoch 50: val_loss did not improve from 17.66155\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.0440 - val_loss: 17.6725\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [167   3 159 124  59  85  55  43 156 120  92 157  45 185 194  34   2 173\n 139  56 106  41  52  12  24]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1DMultiScaleCombin…\u001b[0m │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │        \u001b[32m134,600\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_4 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 60.2486\nEpoch 1: val_loss improved from inf to 17.09979, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - loss: 59.6949 - val_loss: 17.0998\nEpoch 2/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.3989\nEpoch 2: val_loss improved from 17.09979 to 17.09829, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 7.4040 - val_loss: 17.0983\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.2010\nEpoch 3: val_loss improved from 17.09829 to 17.09752, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 6.1964 - val_loss: 17.0975\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.4498\nEpoch 4: val_loss improved from 17.09752 to 17.09619, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 4.4430 - val_loss: 17.0962\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.6974\nEpoch 5: val_loss improved from 17.09619 to 17.09450, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.6944 - val_loss: 17.0945\nEpoch 6/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 3.3816\nEpoch 6: val_loss improved from 17.09450 to 17.09286, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 3.3844 - val_loss: 17.0929\nEpoch 7/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.4978\nEpoch 7: val_loss improved from 17.09286 to 17.09117, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.5001 - val_loss: 17.0912\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.1913\nEpoch 8: val_loss improved from 17.09117 to 17.08936, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.1919 - val_loss: 17.0894\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.9584\nEpoch 9: val_loss improved from 17.08936 to 17.08745, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9609 - val_loss: 17.0874\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.0493\nEpoch 10: val_loss improved from 17.08745 to 17.08521, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.0532 - val_loss: 17.0852\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.1650\nEpoch 11: val_loss improved from 17.08521 to 17.08332, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.1662 - val_loss: 17.0833\nEpoch 12/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.0248\nEpoch 12: val_loss improved from 17.08332 to 17.08148, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 3.0232 - val_loss: 17.0815\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.5809\nEpoch 13: val_loss improved from 17.08148 to 17.07941, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.5842 - val_loss: 17.0794\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.5832\nEpoch 14: val_loss improved from 17.07941 to 17.07738, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.5843 - val_loss: 17.0774\nEpoch 15/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.7569\nEpoch 15: val_loss improved from 17.07738 to 17.07558, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.7590 - val_loss: 17.0756\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.6641\nEpoch 16: val_loss improved from 17.07558 to 17.07294, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.6647 - val_loss: 17.0729\nEpoch 17/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.6806\nEpoch 17: val_loss improved from 17.07294 to 17.07125, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.6829 - val_loss: 17.0713\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.7660\nEpoch 18: val_loss improved from 17.07125 to 17.06940, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.7687 - val_loss: 17.0694\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.6649\nEpoch 19: val_loss improved from 17.06940 to 17.06741, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.6682 - val_loss: 17.0674\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.6787\nEpoch 20: val_loss improved from 17.06741 to 17.06518, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.6785 - val_loss: 17.0652\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.7140\nEpoch 21: val_loss improved from 17.06518 to 17.06379, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.7224 - val_loss: 17.0638\nEpoch 22/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.8965\nEpoch 22: val_loss improved from 17.06379 to 17.06133, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9067 - val_loss: 17.0613\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 6.8913\nEpoch 23: val_loss improved from 17.06133 to 17.05937, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - loss: 6.8335 - val_loss: 17.0594\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.7050\nEpoch 24: val_loss improved from 17.05937 to 17.05754, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.7038 - val_loss: 17.0575\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1177\nEpoch 25: val_loss improved from 17.05754 to 17.05521, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1195 - val_loss: 17.0552\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.9901\nEpoch 26: val_loss improved from 17.05521 to 17.05271, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9904 - val_loss: 17.0527\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.8977\nEpoch 27: val_loss improved from 17.05271 to 17.05031, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9018 - val_loss: 17.0503\nEpoch 28/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.2624\nEpoch 28: val_loss improved from 17.05031 to 17.04799, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.2617 - val_loss: 17.0480\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.9570\nEpoch 29: val_loss improved from 17.04799 to 17.04535, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9600 - val_loss: 17.0453\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.9835\nEpoch 30: val_loss improved from 17.04535 to 17.04297, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9877 - val_loss: 17.0430\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.0159\nEpoch 31: val_loss improved from 17.04297 to 17.04096, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.0203 - val_loss: 17.0410\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.0529\nEpoch 32: val_loss improved from 17.04096 to 17.03938, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.0589 - val_loss: 17.0394\nEpoch 33/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.7001\nEpoch 33: val_loss improved from 17.03938 to 17.03931, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.7297 - val_loss: 17.0393\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.1845\nEpoch 34: val_loss improved from 17.03931 to 17.03679, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 4.1627 - val_loss: 17.0368\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.1703\nEpoch 35: val_loss improved from 17.03679 to 17.03388, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1707 - val_loss: 17.0339\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8703\nEpoch 36: val_loss improved from 17.03388 to 17.03099, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.8730 - val_loss: 17.0310\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.7225\nEpoch 37: val_loss improved from 17.03099 to 17.02850, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.7249 - val_loss: 17.0285\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.7498\nEpoch 38: val_loss improved from 17.02850 to 17.02596, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.7558 - val_loss: 17.0260\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.0805\nEpoch 39: val_loss improved from 17.02596 to 17.02466, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - loss: 2.0798 - val_loss: 17.0247\nEpoch 40/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 2.2707\nEpoch 40: val_loss improved from 17.02466 to 17.02155, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - loss: 2.2634 - val_loss: 17.0215\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.6142\nEpoch 41: val_loss improved from 17.02155 to 17.01873, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6139 - val_loss: 17.0187\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.6536\nEpoch 42: val_loss improved from 17.01873 to 17.01709, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6626 - val_loss: 17.0171\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.8167\nEpoch 43: val_loss improved from 17.01709 to 17.01505, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.8132 - val_loss: 17.0150\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.6643\nEpoch 44: val_loss improved from 17.01505 to 17.01435, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6780 - val_loss: 17.0143\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.9498\nEpoch 45: val_loss improved from 17.01435 to 17.01173, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9353 - val_loss: 17.0117\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1623\nEpoch 46: val_loss improved from 17.01173 to 17.00946, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.1643 - val_loss: 17.0095\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1160\nEpoch 47: val_loss improved from 17.00946 to 17.00710, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1101 - val_loss: 17.0071\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.5591\nEpoch 48: val_loss improved from 17.00710 to 17.00447, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.5598 - val_loss: 17.0045\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.7299\nEpoch 49: val_loss improved from 17.00447 to 17.00294, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.7311 - val_loss: 17.0029\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.5542\nEpoch 50: val_loss improved from 17.00294 to 17.00261, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.5639 - val_loss: 17.0026\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [123 179 143  65   0  87 167 155 116  69 163 120  14  33  70  19 129  98\n 150  29  62  45 140  27 199]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1DMultiScaleCombin…\u001b[0m │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │        \u001b[32m134,600\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_5 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m134,600\u001b[0m (525.78 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 100.2888\nEpoch 1: val_loss improved from inf to 23.59776, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - loss: 98.8089 - val_loss: 23.5978\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.6889\nEpoch 2: val_loss improved from 23.59776 to 23.59674, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 5.6874 - val_loss: 23.5967\nEpoch 3/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 4.7756\nEpoch 3: val_loss improved from 23.59674 to 23.59542, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 4.7834 - val_loss: 23.5954\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.3691\nEpoch 4: val_loss improved from 23.59542 to 23.59388, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 4.3668 - val_loss: 23.5939\nEpoch 5/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.6393\nEpoch 5: val_loss improved from 23.59388 to 23.59231, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - loss: 3.6403 - val_loss: 23.5923\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.5015\nEpoch 6: val_loss improved from 23.59231 to 23.59064, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.5037 - val_loss: 23.5906\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.3080\nEpoch 7: val_loss improved from 23.59064 to 23.58888, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.3093 - val_loss: 23.5889\nEpoch 8/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.9574\nEpoch 8: val_loss improved from 23.58888 to 23.58715, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.9589 - val_loss: 23.5872\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.8892\nEpoch 9: val_loss improved from 23.58715 to 23.58544, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.8906 - val_loss: 23.5854\nEpoch 10/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.6908\nEpoch 10: val_loss improved from 23.58544 to 23.58362, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 2.6953 - val_loss: 23.5836\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.3546\nEpoch 11: val_loss improved from 23.58362 to 23.58165, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.3571 - val_loss: 23.5816\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 2.1639\nEpoch 12: val_loss improved from 23.58165 to 23.57972, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1692 - val_loss: 23.5797\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.0473\nEpoch 13: val_loss improved from 23.57972 to 23.57770, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.0494 - val_loss: 23.5777\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.8427\nEpoch 14: val_loss improved from 23.57770 to 23.57566, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.8474 - val_loss: 23.5757\nEpoch 15/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.7408\nEpoch 15: val_loss improved from 23.57566 to 23.57356, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.7470 - val_loss: 23.5736\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.6717\nEpoch 16: val_loss improved from 23.57356 to 23.57148, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6830 - val_loss: 23.5715\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.8446\nEpoch 17: val_loss improved from 23.57148 to 23.56943, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.8446 - val_loss: 23.5694\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.6131\nEpoch 18: val_loss improved from 23.56943 to 23.56742, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6165 - val_loss: 23.5674\nEpoch 19/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.4808\nEpoch 19: val_loss improved from 23.56742 to 23.56530, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 1.4807 - val_loss: 23.5653\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.4909\nEpoch 20: val_loss improved from 23.56530 to 23.56309, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.4949 - val_loss: 23.5631\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.6326\nEpoch 21: val_loss improved from 23.56309 to 23.56086, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6332 - val_loss: 23.5609\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.5815\nEpoch 22: val_loss improved from 23.56086 to 23.55896, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.5913 - val_loss: 23.5590\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.9518\nEpoch 23: val_loss improved from 23.55896 to 23.55653, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9557 - val_loss: 23.5565\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.6697\nEpoch 24: val_loss improved from 23.55653 to 23.55394, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.6715 - val_loss: 23.5539\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.5153\nEpoch 25: val_loss improved from 23.55394 to 23.55178, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.5120 - val_loss: 23.5518\nEpoch 26/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.1868\nEpoch 26: val_loss improved from 23.55178 to 23.54935, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.2003 - val_loss: 23.5494\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.9593\nEpoch 27: val_loss improved from 23.54935 to 23.54822, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.9779 - val_loss: 23.5482\nEpoch 28/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.6362\nEpoch 28: val_loss did not improve from 23.54822\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 8.6028 - val_loss: 23.5485\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.7368\nEpoch 29: val_loss improved from 23.54822 to 23.54692, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.7416 - val_loss: 23.5469\nEpoch 30/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.3418\nEpoch 30: val_loss improved from 23.54692 to 23.54464, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.3333 - val_loss: 23.5446\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 1.5372\nEpoch 31: val_loss improved from 23.54464 to 23.54268, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.5396 - val_loss: 23.5427\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.2269\nEpoch 32: val_loss improved from 23.54268 to 23.54028, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.2290 - val_loss: 23.5403\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 0.9961\nEpoch 33: val_loss improved from 23.54028 to 23.53801, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 0.9972 - val_loss: 23.5380\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.0625\nEpoch 34: val_loss improved from 23.53801 to 23.53565, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.0641 - val_loss: 23.5357\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 0.9946\nEpoch 35: val_loss improved from 23.53565 to 23.53327, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 0.9951 - val_loss: 23.5333\nEpoch 36/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.1699\nEpoch 36: val_loss improved from 23.53327 to 23.53104, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - loss: 1.1694 - val_loss: 23.5310\nEpoch 37/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 1.1468\nEpoch 37: val_loss improved from 23.53104 to 23.52860, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 19ms/step - loss: 1.1475 - val_loss: 23.5286\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 1.1883\nEpoch 38: val_loss improved from 23.52860 to 23.52583, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 1.1897 - val_loss: 23.5258\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.0684\nEpoch 39: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 17ms/step - loss: 7.2245 - val_loss: 23.5657\nEpoch 40/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.5118\nEpoch 40: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 17ms/step - loss: 5.5025 - val_loss: 23.5609\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.7319\nEpoch 41: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 4.7322 - val_loss: 23.5564\nEpoch 42/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 3.8053\nEpoch 42: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.8064 - val_loss: 23.5524\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.2474\nEpoch 43: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.2524 - val_loss: 23.5479\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.0472\nEpoch 44: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 3.0494 - val_loss: 23.5429\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.3250\nEpoch 45: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 17ms/step - loss: 3.3252 - val_loss: 23.5394\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.6009\nEpoch 46: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 17ms/step - loss: 2.6042 - val_loss: 23.5347\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.4962\nEpoch 47: val_loss did not improve from 23.52583\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.4968 - val_loss: 23.5302\nEpoch 48/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.3782\nEpoch 48: val_loss improved from 23.52583 to 23.52508, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.3844 - val_loss: 23.5251\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.1586\nEpoch 49: val_loss improved from 23.52508 to 23.52132, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1603 - val_loss: 23.5213\nEpoch 50/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 2.1281\nEpoch 50: val_loss improved from 23.52132 to 23.51846, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 18ms/step - loss: 2.1273 - val_loss: 23.5185\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [156  49 117 107  59  38  91 179  69 116 112 185  23 199 100  82  87 166\n  62  58 144 129  14 104 155]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 6 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      9     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   926    38    44     1     1     0  ...    97   236    24     0     0     0     0\n2.0      0    52   436    26     1     0     0  ...    20   192    52     0     0     0     0\n3.0      0     5    37   132     1     4     0  ...     9     2    31     0     0     0     0\n4.0      1     3     1     4   388    10     0  ...     8     5     1     0     5     3     0\n5.0      0     1     0     4    13   627     0  ...     0     0     0     3     6    39     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      8     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n8.0      0     2     0     0     2    12     0  ...     0     0     0     2     0     2     0\n9.0      0    95    12     5     6     2     0  ...   588   193    22     0     0     0     0\n10.0     0   333    98    16    15     7     0  ...   125  1671    58     0     0     3     0\n11.0     0    77    69    15     1     2     0  ...    40    59   304     0     0     0     0\n12.0     0     0     0     0     1     1     0  ...     0     0     0   185     0     9     0\n13.0    21     0     0     0    18     1     0  ...     0     0     0     7  1059    96     0\n14.0     2     5     0     0    43    51     0  ...     8     0     3    46    77   126     0\n15.0     0     4     0     0     0     0     0  ...     6     3     0     0     0     0    74\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      7     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   736    24    23     2     3     0  ...    97   448    21     0     0     0     2\n2.0      0    40   432    17     0     1     0  ...     0   267    37     0     0     0     0\n3.0      0    16    56   124     0    17     0  ...     2     3     2     0     0     0     1\n4.0     12     1     1     6   350    27     7  ...     0     4     0     0    36     6     1\n5.0      0     0     0     0    30   616     0  ...     0     3     0     1     1    38     0\n6.0      0     0     0     0     1     0     7  ...     0     0     0     0     0     0     0\n7.0      0     2     0     0     1     0     6  ...     0     9     0     0     0     0     0\n8.0      0     0     0     0     0    20     0  ...     0     0     0     0     0     0     0\n9.0      0    98     9     8     4     1     0  ...   612   184    10     0     0     0     2\n10.0     0   179    68    14    10    12     2  ...    65  1917    50     0     0     2     1\n11.0     0    69    96    31     0     1     0  ...    13   136   218     0     0     0     4\n12.0     0     0     0     1     0     8     0  ...     0     0     0   183     0     0     0\n13.0     0     0     0     0    46     7     0  ...     0     0     0     2  1111    41     0\n14.0     3     0     0     0    37    99     3  ...     1     0     0    23    84   112     5\n15.0     0     3     0     0     0     0     0  ...     2     4     3     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      3     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   933    31     5     2     6     0  ...    97   202    60     1     0     1     3\n2.0      0   124   400     9     1     3     0  ...    25   179    53     0     0     0     0\n3.0      0    60    28    58     1    33     0  ...     4    12    29     0     0     1     0\n4.0      5     1     0     1   395    16     0  ...     2     1     3     0    16    12     0\n5.0      0     0     0     2     2   633     0  ...     1     7     0     9     5    35     0\n6.0      0     0     0     0     3     0     5  ...     0     0     0     0     0     0     0\n7.0     27     0     0     0     3     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     6     0     0     0\n9.0      0   150     8     1     8     2     2  ...   607   116    28     0     0     1     0\n10.0     0   320    68     4     8    14     1  ...   161  1690    48     0     0     6     5\n11.0     0    94    48    18     1    13     0  ...    47    63   269     0     0     3     0\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    31    11     0  ...     0     4     0     3  1091    64     0\n14.0     0     8     0     0    12    72     0  ...     0    12     0    37   103   122     0\n15.0     0     0     1     0     0     0     0  ...     0     5     4     0     0     2    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     35     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   938    35    28     2     2     0  ...    90   237    20     0     0     0     0\n2.0      0    79   465    10     0     1     0  ...     8   199    34     0     0     0     0\n3.0      1    21    50    81     0     4     0  ...     3    37    29     0     0     0     0\n4.0     15     3     0     3   360    38     0  ...     4     8     8     0     8    13     0\n5.0      0     1     0     3     5   603     0  ...     3    21     0     0     1    58     0\n6.0      2     0     0     0     0     0    12  ...     0     0     0     0     0     0     0\n7.0     36     1     0     2     0     0     7  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     2    11     0  ...     0     0     0     6     0     1     0\n9.0      0    59     7     4     0     1     0  ...   666   165    14     0     0     0     0\n10.0     0   158   100     6     1     6     0  ...   112  1900    42     0     0     4     0\n11.0     0    33    39     7     0     0     0  ...    34    88   358     0     0     1     0\n12.0     0     0     0     0     0     3     0  ...     0     1     0   181     0     7     0\n13.0     0     0     0     0    54     1     0  ...     0     0     0     4  1102    41     0\n14.0     0     0     0     0    20    38     0  ...     1     0    11    32    81   181     0\n15.0     0     0     0     0     0     0     0  ...     7     7     1     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   852    17    23     4     2     0  ...   115   313    24     0     0     0     0\n2.0      1    86   334    11     1     3     0  ...    29   262    63     0     0     0     0\n3.0      1    37    40    66     3    25     0  ...     3    17    35     0     0     0     0\n4.0      5     2     1     3   390    12     2  ...     8     4     2     0    14     7     0\n5.0      0     0     0     0    19   623     0  ...     1     0     0     1    17    31     0\n6.0      2     4     0     0     5     0     7  ...     0     0     0     0     0     0     0\n7.0     10     6     0     0    12     3     6  ...     0     7     0     0     0     0     0\n8.0      0     0     0     0     0    15     0  ...     0     0     0     0     0     0     0\n9.0      4    93     5     3     1     4     2  ...   573   248     0     0     0     0     0\n10.0     5   210    74     2     6    14     1  ...    70  1873    53     0     0     1     0\n11.0     0    40    51    10     0     5     0  ...    33   134   284     0     0     0     1\n12.0     0     0     0     0     0    12     0  ...     0     0     0   174     0     4     0\n13.0     0     0     0     0    32     4     0  ...     0     0     0     5  1134    28     0\n14.0     1     0     0     0    39   105     0  ...     2     4     1    30    99    70     0\n15.0     0     4     0     0     0     0     0  ...     5     1     6     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 6:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      8     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   893    45    37     2     4     1  ...    85   274    15     0     0     0     0\n2.0      0    91   384    48     0     0     0  ...    12   213    44     0     0     0     0\n3.0      1    37    20   137     1    15     0  ...     2     8     1     0     0     0     0\n4.0      5     3     0     4   386    18     5  ...     5     9     2     0    17     3     0\n5.0      0     4     0     8     7   645     0  ...     0    11     0     0     3    11     0\n6.0      1     0     0     0     3     0    17  ...     0     0     0     0     0     0     0\n7.0     31     0     0     0     3     0    11  ...     2     1     0     0     0     0     0\n8.0      0     0     0     0     0     5     0  ...     0     0     0     0     0     0     0\n9.0      0   151    16     4     2     3     2  ...   527   222     1     0     0     0     0\n10.0     0   375    88    19     2    15     3  ...   135  1643    42     0     0     1     1\n11.0     0   126    36    33     0     5     0  ...     8    81   280     0     0     0     0\n12.0     0     0     0     0     0     5     0  ...     0     0     0   167     0     0     0\n13.0     0     0     0     0    54     5     0  ...     0     2     0     2  1082    55     0\n14.0     0     2     1     2    16    92     0  ...     1    16     0    17   111    99     0\n15.0     0     5     2     0     0     0     0  ...     4     7     1     0     0     0    71\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results5.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.715621          0.604066           0.675315\n1    2          0.712642          0.600206           0.668609\n2    3          0.709561          0.608398           0.667989\n3    4          0.755880          0.675521           0.719871\n4    5          0.706275          0.576317           0.661448\n5    6          0.694259          0.663927           0.649530\n\nAverage Performance Over 6 Runs:\nOverall Accuracy: 0.7157\nAverage Accuracy: 0.6214\nKappa Coefficient: 0.6738\nFigure(800x500)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"## Version 2 with batch normalization layer ","metadata":{}},{"cell_type":"code","source":"%cd SRL-SOA","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T11:43:08.085357Z","iopub.execute_input":"2025-02-20T11:43:08.085765Z","iopub.status.idle":"2025-02-20T11:43:08.094809Z","shell.execute_reply.started":"2025-02-20T11:43:08.085737Z","shell.execute_reply":"2025-02-20T11:43:08.092819Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working/SRL-SOA\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"%cd ..\n!rm -r SRL-SOA\n!git clone https://github.com/vidhi-gajra-git/SRL-SOA.git\n%cd SRL-SOA\n!mkdir data \n!mkdir results \n!cp /kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/*.mat data/\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T11:42:21.596648Z","iopub.execute_input":"2025-02-20T11:42:21.597117Z","iopub.status.idle":"2025-02-20T11:42:22.886598Z","shell.execute_reply.started":"2025-02-20T11:42:21.597084Z","shell.execute_reply":"2025-02-20T11:42:22.885061Z"}},"outputs":[{"name":"stdout","text":"/kaggle\nCloning into 'SRL-SOA'...\nremote: Enumerating objects: 839, done.\u001b[K\nremote: Counting objects: 100% (82/82), done.\u001b[K\nremote: Compressing objects: 100% (51/51), done.\u001b[K\nremote: Total 839 (delta 60), reused 31 (delta 31), pack-reused 757 (from 3)\u001b[K\nReceiving objects: 100% (839/839), 1.11 MiB | 19.30 MiB/s, done.\nResolving deltas: 100% (530/530), done.\n/kaggle/SRL-SOA\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"\n## Original seed =42, q=0->q ","metadata":{}},{"cell_type":"code","source":"# %matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n\n\n#Original seed =42 \n","metadata":{"trusted":true,"scrolled":true,"execution":{"iopub.status.busy":"2025-02-20T07:35:51.806158Z","iopub.execute_input":"2025-02-20T07:35:51.806591Z","iopub.status.idle":"2025-02-20T07:51:58.125098Z","shell.execute_reply.started":"2025-02-20T07:35:51.806555Z","shell.execute_reply":"2025-02-20T07:51:58.119925Z"},"_kg_hide-input":true},"outputs":[{"name":"stdout","text":"2025-02-20 07:35:52.377844: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1740036952.417540    4707 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1740036952.429546    4707 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nAccessing as vidhi-gajra-git\nInitialized MLflow to track repo \u001b[32m\"vidhi-gajra-git/SRL_SOA\"\u001b[0m\nRepository vidhi-gajra-git/SRL_SOA initialized!\n\nScene:  (145, 145, 200)\n\nClassification:\nTraining samples:  512\nTest samples:  9737\n\n\nNumber of bands:  200\n**********  METHOD : SVM **********\n\t\t\t\t\t *****  #RUNS : 6  *****\n2025-02-20 07:36:01.185061: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot (\u001b[94mDot\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 8.9580\nEpoch 1: val_loss improved from inf to 65.72444, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n2025/02/20 07:36:06 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during autologging: Unable to synchronously create group (name parameter cannot be an empty string)\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step - loss: 8.8997 - val_loss: 65.7244\nEpoch 2/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.2611\nEpoch 2: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.2688 - val_loss: 65.7244\nEpoch 3/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5357\nEpoch 3: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5328 - val_loss: 65.7244\nEpoch 4/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4438\nEpoch 4: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4343 - val_loss: 65.7244\nEpoch 5/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3310\nEpoch 5: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3245 - val_loss: 65.7244\nEpoch 6/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2570\nEpoch 6: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2526 - val_loss: 65.7244\nEpoch 7/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2628\nEpoch 7: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2619 - val_loss: 65.7244\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3315\nEpoch 8: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3290 - val_loss: 65.7244\nEpoch 9/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2812\nEpoch 9: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2815 - val_loss: 65.7244\nEpoch 10/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0704\nEpoch 10: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0771 - val_loss: 65.7244\nEpoch 11/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2079\nEpoch 11: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2506 - val_loss: 65.7244\nEpoch 12/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.3185\nEpoch 12: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.4539 - val_loss: 65.7244\nEpoch 13/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.1610\nEpoch 13: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.1441 - val_loss: 65.7244\nEpoch 14/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3995\nEpoch 14: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4002 - val_loss: 65.7244\nEpoch 15/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0913\nEpoch 15: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0980 - val_loss: 65.7244\nEpoch 16/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0198\nEpoch 16: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0309 - val_loss: 65.7244\nEpoch 17/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0244\nEpoch 17: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0310 - val_loss: 65.7244\nEpoch 18/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0567\nEpoch 18: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0596 - val_loss: 65.7244\nEpoch 19/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0576\nEpoch 19: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0628 - val_loss: 65.7244\nEpoch 20/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0648\nEpoch 20: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0694 - val_loss: 65.7244\nEpoch 21/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0739\nEpoch 21: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0772 - val_loss: 65.7244\nEpoch 22/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0730\nEpoch 22: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0768 - val_loss: 65.7244\nEpoch 23/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0648\nEpoch 23: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0681 - val_loss: 65.7244\nEpoch 24/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0541\nEpoch 24: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0584 - val_loss: 65.7244\nEpoch 25/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0460\nEpoch 25: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0495 - val_loss: 65.7244\nEpoch 26/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0317\nEpoch 26: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0368 - val_loss: 65.7244\nEpoch 27/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0127\nEpoch 27: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0178 - val_loss: 65.7244\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9956\nEpoch 28: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9980 - val_loss: 65.7244\nEpoch 29/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9899\nEpoch 29: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9907 - val_loss: 65.7244\nEpoch 30/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9934\nEpoch 30: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0005 - val_loss: 65.7244\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0142\nEpoch 31: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0168 - val_loss: 65.7244\nEpoch 32/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0157\nEpoch 32: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0199 - val_loss: 65.7244\nEpoch 33/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0533\nEpoch 33: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0856 - val_loss: 65.7244\nEpoch 34/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4709\nEpoch 34: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5094 - val_loss: 65.7244\nEpoch 35/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4232\nEpoch 35: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4612 - val_loss: 65.7244\nEpoch 36/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.3729\nEpoch 36: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.3536 - val_loss: 65.7244\nEpoch 37/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1142\nEpoch 37: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1101 - val_loss: 65.7244\nEpoch 38/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0231\nEpoch 38: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0219 - val_loss: 65.7244\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0047\nEpoch 39: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0031 - val_loss: 65.7244\nEpoch 40/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9346\nEpoch 40: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9344 - val_loss: 65.7244\nEpoch 41/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8923\nEpoch 41: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8916 - val_loss: 65.7244\nEpoch 42/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8246\nEpoch 42: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8250 - val_loss: 65.7244\nEpoch 43/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7750\nEpoch 43: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7753 - val_loss: 65.7244\nEpoch 44/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7380\nEpoch 44: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7378 - val_loss: 65.7244\nEpoch 45/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6837\nEpoch 45: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6858 - val_loss: 65.7244\nEpoch 46/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7313\nEpoch 46: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7366 - val_loss: 65.7244\nEpoch 47/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0605\nEpoch 47: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1225 - val_loss: 65.7244\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5404\nEpoch 48: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5441 - val_loss: 65.7244\nEpoch 49/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1980\nEpoch 49: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1935 - val_loss: 65.7244\nEpoch 50/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9212\nEpoch 50: val_loss did not improve from 65.72444\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9226 - val_loss: 65.7244\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 94ms/step\n2025/02/20 07:37:02 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmps1rcsk4o/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 07:38:10 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 07:38:18 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpted691p8/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 07:38:18 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run stylish-elk-437 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/33f4e65aa14d4364b0b8963ce99906f7\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 87  18 149 182  83 110 113  63  22  27 164  36 150  55 106  99   0  54\n   1  48  88  91  49  21 195]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}\nThe model shall evaluate for 1 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      2     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   752    20    46     2     1     0  ...   118   401    27     0     0     0     0\n2.0      0    85   387    21     0     1     0  ...    28   213    44     0     0     0     0\n3.0      0    40    42   101     0     8     0  ...     5     9    17     0     0     0     0\n4.0      4     9     0     4   370     6     0  ...    15     5     3     0    23     3     0\n5.0      0     4     0     1    19   632     0  ...     0     1     0     0     8    28     0\n6.0      0     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n7.0      4     4     0     0     1     0     0  ...     0     1     0     0     0     0     0\n8.0      0     0     0     3     2    12     0  ...     0     0     0     2     0     1     0\n9.0      0    92     4     3     0     3     0  ...   474   335    12     0     0     0     0\n10.0     0   241    77     6     8     5     0  ...    89  1837    57     0     0     6     0\n11.0     0   106    61     9     0     1     0  ...    62   214   114     0     0     0     0\n12.0     0     2     0     0     0     4     0  ...     1     0     0   179     0    10     0\n13.0     1     0     0     0    53     1     0  ...     0     0     0     4  1067    76     0\n14.0     1     4     0     2    28    44     0  ...     8     0     5    26    70   173     0\n15.0     0     5     0     0     0     0     0  ...     8     0     0     0     0     0    74\n\n[16 rows x 16 columns]\n🏃 View run serious-mink-715 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/d8e3479bf61d49a8be142e8a8b03df73\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results0.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.678238          0.554131           0.628028\n\nAverage Performance Over 1 Runs:\nOverall Accuracy: 0.6782\nAverage Accuracy: 0.5541\nKappa Coefficient: 0.6280\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_1 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 4.9708\nEpoch 1: val_loss improved from inf to 6.07061, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n2025/02/20 07:39:00 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during autologging: Unable to synchronously create group (name parameter cannot be an empty string)\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - loss: 4.9474 - val_loss: 6.0706\nEpoch 2/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 5.0656\nEpoch 2: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 5.0112 - val_loss: 6.0706\nEpoch 3/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 4.0555\nEpoch 3: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 4.0500 - val_loss: 6.0706\nEpoch 4/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.3916\nEpoch 4: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 3.3608 - val_loss: 6.0706\nEpoch 5/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.4254\nEpoch 5: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.4177 - val_loss: 6.0706\nEpoch 6/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.3552\nEpoch 6: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.3226 - val_loss: 6.0706\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.8276\nEpoch 7: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.8222 - val_loss: 6.0706\nEpoch 8/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7987\nEpoch 8: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.7963 - val_loss: 6.0706\nEpoch 9/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6460\nEpoch 9: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.6229 - val_loss: 6.0706\nEpoch 10/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.6179\nEpoch 10: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.6056 - val_loss: 6.0706\nEpoch 11/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4992\nEpoch 11: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.4873 - val_loss: 6.0706\nEpoch 12/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4422\nEpoch 12: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4209 - val_loss: 6.0706\nEpoch 13/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6796\nEpoch 13: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6677 - val_loss: 6.0706\nEpoch 14/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4922\nEpoch 14: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4845 - val_loss: 6.0706\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.2307\nEpoch 15: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.2089 - val_loss: 6.0706\nEpoch 16/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1677\nEpoch 16: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1664 - val_loss: 6.0706\nEpoch 17/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4736\nEpoch 17: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4502 - val_loss: 6.0706\nEpoch 18/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1080\nEpoch 18: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0984 - val_loss: 6.0706\nEpoch 19/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2329\nEpoch 19: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2164 - val_loss: 6.0706\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1292\nEpoch 20: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1254 - val_loss: 6.0706\nEpoch 21/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1650\nEpoch 21: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1490 - val_loss: 6.0706\nEpoch 22/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2856\nEpoch 22: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2694 - val_loss: 6.0706\nEpoch 23/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3673\nEpoch 23: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3439 - val_loss: 6.0706\nEpoch 24/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2128\nEpoch 24: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2201 - val_loss: 6.0706\nEpoch 25/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 4.0672\nEpoch 25: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 3.9121 - val_loss: 6.0706\nEpoch 26/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.4490\nEpoch 26: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.4400 - val_loss: 6.0706\nEpoch 27/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 4.6975\nEpoch 27: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 4.5334 - val_loss: 6.0706\nEpoch 28/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3277\nEpoch 28: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3251 - val_loss: 6.0706\nEpoch 29/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4343\nEpoch 29: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4213 - val_loss: 6.0706\nEpoch 30/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1981\nEpoch 30: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1944 - val_loss: 6.0706\nEpoch 31/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2321\nEpoch 31: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2263 - val_loss: 6.0706\nEpoch 32/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1168\nEpoch 32: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1152 - val_loss: 6.0706\nEpoch 33/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1147\nEpoch 33: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1108 - val_loss: 6.0706\nEpoch 34/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0631\nEpoch 34: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0635 - val_loss: 6.0706\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0868\nEpoch 35: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0863 - val_loss: 6.0706\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0224\nEpoch 36: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0242 - val_loss: 6.0706\nEpoch 37/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1026\nEpoch 37: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0993 - val_loss: 6.0706\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2042\nEpoch 38: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2073 - val_loss: 6.0706\nEpoch 39/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5410\nEpoch 39: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5211 - val_loss: 6.0706\nEpoch 40/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0632\nEpoch 40: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0652 - val_loss: 6.0706\nEpoch 41/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0427\nEpoch 41: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0429 - val_loss: 6.0706\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8994\nEpoch 42: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9007 - val_loss: 6.0706\nEpoch 43/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9363\nEpoch 43: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9387 - val_loss: 6.0706\nEpoch 44/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8816\nEpoch 44: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8830 - val_loss: 6.0706\nEpoch 45/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0698\nEpoch 45: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0745 - val_loss: 6.0706\nEpoch 46/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1736\nEpoch 46: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1717 - val_loss: 6.0706\nEpoch 47/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3896\nEpoch 47: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3922 - val_loss: 6.0706\nEpoch 48/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9247\nEpoch 48: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9250 - val_loss: 6.0706\nEpoch 49/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9136\nEpoch 49: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9139 - val_loss: 6.0706\nEpoch 50/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8153\nEpoch 50: val_loss did not improve from 6.07061\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8189 - val_loss: 6.0706\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 95ms/step\n2025/02/20 07:39:57 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpdxzb_6an/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 07:40:49 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 07:40:57 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpydstmgjl/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 07:40:57 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run redolent-hog-316 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/5edb5aedf259447c91f7528bfc671281\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [156  58  93 161  90  86  65 186 121 157  77 159  46 150 145  17  48   9\n  50 147 133  89 143 134 107]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}\nThe model shall evaluate for 2 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      2     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   752    20    46     2     1     0  ...   118   401    27     0     0     0     0\n2.0      0    85   387    21     0     1     0  ...    28   213    44     0     0     0     0\n3.0      0    40    42   101     0     8     0  ...     5     9    17     0     0     0     0\n4.0      4     9     0     4   370     6     0  ...    15     5     3     0    23     3     0\n5.0      0     4     0     1    19   632     0  ...     0     1     0     0     8    28     0\n6.0      0     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n7.0      4     4     0     0     1     0     0  ...     0     1     0     0     0     0     0\n8.0      0     0     0     3     2    12     0  ...     0     0     0     2     0     1     0\n9.0      0    92     4     3     0     3     0  ...   474   335    12     0     0     0     0\n10.0     0   241    77     6     8     5     0  ...    89  1837    57     0     0     6     0\n11.0     0   106    61     9     0     1     0  ...    62   214   114     0     0     0     0\n12.0     0     2     0     0     0     4     0  ...     1     0     0   179     0    10     0\n13.0     1     0     0     0    53     1     0  ...     0     0     0     4  1067    76     0\n14.0     1     4     0     2    28    44     0  ...     8     0     5    26    70   173     0\n15.0     0     5     0     0     0     0     0  ...     8     0     0     0     0     0    74\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     11     0     0     1     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   633    13    38     2     2     0  ...   127   530     9     0     0     0     2\n2.0      0    24   442    15     0     1     0  ...     0   291    21     0     0     0     0\n3.0      0    41    48   100     2    11     0  ...     3    15     0     0     0     0     1\n4.0      1     2     0    11   261    32     3  ...     2     0     1     0   145     0     0\n5.0      0     0     0     3    43   587     0  ...     0     1     0     2     3    50     0\n6.0      0     0     0     4     1     0    12  ...     0     0     0     0     0     0     0\n7.0     11     4     0    29     6     0     7  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     1    18     0  ...     0     0     0     1     0     0     0\n9.0      0    32     2    17     6     1     1  ...   546   320     3     0     0     0     0\n10.0     0    79    41    29     4    18     0  ...    74  2040    31     0     0     2     1\n11.0     0    78    89    34     1     1     0  ...    27   215   121     0     0     0     2\n12.0     0     0     0     2     1     2     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     0   110     2     0  ...     0     0     0    10  1066    19     0\n14.0     2     0     0     7    44    72     0  ...     0     0     0    39    96   104     3\n15.0     0     1     0     0     0     0     0  ...     1     4     6     0     0     0    76\n\n[16 rows x 16 columns]\n🏃 View run popular-perch-326 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/a6e02f7b7ddd4c338a0c4c9632b988e3\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results1.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.678238          0.554131           0.628028\n1    2          0.676184          0.572931           0.623897\n\nAverage Performance Over 2 Runs:\nOverall Accuracy: 0.6772\nAverage Accuracy: 0.5635\nKappa Coefficient: 0.6260\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_2 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 10.8923\nEpoch 1: val_loss improved from inf to 22.29636, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n2025/02/20 07:41:24 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during autologging: Unable to synchronously create group (name parameter cannot be an empty string)\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - loss: 10.6899 - val_loss: 22.2964\nEpoch 2/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.0733\nEpoch 2: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.0683 - val_loss: 22.2964\nEpoch 3/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6829\nEpoch 3: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6818 - val_loss: 22.2964\nEpoch 4/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3444\nEpoch 4: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3394 - val_loss: 22.2964\nEpoch 5/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1673\nEpoch 5: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1589 - val_loss: 22.2964\nEpoch 6/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0737\nEpoch 6: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0725 - val_loss: 22.2964\nEpoch 7/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0254\nEpoch 7: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0293 - val_loss: 22.2964\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0862\nEpoch 8: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0923 - val_loss: 22.2964\nEpoch 9/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3356\nEpoch 9: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3743 - val_loss: 22.2964\nEpoch 10/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.8958\nEpoch 10: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.8545 - val_loss: 22.2964\nEpoch 11/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 6.1193\nEpoch 11: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 6.0237 - val_loss: 22.2964\nEpoch 12/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.0421\nEpoch 12: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 3.0350 - val_loss: 22.2964\nEpoch 13/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.8384\nEpoch 13: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.8181 - val_loss: 22.2964\nEpoch 14/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.3984\nEpoch 14: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.3792 - val_loss: 22.2964\nEpoch 15/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.9264\nEpoch 15: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.9096 - val_loss: 22.2964\nEpoch 16/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.6201\nEpoch 16: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6115 - val_loss: 22.2964\nEpoch 17/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4169\nEpoch 17: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4071 - val_loss: 22.2964\nEpoch 18/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3256\nEpoch 18: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3190 - val_loss: 22.2964\nEpoch 19/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2353\nEpoch 19: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2279 - val_loss: 22.2964\nEpoch 20/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1967\nEpoch 20: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1953 - val_loss: 22.2964\nEpoch 21/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1788\nEpoch 21: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1710 - val_loss: 22.2964\nEpoch 22/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1694\nEpoch 22: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1630 - val_loss: 22.2964\nEpoch 23/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1702\nEpoch 23: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1644 - val_loss: 22.2964\nEpoch 24/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1808\nEpoch 24: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1724 - val_loss: 22.2964\nEpoch 25/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1853\nEpoch 25: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1844 - val_loss: 22.2964\nEpoch 26/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.2004\nEpoch 26: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1943 - val_loss: 22.2964\nEpoch 27/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2094\nEpoch 27: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2074 - val_loss: 22.2964\nEpoch 28/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2208\nEpoch 28: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2153 - val_loss: 22.2964\nEpoch 29/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2348\nEpoch 29: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2305 - val_loss: 22.2964\nEpoch 30/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2510\nEpoch 30: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2379 - val_loss: 22.2964\nEpoch 31/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2611\nEpoch 31: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2588 - val_loss: 22.2964\nEpoch 32/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2553\nEpoch 32: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2530 - val_loss: 22.2964\nEpoch 33/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2789\nEpoch 33: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2743 - val_loss: 22.2964\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2822\nEpoch 34: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2775 - val_loss: 22.2964\nEpoch 35/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3031\nEpoch 35: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3009 - val_loss: 22.2964\nEpoch 36/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3146\nEpoch 36: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3135 - val_loss: 22.2964\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3435\nEpoch 37: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3402 - val_loss: 22.2964\nEpoch 38/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3599\nEpoch 38: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3588 - val_loss: 22.2964\nEpoch 39/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3941\nEpoch 39: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3920 - val_loss: 22.2964\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4103\nEpoch 40: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4081 - val_loss: 22.2964\nEpoch 41/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4425\nEpoch 41: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4335 - val_loss: 22.2964\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4271\nEpoch 42: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4250 - val_loss: 22.2964\nEpoch 43/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4219\nEpoch 43: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.4169 - val_loss: 22.2964\nEpoch 44/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3878\nEpoch 44: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3759 - val_loss: 22.2964\nEpoch 45/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3385\nEpoch 45: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3376 - val_loss: 22.2964\nEpoch 46/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2739\nEpoch 46: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2694 - val_loss: 22.2964\nEpoch 47/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2285\nEpoch 47: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2237 - val_loss: 22.2964\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1607\nEpoch 48: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1595 - val_loss: 22.2964\nEpoch 49/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1334\nEpoch 49: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1301 - val_loss: 22.2964\nEpoch 50/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0789\nEpoch 50: val_loss did not improve from 22.29636\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0784 - val_loss: 22.2964\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 91ms/step\n2025/02/20 07:42:21 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmphbeld62x/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 07:43:13 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 07:43:21 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpo2bbjr85/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 07:43:21 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run salty-ray-956 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/691f0dd6f82f476cb86b2b6ee296334c\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [139 134 177 167 155 136  97  51  49 169 194  62 164 138 109 141 103  96\n 117  26 129 135 105 107 197]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}\nThe model shall evaluate for 3 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      2     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   752    20    46     2     1     0  ...   118   401    27     0     0     0     0\n2.0      0    85   387    21     0     1     0  ...    28   213    44     0     0     0     0\n3.0      0    40    42   101     0     8     0  ...     5     9    17     0     0     0     0\n4.0      4     9     0     4   370     6     0  ...    15     5     3     0    23     3     0\n5.0      0     4     0     1    19   632     0  ...     0     1     0     0     8    28     0\n6.0      0     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n7.0      4     4     0     0     1     0     0  ...     0     1     0     0     0     0     0\n8.0      0     0     0     3     2    12     0  ...     0     0     0     2     0     1     0\n9.0      0    92     4     3     0     3     0  ...   474   335    12     0     0     0     0\n10.0     0   241    77     6     8     5     0  ...    89  1837    57     0     0     6     0\n11.0     0   106    61     9     0     1     0  ...    62   214   114     0     0     0     0\n12.0     0     2     0     0     0     4     0  ...     1     0     0   179     0    10     0\n13.0     1     0     0     0    53     1     0  ...     0     0     0     4  1067    76     0\n14.0     1     4     0     2    28    44     0  ...     8     0     5    26    70   173     0\n15.0     0     5     0     0     0     0     0  ...     8     0     0     0     0     0    74\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     11     0     0     1     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   633    13    38     2     2     0  ...   127   530     9     0     0     0     2\n2.0      0    24   442    15     0     1     0  ...     0   291    21     0     0     0     0\n3.0      0    41    48   100     2    11     0  ...     3    15     0     0     0     0     1\n4.0      1     2     0    11   261    32     3  ...     2     0     1     0   145     0     0\n5.0      0     0     0     3    43   587     0  ...     0     1     0     2     3    50     0\n6.0      0     0     0     4     1     0    12  ...     0     0     0     0     0     0     0\n7.0     11     4     0    29     6     0     7  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     1    18     0  ...     0     0     0     1     0     0     0\n9.0      0    32     2    17     6     1     1  ...   546   320     3     0     0     0     0\n10.0     0    79    41    29     4    18     0  ...    74  2040    31     0     0     2     1\n11.0     0    78    89    34     1     1     0  ...    27   215   121     0     0     0     2\n12.0     0     0     0     2     1     2     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     0   110     2     0  ...     0     0     0    10  1066    19     0\n14.0     2     0     0     7    44    72     0  ...     0     0     0    39    96   104     3\n15.0     0     1     0     0     0     0     0  ...     1     4     6     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   813    31     8     4     4     0  ...   111   308    64     0     0     1     0\n2.0      0   109   425    18     0     2     0  ...     9   146    85     0     0     0     0\n3.0      1    39    27    64     1    17     0  ...     9    23    47     0     0     0     0\n4.0      0     0     0     1   390    11     0  ...     2     3     3     0    28    10     0\n5.0      0     1     0     0    10   620     0  ...     7     3     0     7     8    40     0\n6.0      1     0     0     0     0     0    18  ...     0     0     0     0     0     0     0\n7.0    104     6     0     0     6     0     1  ...     0     0     1     0     0     0     0\n8.0      0     0     0     0     0    11     0  ...     0     0     0     6     0     0     0\n9.0      0   120     7     2    10     2     1  ...   601   153    26     0     0     3     0\n10.0     0   359   109    11    17    10     1  ...   159  1600    58     0     0     4     1\n11.0     0    77    60    26     0     6     0  ...    24    55   307     0     0     0     1\n12.0     0     0     0     0     1     1     0  ...     0     1     0   172     0    18     0\n13.0     0     0     0     0    32    10     0  ...     0     1     0     1  1090    70     0\n14.0     0     0     0     0    18    90     0  ...     0     4    10    38    83   125     0\n15.0     0     4     1     0     2     0     0  ...     5     1     5     0     0     0    70\n\n[16 rows x 16 columns]\n🏃 View run rebellious-dove-762 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/4100e415f012449396ab7dc0fa7ec54b\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results2.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.678238          0.554131           0.628028\n1    2          0.676184          0.572931           0.623897\n2    3          0.683270          0.614782           0.638582\n\nAverage Performance Over 3 Runs:\nOverall Accuracy: 0.6792\nAverage Accuracy: 0.5806\nKappa Coefficient: 0.6302\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_3 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 11.0374\nEpoch 1: val_loss improved from inf to 43.38191, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n2025/02/20 07:43:52 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during autologging: Unable to synchronously create group (name parameter cannot be an empty string)\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 33ms/step - loss: 10.8042 - val_loss: 43.3819\nEpoch 2/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.1281\nEpoch 2: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.1256 - val_loss: 43.3819\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7747\nEpoch 3: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.7740 - val_loss: 43.3819\nEpoch 4/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.8230\nEpoch 4: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.8096 - val_loss: 43.3819\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5661\nEpoch 5: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 1.5622 - val_loss: 43.3819\nEpoch 6/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4499\nEpoch 6: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4419 - val_loss: 43.3819\nEpoch 7/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4511\nEpoch 7: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4389 - val_loss: 43.3819\nEpoch 8/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4586\nEpoch 8: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4447 - val_loss: 43.3819\nEpoch 9/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4162\nEpoch 9: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.4053 - val_loss: 43.3819\nEpoch 10/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2938\nEpoch 10: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2810 - val_loss: 43.3819\nEpoch 11/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2042\nEpoch 11: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1994 - val_loss: 43.3819\nEpoch 12/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1215\nEpoch 12: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1183 - val_loss: 43.3819\nEpoch 13/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2360\nEpoch 13: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2301 - val_loss: 43.3819\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0790\nEpoch 14: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0842 - val_loss: 43.3819\nEpoch 15/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5558\nEpoch 15: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5277 - val_loss: 43.3819\nEpoch 16/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9896\nEpoch 16: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9840 - val_loss: 43.3819\nEpoch 17/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8781\nEpoch 17: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8700 - val_loss: 43.3819\nEpoch 18/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8120\nEpoch 18: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8059 - val_loss: 43.3819\nEpoch 19/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7874\nEpoch 19: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7838 - val_loss: 43.3819\nEpoch 20/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7914\nEpoch 20: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7860 - val_loss: 43.3819\nEpoch 21/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8372\nEpoch 21: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8323 - val_loss: 43.3819\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7328\nEpoch 22: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7325 - val_loss: 43.3819\nEpoch 23/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9741\nEpoch 23: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9789 - val_loss: 43.3819\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8951\nEpoch 24: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8942 - val_loss: 43.3819\nEpoch 25/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9610\nEpoch 25: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9614 - val_loss: 43.3819\nEpoch 26/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5875\nEpoch 26: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5857 - val_loss: 43.3819\nEpoch 27/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1201\nEpoch 27: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1207 - val_loss: 43.3819\nEpoch 28/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3033\nEpoch 28: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3094 - val_loss: 43.3819\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2383\nEpoch 29: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2481 - val_loss: 43.3819\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5210\nEpoch 30: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5270 - val_loss: 43.3819\nEpoch 31/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.8777\nEpoch 31: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.8499 - val_loss: 43.3819\nEpoch 32/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 4.1335\nEpoch 32: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 4.0662 - val_loss: 43.3819\nEpoch 33/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1758\nEpoch 33: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1786 - val_loss: 43.3819\nEpoch 34/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8991\nEpoch 34: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9125 - val_loss: 43.3819\nEpoch 35/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8989\nEpoch 35: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9034 - val_loss: 43.3819\nEpoch 36/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8864\nEpoch 36: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.8879 - val_loss: 43.3819\nEpoch 37/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8480\nEpoch 37: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.8479 - val_loss: 43.3819\nEpoch 38/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7962\nEpoch 38: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7958 - val_loss: 43.3819\nEpoch 39/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7438\nEpoch 39: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7435 - val_loss: 43.3819\nEpoch 40/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6968\nEpoch 40: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6967 - val_loss: 43.3819\nEpoch 41/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6596\nEpoch 41: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6598 - val_loss: 43.3819\nEpoch 42/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6328\nEpoch 42: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6346 - val_loss: 43.3819\nEpoch 43/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6201\nEpoch 43: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6203 - val_loss: 43.3819\nEpoch 44/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6131\nEpoch 44: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6138 - val_loss: 43.3819\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6089\nEpoch 45: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6093 - val_loss: 43.3819\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6016\nEpoch 46: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6017 - val_loss: 43.3819\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5924\nEpoch 47: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5922 - val_loss: 43.3819\nEpoch 48/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5845\nEpoch 48: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5844 - val_loss: 43.3819\nEpoch 49/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5772\nEpoch 49: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.5768 - val_loss: 43.3819\nEpoch 50/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5700\nEpoch 50: val_loss did not improve from 43.38191\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5698 - val_loss: 43.3819\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step\n2025/02/20 07:44:50 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpms0egof6/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 07:45:58 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 07:46:06 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmphg0gf7_e/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 07:46:06 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run bouncy-mink-695 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/af83186f454d4276a51388660256e3cd\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 82 165  69 192 100 128  74  90  70  73  21 199 126  42  50 187 124 132\n   2  26  66  94  65 193 104]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}\nThe model shall evaluate for 4 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      2     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   752    20    46     2     1     0  ...   118   401    27     0     0     0     0\n2.0      0    85   387    21     0     1     0  ...    28   213    44     0     0     0     0\n3.0      0    40    42   101     0     8     0  ...     5     9    17     0     0     0     0\n4.0      4     9     0     4   370     6     0  ...    15     5     3     0    23     3     0\n5.0      0     4     0     1    19   632     0  ...     0     1     0     0     8    28     0\n6.0      0     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n7.0      4     4     0     0     1     0     0  ...     0     1     0     0     0     0     0\n8.0      0     0     0     3     2    12     0  ...     0     0     0     2     0     1     0\n9.0      0    92     4     3     0     3     0  ...   474   335    12     0     0     0     0\n10.0     0   241    77     6     8     5     0  ...    89  1837    57     0     0     6     0\n11.0     0   106    61     9     0     1     0  ...    62   214   114     0     0     0     0\n12.0     0     2     0     0     0     4     0  ...     1     0     0   179     0    10     0\n13.0     1     0     0     0    53     1     0  ...     0     0     0     4  1067    76     0\n14.0     1     4     0     2    28    44     0  ...     8     0     5    26    70   173     0\n15.0     0     5     0     0     0     0     0  ...     8     0     0     0     0     0    74\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     11     0     0     1     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   633    13    38     2     2     0  ...   127   530     9     0     0     0     2\n2.0      0    24   442    15     0     1     0  ...     0   291    21     0     0     0     0\n3.0      0    41    48   100     2    11     0  ...     3    15     0     0     0     0     1\n4.0      1     2     0    11   261    32     3  ...     2     0     1     0   145     0     0\n5.0      0     0     0     3    43   587     0  ...     0     1     0     2     3    50     0\n6.0      0     0     0     4     1     0    12  ...     0     0     0     0     0     0     0\n7.0     11     4     0    29     6     0     7  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     1    18     0  ...     0     0     0     1     0     0     0\n9.0      0    32     2    17     6     1     1  ...   546   320     3     0     0     0     0\n10.0     0    79    41    29     4    18     0  ...    74  2040    31     0     0     2     1\n11.0     0    78    89    34     1     1     0  ...    27   215   121     0     0     0     2\n12.0     0     0     0     2     1     2     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     0   110     2     0  ...     0     0     0    10  1066    19     0\n14.0     2     0     0     7    44    72     0  ...     0     0     0    39    96   104     3\n15.0     0     1     0     0     0     0     0  ...     1     4     6     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   813    31     8     4     4     0  ...   111   308    64     0     0     1     0\n2.0      0   109   425    18     0     2     0  ...     9   146    85     0     0     0     0\n3.0      1    39    27    64     1    17     0  ...     9    23    47     0     0     0     0\n4.0      0     0     0     1   390    11     0  ...     2     3     3     0    28    10     0\n5.0      0     1     0     0    10   620     0  ...     7     3     0     7     8    40     0\n6.0      1     0     0     0     0     0    18  ...     0     0     0     0     0     0     0\n7.0    104     6     0     0     6     0     1  ...     0     0     1     0     0     0     0\n8.0      0     0     0     0     0    11     0  ...     0     0     0     6     0     0     0\n9.0      0   120     7     2    10     2     1  ...   601   153    26     0     0     3     0\n10.0     0   359   109    11    17    10     1  ...   159  1600    58     0     0     4     1\n11.0     0    77    60    26     0     6     0  ...    24    55   307     0     0     0     1\n12.0     0     0     0     0     1     1     0  ...     0     1     0   172     0    18     0\n13.0     0     0     0     0    32    10     0  ...     0     1     0     1  1090    70     0\n14.0     0     0     0     0    18    90     0  ...     0     4    10    38    83   125     0\n15.0     0     4     1     0     2     0     0  ...     5     1     5     0     0     0    70\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     17     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   717    29     5     1     3     0  ...   138   438    20     0     0     0     0\n2.0      0    49   334    20     0     0     0  ...     8   249   136     0     0     0     0\n3.0      0    17    60    94     0     8     0  ...     6    22    19     0     0     0     0\n4.0     17     5     3     1   332    31     4  ...     5     3     4     0    34    25     0\n5.0      0     9     2     9     8   548     0  ...     0     6     4     0    11    98     0\n6.0      1     0     0     0     2     0    11  ...     3     0     0     0     0     0     0\n7.0     18     3     0     0     4     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0    72    21     6     0     1     1  ...   607   191    17     0     0     0     0\n10.0     0   184   114     9     3     9     0  ...   121  1768   117     0     0     6     0\n11.0     0    42   100     3     0     2     0  ...    69   112   231     0     0     0     1\n12.0     0     0     0     0     0    11     0  ...     0     0     0   171     0    10     0\n13.0     1     0     0     0    46     7     0  ...     0     0     0     9  1114    25     0\n14.0     1     0     1     0     9    72     0  ...     2     0     2    35    92   150     0\n15.0     0     2     0     0     0     0     0  ...     3     2     6     0     0     0    74\n\n[16 rows x 16 columns]\n🏃 View run likeable-bass-600 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/b28ff908faa14a558bf2999824975226\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results3.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.678238          0.554131           0.628028\n1    2          0.676184          0.572931           0.623897\n2    3          0.683270          0.614782           0.638582\n3    4          0.677313          0.595444           0.629114\n\nAverage Performance Over 4 Runs:\nOverall Accuracy: 0.6788\nAverage Accuracy: 0.5843\nKappa Coefficient: 0.6299\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_4 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 9.6885 \nEpoch 1: val_loss improved from inf to 60.56181, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n2025/02/20 07:46:38 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during autologging: Unable to synchronously create group (name parameter cannot be an empty string)\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 33ms/step - loss: 9.3023 - val_loss: 60.5618\nEpoch 2/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.9783\nEpoch 2: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.9857 - val_loss: 60.5618\nEpoch 3/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.9722\nEpoch 3: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.9744 - val_loss: 60.5618\nEpoch 4/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7933\nEpoch 4: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.7947 - val_loss: 60.5618\nEpoch 5/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5121\nEpoch 5: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5121 - val_loss: 60.5618\nEpoch 6/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3314\nEpoch 6: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3312 - val_loss: 60.5618\nEpoch 7/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2115\nEpoch 7: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2115 - val_loss: 60.5618\nEpoch 8/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1559\nEpoch 8: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1578 - val_loss: 60.5618\nEpoch 9/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1009\nEpoch 9: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1011 - val_loss: 60.5618\nEpoch 10/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0407\nEpoch 10: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0440 - val_loss: 60.5618\nEpoch 11/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9891\nEpoch 11: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9907 - val_loss: 60.5618\nEpoch 12/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9837\nEpoch 12: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9846 - val_loss: 60.5618\nEpoch 13/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0317\nEpoch 13: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0295 - val_loss: 60.5618\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3762\nEpoch 14: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3706 - val_loss: 60.5618\nEpoch 15/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5384\nEpoch 15: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5444 - val_loss: 60.5618\nEpoch 16/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.2925\nEpoch 16: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.3402 - val_loss: 60.5618\nEpoch 17/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6528\nEpoch 17: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.7009 - val_loss: 60.5618\nEpoch 18/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.7656\nEpoch 18: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.8123 - val_loss: 60.5618\nEpoch 19/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 5.3551\nEpoch 19: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 5.3618 - val_loss: 60.5618\nEpoch 20/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.5861\nEpoch 20: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.6122 - val_loss: 60.5618\nEpoch 21/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6192\nEpoch 21: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6181 - val_loss: 60.5618\nEpoch 22/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5071\nEpoch 22: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4981 - val_loss: 60.5618\nEpoch 23/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4206\nEpoch 23: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4151 - val_loss: 60.5618\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3189\nEpoch 24: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3169 - val_loss: 60.5618\nEpoch 25/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2439\nEpoch 25: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2350 - val_loss: 60.5618\nEpoch 26/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1773\nEpoch 26: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1724 - val_loss: 60.5618\nEpoch 27/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1271\nEpoch 27: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1256 - val_loss: 60.5618\nEpoch 28/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0934\nEpoch 28: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0919 - val_loss: 60.5618\nEpoch 29/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0746\nEpoch 29: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0678 - val_loss: 60.5618\nEpoch 30/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.0539\nEpoch 30: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0501 - val_loss: 60.5618\nEpoch 31/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.0342\nEpoch 31: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.0334 - val_loss: 60.5618\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0146\nEpoch 32: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0122 - val_loss: 60.5618\nEpoch 33/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9910\nEpoch 33: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9862 - val_loss: 60.5618\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9612\nEpoch 34: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9581 - val_loss: 60.5618\nEpoch 35/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9375\nEpoch 35: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9297 - val_loss: 60.5618\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9037\nEpoch 36: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9016 - val_loss: 60.5618\nEpoch 37/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8801\nEpoch 37: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8737 - val_loss: 60.5618\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8486\nEpoch 38: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8467 - val_loss: 60.5618\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8230\nEpoch 39: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8215 - val_loss: 60.5618\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7988\nEpoch 40: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7980 - val_loss: 60.5618\nEpoch 41/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7751\nEpoch 41: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7745 - val_loss: 60.5618\nEpoch 42/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7501\nEpoch 42: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7498 - val_loss: 60.5618\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7331\nEpoch 43: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7324 - val_loss: 60.5618\nEpoch 44/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7274\nEpoch 44: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7265 - val_loss: 60.5618\nEpoch 45/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6975\nEpoch 45: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6973 - val_loss: 60.5618\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6797\nEpoch 46: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6790 - val_loss: 60.5618\nEpoch 47/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8242\nEpoch 47: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.8270 - val_loss: 60.5618\nEpoch 48/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 3.6818\nEpoch 48: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 3.7444 - val_loss: 60.5618\nEpoch 49/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.5817\nEpoch 49: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 2.5798 - val_loss: 60.5618\nEpoch 50/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.6152\nEpoch 50: val_loss did not improve from 60.56181\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 2.5937 - val_loss: 60.5618\nWARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7c71406c7600> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nWARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7c71406c7600> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 94ms/step\n2025/02/20 07:47:36 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmp496cgti4/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 07:48:27 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 07:48:35 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpvpz06bbs/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 07:48:35 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run zealous-bass-239 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/a0844404357d43a4a9c4c1a0b74f0cc0\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [103  82 115 102 125 199 126  42 101 131 181  30  66  51 178  11 159  32\n 114 161  59   7 107  18  94]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 5 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      2     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   752    20    46     2     1     0  ...   118   401    27     0     0     0     0\n2.0      0    85   387    21     0     1     0  ...    28   213    44     0     0     0     0\n3.0      0    40    42   101     0     8     0  ...     5     9    17     0     0     0     0\n4.0      4     9     0     4   370     6     0  ...    15     5     3     0    23     3     0\n5.0      0     4     0     1    19   632     0  ...     0     1     0     0     8    28     0\n6.0      0     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n7.0      4     4     0     0     1     0     0  ...     0     1     0     0     0     0     0\n8.0      0     0     0     3     2    12     0  ...     0     0     0     2     0     1     0\n9.0      0    92     4     3     0     3     0  ...   474   335    12     0     0     0     0\n10.0     0   241    77     6     8     5     0  ...    89  1837    57     0     0     6     0\n11.0     0   106    61     9     0     1     0  ...    62   214   114     0     0     0     0\n12.0     0     2     0     0     0     4     0  ...     1     0     0   179     0    10     0\n13.0     1     0     0     0    53     1     0  ...     0     0     0     4  1067    76     0\n14.0     1     4     0     2    28    44     0  ...     8     0     5    26    70   173     0\n15.0     0     5     0     0     0     0     0  ...     8     0     0     0     0     0    74\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     11     0     0     1     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   633    13    38     2     2     0  ...   127   530     9     0     0     0     2\n2.0      0    24   442    15     0     1     0  ...     0   291    21     0     0     0     0\n3.0      0    41    48   100     2    11     0  ...     3    15     0     0     0     0     1\n4.0      1     2     0    11   261    32     3  ...     2     0     1     0   145     0     0\n5.0      0     0     0     3    43   587     0  ...     0     1     0     2     3    50     0\n6.0      0     0     0     4     1     0    12  ...     0     0     0     0     0     0     0\n7.0     11     4     0    29     6     0     7  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     1    18     0  ...     0     0     0     1     0     0     0\n9.0      0    32     2    17     6     1     1  ...   546   320     3     0     0     0     0\n10.0     0    79    41    29     4    18     0  ...    74  2040    31     0     0     2     1\n11.0     0    78    89    34     1     1     0  ...    27   215   121     0     0     0     2\n12.0     0     0     0     2     1     2     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     0   110     2     0  ...     0     0     0    10  1066    19     0\n14.0     2     0     0     7    44    72     0  ...     0     0     0    39    96   104     3\n15.0     0     1     0     0     0     0     0  ...     1     4     6     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   813    31     8     4     4     0  ...   111   308    64     0     0     1     0\n2.0      0   109   425    18     0     2     0  ...     9   146    85     0     0     0     0\n3.0      1    39    27    64     1    17     0  ...     9    23    47     0     0     0     0\n4.0      0     0     0     1   390    11     0  ...     2     3     3     0    28    10     0\n5.0      0     1     0     0    10   620     0  ...     7     3     0     7     8    40     0\n6.0      1     0     0     0     0     0    18  ...     0     0     0     0     0     0     0\n7.0    104     6     0     0     6     0     1  ...     0     0     1     0     0     0     0\n8.0      0     0     0     0     0    11     0  ...     0     0     0     6     0     0     0\n9.0      0   120     7     2    10     2     1  ...   601   153    26     0     0     3     0\n10.0     0   359   109    11    17    10     1  ...   159  1600    58     0     0     4     1\n11.0     0    77    60    26     0     6     0  ...    24    55   307     0     0     0     1\n12.0     0     0     0     0     1     1     0  ...     0     1     0   172     0    18     0\n13.0     0     0     0     0    32    10     0  ...     0     1     0     1  1090    70     0\n14.0     0     0     0     0    18    90     0  ...     0     4    10    38    83   125     0\n15.0     0     4     1     0     2     0     0  ...     5     1     5     0     0     0    70\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     17     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   717    29     5     1     3     0  ...   138   438    20     0     0     0     0\n2.0      0    49   334    20     0     0     0  ...     8   249   136     0     0     0     0\n3.0      0    17    60    94     0     8     0  ...     6    22    19     0     0     0     0\n4.0     17     5     3     1   332    31     4  ...     5     3     4     0    34    25     0\n5.0      0     9     2     9     8   548     0  ...     0     6     4     0    11    98     0\n6.0      1     0     0     0     2     0    11  ...     3     0     0     0     0     0     0\n7.0     18     3     0     0     4     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0    72    21     6     0     1     1  ...   607   191    17     0     0     0     0\n10.0     0   184   114     9     3     9     0  ...   121  1768   117     0     0     6     0\n11.0     0    42   100     3     0     2     0  ...    69   112   231     0     0     0     1\n12.0     0     0     0     0     0    11     0  ...     0     0     0   171     0    10     0\n13.0     1     0     0     0    46     7     0  ...     0     0     0     9  1114    25     0\n14.0     1     0     1     0     9    72     0  ...     2     0     2    35    92   150     0\n15.0     0     2     0     0     0     0     0  ...     3     2     6     0     0     0    74\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     0     0     0     4  ...     0     0     0     0     0     0     0\n1.0      0   930     9     2     3     3     0  ...   126   256    21     0     0     0     0\n2.0      0    62   388     6     0     1     0  ...    24   267    42     0     0     0     0\n3.0      0    75    42    55     4    20     0  ...    12     4    15     0     0     0     0\n4.0      6     0     0     2   371    18     8  ...     6     3     6     0    32     3     0\n5.0      0     1     0     0    51   619     0  ...     0     0     0     1     8    13     0\n6.0      1     1     0     0     0     0    14  ...     2     0     0     0     0     0     0\n7.0     18    19     0     3    12     0    23  ...     2     0     0     0     0     0     0\n8.0      0     0     0     0     2    13     0  ...     0     0     0     2     0     0     0\n9.0      1    90     1     6     4     4     0  ...   562   259     7     0     0     0     0\n10.0     1   255    26     8     5    13     1  ...    53  1908    40     0     0     0     0\n11.0     1    46    56     4     0     2     0  ...    37   149   261     0     0     1     1\n12.0     0     0     0     1     0    12     0  ...     0     0     0   180     0     2     0\n13.0     0     0     0     0    48    12     0  ...     0     0     0     3  1123    17     0\n14.0     0     0     0     0    35   125     0  ...     6     2     1    34   108    60     0\n15.0     0     0     0     0     0     0     0  ...     7     2     7     0     0     0    73\n\n[16 rows x 16 columns]\n🏃 View run handsome-tern-262 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/16913dcd59f84469a3d464313e23c26c\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results4.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.678238          0.554131           0.628028\n1    2          0.676184          0.572931           0.623897\n2    3          0.683270          0.614782           0.638582\n3    4          0.677313          0.595444           0.629114\n4    5          0.711924          0.579522           0.667494\n\nAverage Performance Over 5 Runs:\nOverall Accuracy: 0.6854\nAverage Accuracy: 0.5834\nKappa Coefficient: 0.6374\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_5 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 7.1394\nEpoch 1: val_loss improved from inf to 11.84288, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n2025/02/20 07:49:14 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during autologging: Unable to synchronously create group (name parameter cannot be an empty string)\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - loss: 6.9011 - val_loss: 11.8429\nEpoch 2/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7612\nEpoch 2: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.7587 - val_loss: 11.8429\nEpoch 3/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3215\nEpoch 3: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3216 - val_loss: 11.8429\nEpoch 4/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1848\nEpoch 4: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1836 - val_loss: 11.8429\nEpoch 5/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1561\nEpoch 5: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1552 - val_loss: 11.8429\nEpoch 6/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4276\nEpoch 6: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4315 - val_loss: 11.8429\nEpoch 7/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1720\nEpoch 7: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.1848 - val_loss: 11.8429\nEpoch 8/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.0154\nEpoch 8: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.0226 - val_loss: 11.8429\nEpoch 9/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2172\nEpoch 9: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2620 - val_loss: 11.8429\nEpoch 10/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7396\nEpoch 10: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.7281 - val_loss: 11.8429\nEpoch 11/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.4815\nEpoch 11: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.4788 - val_loss: 11.8429\nEpoch 12/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.9914\nEpoch 12: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.9441 - val_loss: 11.8429\nEpoch 13/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3987\nEpoch 13: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3827 - val_loss: 11.8429\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0724\nEpoch 14: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0642 - val_loss: 11.8429\nEpoch 15/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8364\nEpoch 15: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8354 - val_loss: 11.8429\nEpoch 16/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7945\nEpoch 16: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7909 - val_loss: 11.8429\nEpoch 17/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7612\nEpoch 17: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7582 - val_loss: 11.8429\nEpoch 18/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7524\nEpoch 18: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7501 - val_loss: 11.8429\nEpoch 19/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9418\nEpoch 19: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9417 - val_loss: 11.8429\nEpoch 20/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0497\nEpoch 20: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0970 - val_loss: 11.8429\nEpoch 21/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.7093\nEpoch 21: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 2.7358 - val_loss: 11.8429\nEpoch 22/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2254\nEpoch 22: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.2446 - val_loss: 11.8429\nEpoch 23/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5587\nEpoch 23: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.5261 - val_loss: 11.8429\nEpoch 24/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7598\nEpoch 24: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7580 - val_loss: 11.8429\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8271\nEpoch 25: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8238 - val_loss: 11.8429\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6798\nEpoch 26: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6789 - val_loss: 11.8429\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6991\nEpoch 27: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6976 - val_loss: 11.8429\nEpoch 28/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6273\nEpoch 28: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6276 - val_loss: 11.8429\nEpoch 29/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6918\nEpoch 29: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6914 - val_loss: 11.8429\nEpoch 30/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5983\nEpoch 30: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5997 - val_loss: 11.8429\nEpoch 31/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7536\nEpoch 31: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7524 - val_loss: 11.8429\nEpoch 32/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9286\nEpoch 32: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0285 - val_loss: 11.8429\nEpoch 33/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.9617\nEpoch 33: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 2.0181 - val_loss: 11.8429\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6442\nEpoch 34: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.6523 - val_loss: 11.8429\nEpoch 35/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7135\nEpoch 35: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6748 - val_loss: 11.8429\nEpoch 36/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7902\nEpoch 36: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7891 - val_loss: 11.8429\nEpoch 37/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8200\nEpoch 37: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8137 - val_loss: 11.8429\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7435\nEpoch 38: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7424 - val_loss: 11.8429\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7363\nEpoch 39: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7339 - val_loss: 11.8429\nEpoch 40/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6805\nEpoch 40: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6790 - val_loss: 11.8429\nEpoch 41/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6743\nEpoch 41: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6717 - val_loss: 11.8429\nEpoch 42/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6298\nEpoch 42: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6306 - val_loss: 11.8429\nEpoch 43/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6378\nEpoch 43: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6372 - val_loss: 11.8429\nEpoch 44/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6143\nEpoch 44: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6167 - val_loss: 11.8429\nEpoch 45/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6543\nEpoch 45: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6556 - val_loss: 11.8429\nEpoch 46/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0227\nEpoch 46: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0366 - val_loss: 11.8429\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.8084\nEpoch 47: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.8319 - val_loss: 11.8429\nEpoch 48/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.0760\nEpoch 48: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.0821 - val_loss: 11.8429\nEpoch 49/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.0270\nEpoch 49: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.0237 - val_loss: 11.8429\nEpoch 50/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0359\nEpoch 50: val_loss did not improve from 11.84288\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0356 - val_loss: 11.8429\nWARNING:tensorflow:6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7c71988acf40> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nWARNING:tensorflow:6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7c71988acf40> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step\n2025/02/20 07:50:13 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpp6jbv494/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 07:51:16 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 07:51:24 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmp6nlb8zf3/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 07:51:24 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run omniscient-sow-588 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/e6e0c5d99c9446489bb36c1887953adb\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [  3 187 102  23   8 121  24 184  25   4  53 166  63  30 105 157 180  72\n  86 186  76 117 134  74 101]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 6 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      2     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   752    20    46     2     1     0  ...   118   401    27     0     0     0     0\n2.0      0    85   387    21     0     1     0  ...    28   213    44     0     0     0     0\n3.0      0    40    42   101     0     8     0  ...     5     9    17     0     0     0     0\n4.0      4     9     0     4   370     6     0  ...    15     5     3     0    23     3     0\n5.0      0     4     0     1    19   632     0  ...     0     1     0     0     8    28     0\n6.0      0     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n7.0      4     4     0     0     1     0     0  ...     0     1     0     0     0     0     0\n8.0      0     0     0     3     2    12     0  ...     0     0     0     2     0     1     0\n9.0      0    92     4     3     0     3     0  ...   474   335    12     0     0     0     0\n10.0     0   241    77     6     8     5     0  ...    89  1837    57     0     0     6     0\n11.0     0   106    61     9     0     1     0  ...    62   214   114     0     0     0     0\n12.0     0     2     0     0     0     4     0  ...     1     0     0   179     0    10     0\n13.0     1     0     0     0    53     1     0  ...     0     0     0     4  1067    76     0\n14.0     1     4     0     2    28    44     0  ...     8     0     5    26    70   173     0\n15.0     0     5     0     0     0     0     0  ...     8     0     0     0     0     0    74\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     11     0     0     1     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   633    13    38     2     2     0  ...   127   530     9     0     0     0     2\n2.0      0    24   442    15     0     1     0  ...     0   291    21     0     0     0     0\n3.0      0    41    48   100     2    11     0  ...     3    15     0     0     0     0     1\n4.0      1     2     0    11   261    32     3  ...     2     0     1     0   145     0     0\n5.0      0     0     0     3    43   587     0  ...     0     1     0     2     3    50     0\n6.0      0     0     0     4     1     0    12  ...     0     0     0     0     0     0     0\n7.0     11     4     0    29     6     0     7  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     1    18     0  ...     0     0     0     1     0     0     0\n9.0      0    32     2    17     6     1     1  ...   546   320     3     0     0     0     0\n10.0     0    79    41    29     4    18     0  ...    74  2040    31     0     0     2     1\n11.0     0    78    89    34     1     1     0  ...    27   215   121     0     0     0     2\n12.0     0     0     0     2     1     2     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     0   110     2     0  ...     0     0     0    10  1066    19     0\n14.0     2     0     0     7    44    72     0  ...     0     0     0    39    96   104     3\n15.0     0     1     0     0     0     0     0  ...     1     4     6     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   813    31     8     4     4     0  ...   111   308    64     0     0     1     0\n2.0      0   109   425    18     0     2     0  ...     9   146    85     0     0     0     0\n3.0      1    39    27    64     1    17     0  ...     9    23    47     0     0     0     0\n4.0      0     0     0     1   390    11     0  ...     2     3     3     0    28    10     0\n5.0      0     1     0     0    10   620     0  ...     7     3     0     7     8    40     0\n6.0      1     0     0     0     0     0    18  ...     0     0     0     0     0     0     0\n7.0    104     6     0     0     6     0     1  ...     0     0     1     0     0     0     0\n8.0      0     0     0     0     0    11     0  ...     0     0     0     6     0     0     0\n9.0      0   120     7     2    10     2     1  ...   601   153    26     0     0     3     0\n10.0     0   359   109    11    17    10     1  ...   159  1600    58     0     0     4     1\n11.0     0    77    60    26     0     6     0  ...    24    55   307     0     0     0     1\n12.0     0     0     0     0     1     1     0  ...     0     1     0   172     0    18     0\n13.0     0     0     0     0    32    10     0  ...     0     1     0     1  1090    70     0\n14.0     0     0     0     0    18    90     0  ...     0     4    10    38    83   125     0\n15.0     0     4     1     0     2     0     0  ...     5     1     5     0     0     0    70\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     17     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   717    29     5     1     3     0  ...   138   438    20     0     0     0     0\n2.0      0    49   334    20     0     0     0  ...     8   249   136     0     0     0     0\n3.0      0    17    60    94     0     8     0  ...     6    22    19     0     0     0     0\n4.0     17     5     3     1   332    31     4  ...     5     3     4     0    34    25     0\n5.0      0     9     2     9     8   548     0  ...     0     6     4     0    11    98     0\n6.0      1     0     0     0     2     0    11  ...     3     0     0     0     0     0     0\n7.0     18     3     0     0     4     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0    72    21     6     0     1     1  ...   607   191    17     0     0     0     0\n10.0     0   184   114     9     3     9     0  ...   121  1768   117     0     0     6     0\n11.0     0    42   100     3     0     2     0  ...    69   112   231     0     0     0     1\n12.0     0     0     0     0     0    11     0  ...     0     0     0   171     0    10     0\n13.0     1     0     0     0    46     7     0  ...     0     0     0     9  1114    25     0\n14.0     1     0     1     0     9    72     0  ...     2     0     2    35    92   150     0\n15.0     0     2     0     0     0     0     0  ...     3     2     6     0     0     0    74\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     0     0     0     4  ...     0     0     0     0     0     0     0\n1.0      0   930     9     2     3     3     0  ...   126   256    21     0     0     0     0\n2.0      0    62   388     6     0     1     0  ...    24   267    42     0     0     0     0\n3.0      0    75    42    55     4    20     0  ...    12     4    15     0     0     0     0\n4.0      6     0     0     2   371    18     8  ...     6     3     6     0    32     3     0\n5.0      0     1     0     0    51   619     0  ...     0     0     0     1     8    13     0\n6.0      1     1     0     0     0     0    14  ...     2     0     0     0     0     0     0\n7.0     18    19     0     3    12     0    23  ...     2     0     0     0     0     0     0\n8.0      0     0     0     0     2    13     0  ...     0     0     0     2     0     0     0\n9.0      1    90     1     6     4     4     0  ...   562   259     7     0     0     0     0\n10.0     1   255    26     8     5    13     1  ...    53  1908    40     0     0     0     0\n11.0     1    46    56     4     0     2     0  ...    37   149   261     0     0     1     1\n12.0     0     0     0     1     0    12     0  ...     0     0     0   180     0     2     0\n13.0     0     0     0     0    48    12     0  ...     0     0     0     3  1123    17     0\n14.0     0     0     0     0    35   125     0  ...     6     2     1    34   108    60     0\n15.0     0     0     0     0     0     0     0  ...     7     2     7     0     0     0    73\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 6:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     20     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n1.0      0   903     3    42     3     4     0  ...   130   265     7     0     0     0     0\n2.0      0    48   365    22     0     0     0  ...    17   290    50     0     0     0     0\n3.0      0    66    20    93     0    15     2  ...     5    19     3     0     0     0     0\n4.0      2     3     0     9   379    16     4  ...     6    11     1     0    17     2     0\n5.0      0     0     0    24     9   606     0  ...     0     6     0     2     2    34     0\n6.0      1     0     0     0     1     0    18  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     4     0    10  ...     2     3     0     0     0     0     0\n8.0      0     0     0     0     2     3     0  ...     0     0     0     0     0     0     0\n9.0      0   103     5     8     0     2     1  ...   480   327     1     0     0     0     0\n10.0     0   134    32    20     7    11     0  ...   112  1973    32     0     0     0     1\n11.0     0    86    89    30     0     6     0  ...    34   198   126     0     0     0     0\n12.0     0     0     0     1     0    13     0  ...     0     0     0   158     0     8     0\n13.0     0     0     0     0    10    11     0  ...     0     0     0     1  1168    10     0\n14.0     0     0     3     1    14    99     0  ...     3     2     0    19   113   109     0\n15.0     0     1     0     0     0     0     0  ...     6     6     3     0     0     0    74\n\n[16 rows x 16 columns]\n🏃 View run adorable-lark-142 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/8bdaabc25b464ba2aad801e15cde9eaf\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results5.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.678238          0.554131           0.628028\n1    2          0.676184          0.572931           0.623897\n2    3          0.683270          0.614782           0.638582\n3    4          0.677313          0.595444           0.629114\n4    5          0.711924          0.579522           0.667494\n5    6          0.710897          0.663951           0.665025\n\nAverage Performance Over 6 Runs:\nOverall Accuracy: 0.6896\nAverage Accuracy: 0.5968\nKappa Coefficient: 0.6420\n","output_type":"stream"}],"execution_count":34},{"cell_type":"markdown","source":"## Multi layer seed =42","metadata":{}},{"cell_type":"code","source":"# %matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T08:00:02.175433Z","iopub.execute_input":"2025-02-20T08:00:02.175812Z","iopub.status.idle":"2025-02-20T08:24:40.245905Z","shell.execute_reply.started":"2025-02-20T08:00:02.175781Z","shell.execute_reply":"2025-02-20T08:24:40.244421Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"2025-02-20 08:00:02.784474: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1740038402.824312   12400 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1740038402.836350   12400 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nAccessing as vidhi-gajra-git\nInitialized MLflow to track repo \u001b[32m\"vidhi-gajra-git/SRL_SOA\"\u001b[0m\nRepository vidhi-gajra-git/SRL_SOA initialized!\n\nScene:  (145, 145, 200)\n\nClassification:\nTraining samples:  512\nTest samples:  9737\n\n\nNumber of bands:  200\n**********  METHOD : SVM **********\n\t\t\t\t\t *****  #RUNS : 6  *****\n2025-02-20 08:00:11.570296: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot (\u001b[94mDot\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 33.8242\nEpoch 1: val_loss improved from inf to 26.18815, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 38ms/step - loss: 33.7954 - val_loss: 26.1881\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 25.7136\nEpoch 2: val_loss improved from 26.18815 to 24.65903, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step - loss: 25.7125 - val_loss: 24.6590\nEpoch 3/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 24.2388\nEpoch 3: val_loss improved from 24.65903 to 24.55090, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step - loss: 24.2392 - val_loss: 24.5509\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 23.7032\nEpoch 4: val_loss did not improve from 24.55090\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 23.7113 - val_loss: 26.0021\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 24.9306\nEpoch 5: val_loss improved from 24.55090 to 23.79995, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 24.9135 - val_loss: 23.8000\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 24.0298\nEpoch 6: val_loss improved from 23.79995 to 23.10593, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 24.0245 - val_loss: 23.1059\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 23.4318\nEpoch 7: val_loss improved from 23.10593 to 22.16663, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 23.4311 - val_loss: 22.1666\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 23.8063\nEpoch 8: val_loss did not improve from 22.16663\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 23.8362 - val_loss: 30.1175\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 21.3967\nEpoch 9: val_loss improved from 22.16663 to 19.37409, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 21.3815 - val_loss: 19.3741\nEpoch 10/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 20.0713\nEpoch 10: val_loss did not improve from 19.37409\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 20.0718 - val_loss: 21.2347\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 18.3253\nEpoch 11: val_loss improved from 19.37409 to 17.27854, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step - loss: 18.3145 - val_loss: 17.2785\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 17.2786\nEpoch 12: val_loss did not improve from 17.27854\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 17.3013 - val_loss: 19.5811\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 17.1433\nEpoch 13: val_loss improved from 17.27854 to 16.10706, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 17.1245 - val_loss: 16.1071\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 16.4077\nEpoch 14: val_loss did not improve from 16.10706\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 16.4743 - val_loss: 17.9506\nEpoch 15/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 19.5614\nEpoch 15: val_loss improved from 16.10706 to 15.24318, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 50ms/step - loss: 19.5201 - val_loss: 15.2432\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 16.0060\nEpoch 16: val_loss improved from 15.24318 to 14.53605, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 16.0437 - val_loss: 14.5361\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.1034\nEpoch 17: val_loss did not improve from 14.53605\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 15.1007 - val_loss: 14.9467\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.8196\nEpoch 18: val_loss improved from 14.53605 to 12.78306, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 36ms/step - loss: 13.8118 - val_loss: 12.7831\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.6479\nEpoch 19: val_loss improved from 12.78306 to 12.43155, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - loss: 12.6486 - val_loss: 12.4316\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.1387\nEpoch 20: val_loss improved from 12.43155 to 12.02548, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 44ms/step - loss: 12.1384 - val_loss: 12.0255\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.7396\nEpoch 21: val_loss improved from 12.02548 to 11.59134, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 11.7329 - val_loss: 11.5913\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 11.6897\nEpoch 22: val_loss did not improve from 11.59134\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 11.6892 - val_loss: 11.6268\nEpoch 23/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.3104\nEpoch 23: val_loss did not improve from 11.59134\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 12.4036 - val_loss: 28.7530\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 14.0358\nEpoch 24: val_loss did not improve from 11.59134\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 13.9875 - val_loss: 12.3531\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.4706\nEpoch 25: val_loss improved from 11.59134 to 9.53281, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 12.4406 - val_loss: 9.5328\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.1160\nEpoch 26: val_loss did not improve from 9.53281\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 10.1414 - val_loss: 9.9627\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.5817\nEpoch 27: val_loss improved from 9.53281 to 9.51355, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 10.6268 - val_loss: 9.5136\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.2134\nEpoch 28: val_loss improved from 9.51355 to 8.83441, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - loss: 10.2018 - val_loss: 8.8344\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.7050\nEpoch 29: val_loss improved from 8.83441 to 8.10055, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 8.7105 - val_loss: 8.1006\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.3488\nEpoch 30: val_loss improved from 8.10055 to 7.61963, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 8.3528 - val_loss: 7.6196\nEpoch 31/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.8473\nEpoch 31: val_loss improved from 7.61963 to 7.08412, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 7.8464 - val_loss: 7.0841\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.1786\nEpoch 32: val_loss improved from 7.08412 to 6.69131, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 7.1754 - val_loss: 6.6913\nEpoch 33/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.1062\nEpoch 33: val_loss did not improve from 6.69131\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 7.1069 - val_loss: 7.3042\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.0042\nEpoch 34: val_loss did not improve from 6.69131\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.0574 - val_loss: 11.7955\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.6218\nEpoch 35: val_loss did not improve from 6.69131\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 13.5358 - val_loss: 8.2526\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 9.4050\nEpoch 36: val_loss did not improve from 6.69131\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 9.5074 - val_loss: 20.2564\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.7745\nEpoch 37: val_loss did not improve from 6.69131\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.7326 - val_loss: 8.8775\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.5671\nEpoch 38: val_loss did not improve from 6.69131\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.5618 - val_loss: 7.1833\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.0319\nEpoch 39: val_loss improved from 6.69131 to 6.30984, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 6.0400 - val_loss: 6.3098\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.0246\nEpoch 40: val_loss did not improve from 6.30984\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 6.0338 - val_loss: 6.5379\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.0144\nEpoch 41: val_loss did not improve from 6.30984\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 6.0212 - val_loss: 7.2285\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.7967\nEpoch 42: val_loss improved from 6.30984 to 5.92767, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 5.7907 - val_loss: 5.9277\nEpoch 43/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.0224\nEpoch 43: val_loss improved from 5.92767 to 5.42818, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 5.0213 - val_loss: 5.4282\nEpoch 44/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.2119\nEpoch 44: val_loss did not improve from 5.42818\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 5.2146 - val_loss: 8.4801\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.2626\nEpoch 45: val_loss did not improve from 5.42818\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.2341 - val_loss: 5.4556\nEpoch 46/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.3738\nEpoch 46: val_loss did not improve from 5.42818\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - loss: 9.3615 - val_loss: 7.4989\nEpoch 47/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 7.9416\nEpoch 47: val_loss did not improve from 5.42818\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 7.9579 - val_loss: 10.8458\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.9469\nEpoch 48: val_loss did not improve from 5.42818\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 6.9280 - val_loss: 6.6784\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.9353\nEpoch 49: val_loss improved from 5.42818 to 4.84503, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 36ms/step - loss: 4.9342 - val_loss: 4.8450\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.4200\nEpoch 50: val_loss improved from 4.84503 to 4.66895, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 4.4242 - val_loss: 4.6690\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 219ms/step\n2025/02/20 08:03:26 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpo2ijkhyg/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n2025/02/20 08:03:32 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 08:03:40 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpgey_rv_a/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 08:03:40 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run clean-goat-91 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/a154297474a74cc1b3d6e06016a00b4d\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [97 69 37 58 45 44 48 63 42 43 66 47 67 61 51 38 68 64 57 81 46 62 35 16\n 53]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 1 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807   120    32     0     2     0  ...    37   354    15     0     0     1     0\n2.0      0   162   364    25     0     2     0  ...    17   184    25     0     0     0     0\n3.0      0    38    73   102     1     0     0  ...     1     4     2     0     0     0     0\n4.0      1     0     9    14   409     1     0  ...     7    12     4     0     3     1     0\n5.0      0     5     0     2     3   646     0  ...     1     2     0     0     2    32     0\n6.0      0     0     0     2     1     0     0  ...     1     2     0     0     0     0     0\n7.0      0     0     0     0    10     0     0  ...     0     1     0     0     0     0     0\n8.0      0    15     0     0     0     2     0  ...     0     0     0     1     2     0     0\n9.0      0    79    37     5     0     4     0  ...   322   446    31     0     0     0     0\n10.0     0   246    83    17    10    10     0  ...   121  1821    17     0     1     2     0\n11.0     0    45    63    19     2     3     0  ...    26   123   285     0     0     1     0\n12.0     0     7     0     0     0     1     0  ...     0     0     0   188     0     0     0\n13.0     0     0     0     0    15     1     0  ...     0     0     1     9  1119    57     0\n14.0     1    29    11     4    32    23     0  ...     1     0     1    24    66   166     0\n15.0     0    12     5     0     0     0     0  ...     0     0     1     0     0     0    69\n\n[16 rows x 16 columns]\n🏃 View run abundant-crow-639 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/7521be17ffec4518a1bda7485ab60425\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results0.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.692513          0.573164           0.644891\n\nAverage Performance Over 1 Runs:\nOverall Accuracy: 0.6925\nAverage Accuracy: 0.5732\nKappa Coefficient: 0.6449\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_1 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 35.1243\nEpoch 1: val_loss improved from inf to 37.41661, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 37ms/step - loss: 35.0349 - val_loss: 37.4166\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 29.8337\nEpoch 2: val_loss did not improve from 37.41661\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 29.7851 - val_loss: 46.6509\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 35.2970\nEpoch 3: val_loss did not improve from 37.41661\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 35.1756 - val_loss: 53.5075\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 37.2382\nEpoch 4: val_loss did not improve from 37.41661\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 37.0656 - val_loss: 60.2975\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 38.7674\nEpoch 5: val_loss improved from 37.41661 to 29.74991, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 38.5159 - val_loss: 29.7499\nEpoch 6/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 27.8790\nEpoch 6: val_loss improved from 29.74991 to 28.70924, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step - loss: 27.8175 - val_loss: 28.7092\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 24.8560\nEpoch 7: val_loss improved from 28.70924 to 22.75684, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 24.8171 - val_loss: 22.7568\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 22.1879\nEpoch 8: val_loss improved from 22.75684 to 22.54060, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 22.1836 - val_loss: 22.5406\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 21.3630\nEpoch 9: val_loss improved from 22.54060 to 21.10448, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 21.3540 - val_loss: 21.1045\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 20.3905\nEpoch 10: val_loss improved from 21.10448 to 20.46372, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 20.3838 - val_loss: 20.4637\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 19.6285\nEpoch 11: val_loss improved from 20.46372 to 19.32144, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 19.6231 - val_loss: 19.3214\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 18.9024\nEpoch 12: val_loss improved from 19.32144 to 18.49976, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 18.9007 - val_loss: 18.4998\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 18.2275\nEpoch 13: val_loss improved from 18.49976 to 17.89063, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 18.2295 - val_loss: 17.8906\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 17.6484\nEpoch 14: val_loss improved from 17.89063 to 17.40581, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 17.6493 - val_loss: 17.4058\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 16.8681\nEpoch 15: val_loss improved from 17.40581 to 16.95037, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 16.8652 - val_loss: 16.9504\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 16.3283\nEpoch 16: val_loss improved from 16.95037 to 16.36438, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 16.3218 - val_loss: 16.3644\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.6145\nEpoch 17: val_loss did not improve from 16.36438\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 15.6112 - val_loss: 16.8465\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 16.2387\nEpoch 18: val_loss improved from 16.36438 to 15.75319, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 16.2572 - val_loss: 15.7532\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.4688\nEpoch 19: val_loss did not improve from 15.75319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 15.4848 - val_loss: 17.1295\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 19.2195\nEpoch 20: val_loss did not improve from 15.75319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 19.3050 - val_loss: 18.8165\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.0294\nEpoch 21: val_loss did not improve from 15.75319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - loss: 15.0095 - val_loss: 17.5371\nEpoch 22/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 14.0664\nEpoch 22: val_loss improved from 15.75319 to 13.86436, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 36ms/step - loss: 14.0564 - val_loss: 13.8644\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.6315\nEpoch 23: val_loss improved from 13.86436 to 12.76332, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 36ms/step - loss: 12.6257 - val_loss: 12.7633\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.2501\nEpoch 24: val_loss did not improve from 12.76332\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 12.2464 - val_loss: 13.0688\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.8686\nEpoch 25: val_loss improved from 12.76332 to 11.29560, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 11.8511 - val_loss: 11.2956\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.7488\nEpoch 26: val_loss did not improve from 11.29560\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 10.7498 - val_loss: 12.2003\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 11.1924\nEpoch 27: val_loss improved from 11.29560 to 10.62616, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step - loss: 11.1759 - val_loss: 10.6262\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.2014\nEpoch 28: val_loss did not improve from 10.62616\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 10.2181 - val_loss: 25.2347\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 14.3927\nEpoch 29: val_loss did not improve from 10.62616\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 14.3192 - val_loss: 22.3207\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.7406\nEpoch 30: val_loss did not improve from 10.62616\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 13.6774 - val_loss: 16.4910\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.9752\nEpoch 31: val_loss did not improve from 10.62616\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - loss: 12.9294 - val_loss: 16.1728\nEpoch 32/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.3574\nEpoch 32: val_loss improved from 10.62616 to 9.81387, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 35ms/step - loss: 10.3407 - val_loss: 9.8139\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.5054\nEpoch 33: val_loss improved from 9.81387 to 9.23233, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 9.4833 - val_loss: 9.2323\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.5547\nEpoch 34: val_loss did not improve from 9.23233\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 8.5754 - val_loss: 11.7481\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.8241\nEpoch 35: val_loss improved from 9.23233 to 8.78109, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 10.8177 - val_loss: 8.7811\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.8599\nEpoch 36: val_loss improved from 8.78109 to 7.52760, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - loss: 8.8542 - val_loss: 7.5276\nEpoch 37/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.8701\nEpoch 37: val_loss improved from 7.52760 to 6.93354, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 44ms/step - loss: 7.8804 - val_loss: 6.9335\nEpoch 38/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.7001\nEpoch 38: val_loss improved from 6.93354 to 6.73179, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 6.6982 - val_loss: 6.7318\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.5379\nEpoch 39: val_loss did not improve from 6.73179\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 6.5327 - val_loss: 7.0257\nEpoch 40/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 6.2832\nEpoch 40: val_loss improved from 6.73179 to 6.51907, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step - loss: 6.2702 - val_loss: 6.5191\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.3127\nEpoch 41: val_loss improved from 6.51907 to 5.80433, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 39ms/step - loss: 6.3065 - val_loss: 5.8043\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.6603\nEpoch 42: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 6.6714 - val_loss: 6.9475\nEpoch 43/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.2440\nEpoch 43: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.2586 - val_loss: 8.0782\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.8403\nEpoch 44: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 7.8585 - val_loss: 8.1689\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.2322\nEpoch 45: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - loss: 9.2639 - val_loss: 9.5465\nEpoch 46/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.3061\nEpoch 46: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 10.3113 - val_loss: 8.5799\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.7635\nEpoch 47: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 7.7630 - val_loss: 9.5267\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.7552\nEpoch 48: val_loss did not improve from 5.80433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 7.7405 - val_loss: 5.8271\nEpoch 49/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 5.7180\nEpoch 49: val_loss improved from 5.80433 to 5.12300, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step - loss: 5.7178 - val_loss: 5.1230\nEpoch 50/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.0755\nEpoch 50: val_loss improved from 5.12300 to 4.83465, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 5.0714 - val_loss: 4.8346\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 208ms/step\n2025/02/20 08:07:35 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmps25ihyx1/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n2025/02/20 08:07:41 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 08:07:49 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpi5s2l10g/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 08:07:49 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run illustrious-skunk-14 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/bfe6e485cedf4669974f80ad732f6e6d\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [186 123 167 190 168  40  71 157 114  38 151  46  10 133 140 161  41 160\n 176 117 113  43  69  64  37]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 2 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807   120    32     0     2     0  ...    37   354    15     0     0     1     0\n2.0      0   162   364    25     0     2     0  ...    17   184    25     0     0     0     0\n3.0      0    38    73   102     1     0     0  ...     1     4     2     0     0     0     0\n4.0      1     0     9    14   409     1     0  ...     7    12     4     0     3     1     0\n5.0      0     5     0     2     3   646     0  ...     1     2     0     0     2    32     0\n6.0      0     0     0     2     1     0     0  ...     1     2     0     0     0     0     0\n7.0      0     0     0     0    10     0     0  ...     0     1     0     0     0     0     0\n8.0      0    15     0     0     0     2     0  ...     0     0     0     1     2     0     0\n9.0      0    79    37     5     0     4     0  ...   322   446    31     0     0     0     0\n10.0     0   246    83    17    10    10     0  ...   121  1821    17     0     1     2     0\n11.0     0    45    63    19     2     3     0  ...    26   123   285     0     0     1     0\n12.0     0     7     0     0     0     1     0  ...     0     0     0   188     0     0     0\n13.0     0     0     0     0    15     1     0  ...     0     0     1     9  1119    57     0\n14.0     1    29    11     4    32    23     0  ...     1     0     1    24    66   166     0\n15.0     0    12     5     0     0     0     0  ...     0     0     1     0     0     0    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807    22     5     2     4     0  ...   109   400     4     0     0     0     3\n2.0      0    27   474    25     0     0     0  ...     1   254    13     0     0     0     0\n3.0      0    10    35   158     0    12     1  ...     2     3     0     0     0     0     0\n4.0      0     2     0     5   423    15     1  ...     0     5     1     0     7     0     0\n5.0      0     0     0     0     4   648     0  ...     0     1     0     0     1    35     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      3     0     0     0     0     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0   154     1     2    12     2     0  ...   488   261     9     0     0     0     0\n10.0     0   176    65    13     8    13     1  ...    55  1948    36     0     0     5     0\n11.0     0    28    55    21     0     5     0  ...     3    47   404     0     0     1     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    22     4     0  ...     0     0     0     2  1130    49     0\n14.0     0     0     0     2    36    49     0  ...     1     0     0    31    79   168     1\n15.0     0     1     0     0     0     0     0  ...     3     6     2     0     0     0    76\n\n[16 rows x 16 columns]\n🏃 View run bustling-elk-457 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/3702b43807d04cc4abfbfa3525fc6e87\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results1.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.692513          0.573164           0.644891\n1    2          0.762247          0.732325           0.726264\n\nAverage Performance Over 2 Runs:\nOverall Accuracy: 0.7274\nAverage Accuracy: 0.6527\nKappa Coefficient: 0.6856\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_2 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 40.4070\nEpoch 1: val_loss improved from inf to 26.37166, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 45ms/step - loss: 40.2019 - val_loss: 26.3717\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 25.3775\nEpoch 2: val_loss improved from 26.37166 to 24.96305, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step - loss: 25.3641 - val_loss: 24.9630\nEpoch 3/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 24.4648\nEpoch 3: val_loss improved from 24.96305 to 24.92192, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 24.4573 - val_loss: 24.9219\nEpoch 4/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 23.6559\nEpoch 4: val_loss improved from 24.92192 to 23.27113, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 23.6366 - val_loss: 23.2711\nEpoch 5/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 22.3034\nEpoch 5: val_loss did not improve from 23.27113\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 22.3109 - val_loss: 28.9194\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 26.2978\nEpoch 6: val_loss improved from 23.27113 to 21.55840, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step - loss: 26.2591 - val_loss: 21.5584\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 26.3964\nEpoch 7: val_loss did not improve from 21.55840\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 26.3436 - val_loss: 22.2718\nEpoch 8/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 25.1563\nEpoch 8: val_loss improved from 21.55840 to 20.44299, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 25.1269 - val_loss: 20.4430\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 20.2238\nEpoch 9: val_loss improved from 20.44299 to 19.52413, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 50ms/step - loss: 20.2022 - val_loss: 19.5241\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 19.0069\nEpoch 10: val_loss improved from 19.52413 to 18.47772, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 18.9883 - val_loss: 18.4777\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 17.8540\nEpoch 11: val_loss improved from 18.47772 to 17.84016, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - loss: 17.8426 - val_loss: 17.8402\nEpoch 12/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 16.9236\nEpoch 12: val_loss improved from 17.84016 to 17.55180, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 16.9187 - val_loss: 17.5518\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 16.0963\nEpoch 13: val_loss improved from 17.55180 to 15.33700, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 16.0843 - val_loss: 15.3370\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.1802\nEpoch 14: val_loss did not improve from 15.33700\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 15.1836 - val_loss: 17.6677\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 15.3777\nEpoch 15: val_loss did not improve from 15.33700\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 15.4203 - val_loss: 23.5900\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 18.4360\nEpoch 16: val_loss did not improve from 15.33700\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 18.3862 - val_loss: 16.5149\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 16.3438\nEpoch 17: val_loss improved from 15.33700 to 14.64816, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - loss: 16.3036 - val_loss: 14.6482\nEpoch 18/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 13.4038\nEpoch 18: val_loss improved from 14.64816 to 13.01587, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 13.3991 - val_loss: 13.0159\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.2328\nEpoch 19: val_loss improved from 13.01587 to 11.95449, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 12.2263 - val_loss: 11.9545\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 11.6865\nEpoch 20: val_loss improved from 11.95449 to 11.00054, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 50ms/step - loss: 11.6807 - val_loss: 11.0005\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.0744\nEpoch 21: val_loss improved from 11.00054 to 10.67217, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - loss: 11.0683 - val_loss: 10.6722\nEpoch 22/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.4011\nEpoch 22: val_loss improved from 10.67217 to 10.12607, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 10.3980 - val_loss: 10.1261\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.9134\nEpoch 23: val_loss did not improve from 10.12607\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.9227 - val_loss: 12.6673\nEpoch 24/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 13.7527\nEpoch 24: val_loss did not improve from 10.12607\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 13.7610 - val_loss: 15.4141\nEpoch 25/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 16.1357\nEpoch 25: val_loss did not improve from 10.12607\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 16.1061 - val_loss: 12.4393\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.4812\nEpoch 26: val_loss improved from 10.12607 to 9.46862, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 11.4392 - val_loss: 9.4686\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.9606\nEpoch 27: val_loss improved from 9.46862 to 8.34812, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - loss: 8.9599 - val_loss: 8.3481\nEpoch 28/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.7955\nEpoch 28: val_loss improved from 8.34812 to 8.11386, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 8.7964 - val_loss: 8.1139\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.3934\nEpoch 29: val_loss improved from 8.11386 to 8.06012, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 8.3965 - val_loss: 8.0601\nEpoch 30/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.0720\nEpoch 30: val_loss improved from 8.06012 to 7.74490, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 8.0731 - val_loss: 7.7449\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.9117\nEpoch 31: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.9165 - val_loss: 8.2814\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.7243\nEpoch 32: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.7320 - val_loss: 9.6027\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.6398\nEpoch 33: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 10.6199 - val_loss: 9.2619\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.2165\nEpoch 34: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 12.1362 - val_loss: 10.2507\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.0562\nEpoch 35: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.0449 - val_loss: 10.9417\nEpoch 36/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.2418\nEpoch 36: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 8.2263 - val_loss: 10.6550\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.8361\nEpoch 37: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 7.8162 - val_loss: 9.6586\nEpoch 38/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 7.2114\nEpoch 38: val_loss did not improve from 7.74490\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 7.2071 - val_loss: 8.4940\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.6517\nEpoch 39: val_loss improved from 7.74490 to 7.61186, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 6.6455 - val_loss: 7.6119\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.4049\nEpoch 40: val_loss improved from 7.61186 to 7.49319, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 6.4051 - val_loss: 7.4932\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.4843\nEpoch 41: val_loss did not improve from 7.49319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 6.4847 - val_loss: 7.6439\nEpoch 42/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.6268\nEpoch 42: val_loss did not improve from 7.49319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 6.6240 - val_loss: 7.6716\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.5831\nEpoch 43: val_loss improved from 7.49319 to 7.10199, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 6.5585 - val_loss: 7.1020\nEpoch 44/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 5.9341\nEpoch 44: val_loss improved from 7.10199 to 6.31973, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step - loss: 5.9253 - val_loss: 6.3197\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.2224\nEpoch 45: val_loss improved from 6.31973 to 5.90838, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 5.2183 - val_loss: 5.9084\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.8891\nEpoch 46: val_loss improved from 5.90838 to 5.22592, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 4.8859 - val_loss: 5.2259\nEpoch 47/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 4.4464\nEpoch 47: val_loss improved from 5.22592 to 5.10601, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - loss: 4.4461 - val_loss: 5.1060\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 4.3739\nEpoch 48: val_loss improved from 5.10601 to 4.28635, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 4.3726 - val_loss: 4.2864\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.0899\nEpoch 49: val_loss did not improve from 4.28635\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 4.1035 - val_loss: 9.3197\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.7439\nEpoch 50: val_loss did not improve from 4.28635\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 12.6961 - val_loss: 8.6429\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 215ms/step\n2025/02/20 08:11:29 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpvxq4s2j6/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n2025/02/20 08:11:36 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 08:11:44 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmps53a8vef/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 08:11:44 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run thoughtful-perch-339 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/9ccba731690245888c2ee91e9685fd2d\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [191  49 156 102  76 114  63  37  85  50  52  64  67 112  42  41  44  54\n  46  40  66  62  53  47  68]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 3 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807   120    32     0     2     0  ...    37   354    15     0     0     1     0\n2.0      0   162   364    25     0     2     0  ...    17   184    25     0     0     0     0\n3.0      0    38    73   102     1     0     0  ...     1     4     2     0     0     0     0\n4.0      1     0     9    14   409     1     0  ...     7    12     4     0     3     1     0\n5.0      0     5     0     2     3   646     0  ...     1     2     0     0     2    32     0\n6.0      0     0     0     2     1     0     0  ...     1     2     0     0     0     0     0\n7.0      0     0     0     0    10     0     0  ...     0     1     0     0     0     0     0\n8.0      0    15     0     0     0     2     0  ...     0     0     0     1     2     0     0\n9.0      0    79    37     5     0     4     0  ...   322   446    31     0     0     0     0\n10.0     0   246    83    17    10    10     0  ...   121  1821    17     0     1     2     0\n11.0     0    45    63    19     2     3     0  ...    26   123   285     0     0     1     0\n12.0     0     7     0     0     0     1     0  ...     0     0     0   188     0     0     0\n13.0     0     0     0     0    15     1     0  ...     0     0     1     9  1119    57     0\n14.0     1    29    11     4    32    23     0  ...     1     0     1    24    66   166     0\n15.0     0    12     5     0     0     0     0  ...     0     0     1     0     0     0    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807    22     5     2     4     0  ...   109   400     4     0     0     0     3\n2.0      0    27   474    25     0     0     0  ...     1   254    13     0     0     0     0\n3.0      0    10    35   158     0    12     1  ...     2     3     0     0     0     0     0\n4.0      0     2     0     5   423    15     1  ...     0     5     1     0     7     0     0\n5.0      0     0     0     0     4   648     0  ...     0     1     0     0     1    35     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      3     0     0     0     0     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0   154     1     2    12     2     0  ...   488   261     9     0     0     0     0\n10.0     0   176    65    13     8    13     1  ...    55  1948    36     0     0     5     0\n11.0     0    28    55    21     0     5     0  ...     3    47   404     0     0     1     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    22     4     0  ...     0     0     0     2  1130    49     0\n14.0     0     0     0     2    36    49     0  ...     1     0     0    31    79   168     1\n15.0     0     1     0     0     0     0     0  ...     3     6     2     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     13     0     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   785    33    24     3     5     0  ...    63   401    28     0     0     2     1\n2.0      0   119   328    17     0     3     0  ...    32   223    72     0     0     0     0\n3.0      0    61    10    54     1    28     0  ...     5    39    29     0     0     0     0\n4.0      8     1     0     3   395     9     0  ...     0     4     5     0    21     9     0\n5.0      0     0     0     2    10   631     0  ...     2     3     0     1    15    31     0\n6.0      1     0     0     0     5     0    10  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     0     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     5     0  ...     0     0     0     1     0     2     0\n9.0      0    91    18     3    11     2     0  ...   183   605    11     0     0     1     0\n10.0     0   227    77    14     9    11     1  ...   101  1793    80     0     0    13     4\n11.0     0   163    28    17     0     9     0  ...    14   110   214     0     0     1     0\n12.0     0     0     0     1     0     1     0  ...     0     0     0   185     0     6     0\n13.0     0     0     0     0    19     2     0  ...     0     0     0     4  1161    18     0\n14.0     1     2     0     1    18    79     0  ...     1     1     4    13   116   125     1\n15.0     0     1     7     0     0     1     0  ...     1     5     2     0     0     1    69\n\n[16 rows x 16 columns]\n🏃 View run upset-mole-522 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/31af2612736d44ec9cbb47b7c19ec587\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results2.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.692513          0.573164           0.644891\n1    2          0.762247          0.732325           0.726264\n2    3          0.658724          0.602521           0.603915\n\nAverage Performance Over 3 Runs:\nOverall Accuracy: 0.7045\nAverage Accuracy: 0.6360\nKappa Coefficient: 0.6584\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_3 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 45.8529\nEpoch 1: val_loss improved from inf to 26.92711, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 40ms/step - loss: 45.6841 - val_loss: 26.9271\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 26.6645\nEpoch 2: val_loss improved from 26.92711 to 24.50576, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - loss: 26.6582 - val_loss: 24.5058\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 24.4334\nEpoch 3: val_loss improved from 24.50576 to 23.68552, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 24.4336 - val_loss: 23.6855\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 23.8784\nEpoch 4: val_loss did not improve from 23.68552\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 23.8742 - val_loss: 24.9459\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 24.3458\nEpoch 5: val_loss did not improve from 23.68552\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 24.3469 - val_loss: 26.8533\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 25.4876\nEpoch 6: val_loss improved from 23.68552 to 23.07998, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 25.4763 - val_loss: 23.0800\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 27.0397\nEpoch 7: val_loss improved from 23.07998 to 20.95987, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 26.9960 - val_loss: 20.9599\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 22.4802\nEpoch 8: val_loss did not improve from 20.95987\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 22.5169 - val_loss: 23.1907\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 20.9283\nEpoch 9: val_loss improved from 20.95987 to 19.13032, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 20.9175 - val_loss: 19.1303\nEpoch 10/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 19.1636\nEpoch 10: val_loss improved from 19.13032 to 18.75020, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 19.1644 - val_loss: 18.7502\nEpoch 11/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 18.3399\nEpoch 11: val_loss improved from 18.75020 to 18.18208, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 18.3416 - val_loss: 18.1821\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 17.8498\nEpoch 12: val_loss improved from 18.18208 to 17.94146, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 17.8588 - val_loss: 17.9415\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 17.6982\nEpoch 13: val_loss improved from 17.94146 to 17.48998, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 17.7098 - val_loss: 17.4900\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 17.8977\nEpoch 14: val_loss improved from 17.48998 to 16.64710, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 17.8997 - val_loss: 16.6471\nEpoch 15/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 16.5615\nEpoch 15: val_loss improved from 16.64710 to 16.03533, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 16.5596 - val_loss: 16.0353\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 15.1680\nEpoch 16: val_loss did not improve from 16.03533\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 31ms/step - loss: 15.1839 - val_loss: 16.7215\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 16.5801\nEpoch 17: val_loss improved from 16.03533 to 14.10261, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step - loss: 16.6135 - val_loss: 14.1026\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 17.8028\nEpoch 18: val_loss improved from 14.10261 to 13.33624, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 17.7355 - val_loss: 13.3362\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.4332\nEpoch 19: val_loss improved from 13.33624 to 12.68122, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 13.4327 - val_loss: 12.6812\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.9776\nEpoch 20: val_loss improved from 12.68122 to 11.85759, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 12.9657 - val_loss: 11.8576\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.1562\nEpoch 21: val_loss improved from 11.85759 to 11.49685, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 12.1543 - val_loss: 11.4969\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.9995\nEpoch 22: val_loss improved from 11.49685 to 11.04361, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 11.9965 - val_loss: 11.0436\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 11.8328\nEpoch 23: val_loss improved from 11.04361 to 10.43983, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 11.8251 - val_loss: 10.4398\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 11.4076\nEpoch 24: val_loss improved from 10.43983 to 9.91596, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 11.3984 - val_loss: 9.9160\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.8313\nEpoch 25: val_loss improved from 9.91596 to 9.53619, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 10.8239 - val_loss: 9.5362\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.3916\nEpoch 26: val_loss improved from 9.53619 to 9.18866, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 10.3853 - val_loss: 9.1887\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.9642\nEpoch 27: val_loss improved from 9.18866 to 8.80457, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 9.9578 - val_loss: 8.8046\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.5172\nEpoch 28: val_loss improved from 8.80457 to 8.46539, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 9.5113 - val_loss: 8.4654\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.0716\nEpoch 29: val_loss improved from 8.46539 to 8.22216, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 9.0665 - val_loss: 8.2222\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.6364\nEpoch 30: val_loss improved from 8.22216 to 8.04229, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 8.6320 - val_loss: 8.0423\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.1949\nEpoch 31: val_loss improved from 8.04229 to 7.86294, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 8.1908 - val_loss: 7.8629\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.7307\nEpoch 32: val_loss improved from 7.86294 to 7.66937, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 7.7271 - val_loss: 7.6694\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.2820\nEpoch 33: val_loss improved from 7.66937 to 7.49179, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 7.2797 - val_loss: 7.4918\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.2061\nEpoch 34: val_loss did not improve from 7.49179\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 7.2079 - val_loss: 7.9576\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.0414\nEpoch 35: val_loss did not improve from 7.49179\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.0598 - val_loss: 8.9121\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.3358\nEpoch 36: val_loss did not improve from 7.49179\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.3401 - val_loss: 9.6290\nEpoch 37/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.4870\nEpoch 37: val_loss improved from 7.49179 to 6.70329, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step - loss: 9.4768 - val_loss: 6.7033\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.5286\nEpoch 38: val_loss improved from 6.70329 to 5.75820, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step - loss: 7.5215 - val_loss: 5.7582\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.9158\nEpoch 39: val_loss improved from 5.75820 to 5.37461, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 6.9091 - val_loss: 5.3746\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.0708\nEpoch 40: val_loss did not improve from 5.37461\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 6.0672 - val_loss: 5.6404\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.7376\nEpoch 41: val_loss did not improve from 5.37461\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 5.7340 - val_loss: 5.9175\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.2105\nEpoch 42: val_loss did not improve from 5.37461\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 5.2088 - val_loss: 6.1034\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.8352\nEpoch 43: val_loss did not improve from 5.37461\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 4.8365 - val_loss: 6.0809\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.5907\nEpoch 44: val_loss improved from 5.37461 to 5.19066, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - loss: 4.5921 - val_loss: 5.1907\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.8533\nEpoch 45: val_loss did not improve from 5.19066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 4.8646 - val_loss: 5.2801\nEpoch 46/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.0981\nEpoch 46: val_loss did not improve from 5.19066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 5.1128 - val_loss: 9.7512\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.3125\nEpoch 47: val_loss did not improve from 5.19066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - loss: 9.3297 - val_loss: 8.1369\nEpoch 48/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.8103\nEpoch 48: val_loss did not improve from 5.19066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 5.8201 - val_loss: 5.8152\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.6004\nEpoch 49: val_loss improved from 5.19066 to 4.79511, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 6.5914 - val_loss: 4.7951\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.4510\nEpoch 50: val_loss did not improve from 4.79511\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 4.4482 - val_loss: 5.2181\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 215ms/step\n2025/02/20 08:15:43 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpy6er0e_3/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n2025/02/20 08:15:50 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 08:15:58 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpsn7_f5m0/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 08:15:58 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run zealous-mouse-166 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/a91f123bc2d14aa498b00b1ac539172f\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 42  62  71 155 166 190  22 183 174 139 112 148 100  45 106  49  94  66\n  68  54  51  41 152  36  40]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 4 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807   120    32     0     2     0  ...    37   354    15     0     0     1     0\n2.0      0   162   364    25     0     2     0  ...    17   184    25     0     0     0     0\n3.0      0    38    73   102     1     0     0  ...     1     4     2     0     0     0     0\n4.0      1     0     9    14   409     1     0  ...     7    12     4     0     3     1     0\n5.0      0     5     0     2     3   646     0  ...     1     2     0     0     2    32     0\n6.0      0     0     0     2     1     0     0  ...     1     2     0     0     0     0     0\n7.0      0     0     0     0    10     0     0  ...     0     1     0     0     0     0     0\n8.0      0    15     0     0     0     2     0  ...     0     0     0     1     2     0     0\n9.0      0    79    37     5     0     4     0  ...   322   446    31     0     0     0     0\n10.0     0   246    83    17    10    10     0  ...   121  1821    17     0     1     2     0\n11.0     0    45    63    19     2     3     0  ...    26   123   285     0     0     1     0\n12.0     0     7     0     0     0     1     0  ...     0     0     0   188     0     0     0\n13.0     0     0     0     0    15     1     0  ...     0     0     1     9  1119    57     0\n14.0     1    29    11     4    32    23     0  ...     1     0     1    24    66   166     0\n15.0     0    12     5     0     0     0     0  ...     0     0     1     0     0     0    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807    22     5     2     4     0  ...   109   400     4     0     0     0     3\n2.0      0    27   474    25     0     0     0  ...     1   254    13     0     0     0     0\n3.0      0    10    35   158     0    12     1  ...     2     3     0     0     0     0     0\n4.0      0     2     0     5   423    15     1  ...     0     5     1     0     7     0     0\n5.0      0     0     0     0     4   648     0  ...     0     1     0     0     1    35     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      3     0     0     0     0     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0   154     1     2    12     2     0  ...   488   261     9     0     0     0     0\n10.0     0   176    65    13     8    13     1  ...    55  1948    36     0     0     5     0\n11.0     0    28    55    21     0     5     0  ...     3    47   404     0     0     1     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    22     4     0  ...     0     0     0     2  1130    49     0\n14.0     0     0     0     2    36    49     0  ...     1     0     0    31    79   168     1\n15.0     0     1     0     0     0     0     0  ...     3     6     2     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     13     0     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   785    33    24     3     5     0  ...    63   401    28     0     0     2     1\n2.0      0   119   328    17     0     3     0  ...    32   223    72     0     0     0     0\n3.0      0    61    10    54     1    28     0  ...     5    39    29     0     0     0     0\n4.0      8     1     0     3   395     9     0  ...     0     4     5     0    21     9     0\n5.0      0     0     0     2    10   631     0  ...     2     3     0     1    15    31     0\n6.0      1     0     0     0     5     0    10  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     0     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     5     0  ...     0     0     0     1     0     2     0\n9.0      0    91    18     3    11     2     0  ...   183   605    11     0     0     1     0\n10.0     0   227    77    14     9    11     1  ...   101  1793    80     0     0    13     4\n11.0     0   163    28    17     0     9     0  ...    14   110   214     0     0     1     0\n12.0     0     0     0     1     0     1     0  ...     0     0     0   185     0     6     0\n13.0     0     0     0     0    19     2     0  ...     0     0     0     4  1161    18     0\n14.0     1     2     0     1    18    79     0  ...     1     1     4    13   116   125     1\n15.0     0     1     7     0     0     1     0  ...     1     5     2     0     0     1    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     25     0     0     0     0     0     0  ...     0     0     1     0     0     0     0\n1.0      0   910    34    26     2     0     1  ...    97   269    12     1     0     1     0\n2.0      0    97   487    18     0     0     0  ...    18   162    14     0     0     0     0\n3.0      3     8    50   121     0     2     0  ...     6    21    13     0     0     5     0\n4.0     13     0     0     4   362    20     1  ...    10     3     7     0    10    32     0\n5.0      0     0     0    17     5   611     0  ...     5    21     0     0     1    35     0\n6.0      3     0     0     0     0     0    15  ...     0     0     0     0     0     0     0\n7.0     21     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     3     0  ...     0     1     0     1     0    14     0\n9.0      0    93     8     0     0     1     0  ...   694   104    17     0     0     0     0\n10.0     0   215    91     2     1     0     0  ...   221  1753    37     0     0    10     0\n11.0     0    39    37     3     0     0     0  ...    33    52   394     0     0     2     0\n12.0     0     0     0     0     0     0     0  ...     0     2     0   190     0     0     0\n13.0     0     0     0     0    34     1     0  ...     0     0     0     2  1137    28     0\n14.0     0     1     0     0    13    35     0  ...     4     3     3    21    98   186     0\n15.0     0     8     0     0     0     0     0  ...     5     3     1     0     0     0    70\n\n[16 rows x 16 columns]\n🏃 View run peaceful-rook-774 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/6347fa32209b49b78952094696d9f06a\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results3.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.692513          0.573164           0.644891\n1    2          0.762247          0.732325           0.726264\n2    3          0.658724          0.602521           0.603915\n3    4          0.758550          0.689539           0.724014\n\nAverage Performance Over 4 Runs:\nOverall Accuracy: 0.7180\nAverage Accuracy: 0.6494\nKappa Coefficient: 0.6748\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_4 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 34.7961\nEpoch 1: val_loss improved from inf to 32.51965, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 40ms/step - loss: 34.7511 - val_loss: 32.5196\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 27.7845\nEpoch 2: val_loss improved from 32.51965 to 31.27297, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - loss: 27.7773 - val_loss: 31.2730\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 26.6051\nEpoch 3: val_loss improved from 31.27297 to 28.50010, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 26.5909 - val_loss: 28.5001\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 25.6901\nEpoch 4: val_loss improved from 28.50010 to 25.97332, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 25.6775 - val_loss: 25.9733\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 24.4936\nEpoch 5: val_loss improved from 25.97332 to 25.27681, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 24.4930 - val_loss: 25.2768\nEpoch 6/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 23.7160\nEpoch 6: val_loss did not improve from 25.27681\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 23.7198 - val_loss: 28.3519\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 23.3288\nEpoch 7: val_loss improved from 25.27681 to 24.45802, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step - loss: 23.3262 - val_loss: 24.4580\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 22.8150\nEpoch 8: val_loss improved from 24.45802 to 22.93473, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 22.8073 - val_loss: 22.9347\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 22.5234\nEpoch 9: val_loss improved from 22.93473 to 21.68092, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 22.5486 - val_loss: 21.6809\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 22.0876\nEpoch 10: val_loss did not improve from 21.68092\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 22.1180 - val_loss: 26.7673\nEpoch 11/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 24.1735\nEpoch 11: val_loss did not improve from 21.68092\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 24.1746 - val_loss: 22.9223\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 26.0326\nEpoch 12: val_loss improved from 21.68092 to 18.85341, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 26.0206 - val_loss: 18.8534\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 18.8317\nEpoch 13: val_loss improved from 18.85341 to 18.41088, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 18.8389 - val_loss: 18.4109\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 18.1941\nEpoch 14: val_loss improved from 18.41088 to 17.24203, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 18.2002 - val_loss: 17.2420\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 17.0761\nEpoch 15: val_loss improved from 17.24203 to 16.49190, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 17.0793 - val_loss: 16.4919\nEpoch 16/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 16.4298\nEpoch 16: val_loss improved from 16.49190 to 15.65657, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 16.4332 - val_loss: 15.6566\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.6277\nEpoch 17: val_loss improved from 15.65657 to 15.18581, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 15.6274 - val_loss: 15.1858\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 14.9512\nEpoch 18: val_loss improved from 15.18581 to 15.10944, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 14.9476 - val_loss: 15.1094\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 14.5006\nEpoch 19: val_loss did not improve from 15.10944\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 14.4953 - val_loss: 16.0375\nEpoch 20/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 14.4938\nEpoch 20: val_loss did not improve from 15.10944\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 14.4907 - val_loss: 18.8418\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 14.3726\nEpoch 21: val_loss did not improve from 15.10944\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 14.3579 - val_loss: 17.1268\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 14.4543\nEpoch 22: val_loss improved from 15.10944 to 14.75201, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - loss: 14.4462 - val_loss: 14.7520\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.2392\nEpoch 23: val_loss improved from 14.75201 to 12.47233, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step - loss: 13.2497 - val_loss: 12.4723\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.7679\nEpoch 24: val_loss did not improve from 12.47233\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 12.7748 - val_loss: 12.7514\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 11.6326\nEpoch 25: val_loss improved from 12.47233 to 12.00260, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - loss: 11.6295 - val_loss: 12.0026\nEpoch 26/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.1671\nEpoch 26: val_loss improved from 12.00260 to 11.47907, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 11.1610 - val_loss: 11.4791\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.6370\nEpoch 27: val_loss did not improve from 11.47907\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 10.6303 - val_loss: 12.0104\nEpoch 28/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 10.5326\nEpoch 28: val_loss did not improve from 11.47907\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - loss: 10.5294 - val_loss: 14.2378\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 11.0906\nEpoch 29: val_loss did not improve from 11.47907\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 11.0718 - val_loss: 13.6877\nEpoch 30/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 10.6506\nEpoch 30: val_loss improved from 11.47907 to 10.64275, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 52ms/step - loss: 10.6541 - val_loss: 10.6428\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.0679\nEpoch 31: val_loss did not improve from 10.64275\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 10.0588 - val_loss: 10.8768\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.1061\nEpoch 32: val_loss improved from 10.64275 to 8.97001, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 36ms/step - loss: 10.0864 - val_loss: 8.9700\nEpoch 33/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 8.5085\nEpoch 33: val_loss improved from 8.97001 to 8.78157, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 36ms/step - loss: 8.5071 - val_loss: 8.7816\nEpoch 34/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.0129\nEpoch 34: val_loss improved from 8.78157 to 8.41433, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 36ms/step - loss: 8.0129 - val_loss: 8.4143\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.1792\nEpoch 35: val_loss did not improve from 8.41433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 8.1816 - val_loss: 9.4667\nEpoch 36/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 8.3414\nEpoch 36: val_loss did not improve from 8.41433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 8.3575 - val_loss: 18.5097\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.0030\nEpoch 37: val_loss did not improve from 8.41433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 10.9769 - val_loss: 9.3853\nEpoch 38/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.0273\nEpoch 38: val_loss did not improve from 8.41433\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.0356 - val_loss: 9.9630\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.1417\nEpoch 39: val_loss improved from 8.41433 to 8.02539, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - loss: 8.1441 - val_loss: 8.0254\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.0999\nEpoch 40: val_loss improved from 8.02539 to 6.61366, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 7.0921 - val_loss: 6.6137\nEpoch 41/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.4126\nEpoch 41: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 6.4341 - val_loss: 10.7797\nEpoch 42/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 8.0783\nEpoch 42: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 31ms/step - loss: 8.0511 - val_loss: 7.1838\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.6451\nEpoch 43: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.6699 - val_loss: 7.8792\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.0998\nEpoch 44: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 7.1020 - val_loss: 9.7713\nEpoch 45/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.4226\nEpoch 45: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 7.4142 - val_loss: 9.3598\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.0667\nEpoch 46: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.0524 - val_loss: 7.1763\nEpoch 47/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.2592\nEpoch 47: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.2730 - val_loss: 6.8878\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.0665\nEpoch 48: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.0948 - val_loss: 12.7828\nEpoch 49/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.9082\nEpoch 49: val_loss did not improve from 6.61366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.8983 - val_loss: 6.9925\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.2346\nEpoch 50: val_loss improved from 6.61366 to 6.28121, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 6.2380 - val_loss: 6.2812\nWARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x79d19b298a40> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nWARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x79d19b298a40> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 219ms/step\n2025/02/20 08:19:45 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpdiyl98or/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n2025/02/20 08:19:52 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 08:20:00 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpp0bnqfuv/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 08:20:00 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run redolent-turtle-350 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/b66dc262c20c436a95043f6ba4df6e10\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nWARNING:tensorflow:5 out of the last 5 calls to <function pfor.<locals>.f at 0x79d1f2c0b2e0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nWARNING:tensorflow:5 out of the last 5 calls to <function pfor.<locals>.f at 0x79d1f2c0b2e0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nSelected number of bands:  25\n======Selected band indices ======= \n [120 183 161 128  64 178  43 106  13  70  46  98  69 132 147  51  72  49\n  58  62  63  92  66 188  68]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}\nThe model shall evaluate for 5 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807   120    32     0     2     0  ...    37   354    15     0     0     1     0\n2.0      0   162   364    25     0     2     0  ...    17   184    25     0     0     0     0\n3.0      0    38    73   102     1     0     0  ...     1     4     2     0     0     0     0\n4.0      1     0     9    14   409     1     0  ...     7    12     4     0     3     1     0\n5.0      0     5     0     2     3   646     0  ...     1     2     0     0     2    32     0\n6.0      0     0     0     2     1     0     0  ...     1     2     0     0     0     0     0\n7.0      0     0     0     0    10     0     0  ...     0     1     0     0     0     0     0\n8.0      0    15     0     0     0     2     0  ...     0     0     0     1     2     0     0\n9.0      0    79    37     5     0     4     0  ...   322   446    31     0     0     0     0\n10.0     0   246    83    17    10    10     0  ...   121  1821    17     0     1     2     0\n11.0     0    45    63    19     2     3     0  ...    26   123   285     0     0     1     0\n12.0     0     7     0     0     0     1     0  ...     0     0     0   188     0     0     0\n13.0     0     0     0     0    15     1     0  ...     0     0     1     9  1119    57     0\n14.0     1    29    11     4    32    23     0  ...     1     0     1    24    66   166     0\n15.0     0    12     5     0     0     0     0  ...     0     0     1     0     0     0    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807    22     5     2     4     0  ...   109   400     4     0     0     0     3\n2.0      0    27   474    25     0     0     0  ...     1   254    13     0     0     0     0\n3.0      0    10    35   158     0    12     1  ...     2     3     0     0     0     0     0\n4.0      0     2     0     5   423    15     1  ...     0     5     1     0     7     0     0\n5.0      0     0     0     0     4   648     0  ...     0     1     0     0     1    35     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      3     0     0     0     0     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0   154     1     2    12     2     0  ...   488   261     9     0     0     0     0\n10.0     0   176    65    13     8    13     1  ...    55  1948    36     0     0     5     0\n11.0     0    28    55    21     0     5     0  ...     3    47   404     0     0     1     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    22     4     0  ...     0     0     0     2  1130    49     0\n14.0     0     0     0     2    36    49     0  ...     1     0     0    31    79   168     1\n15.0     0     1     0     0     0     0     0  ...     3     6     2     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     13     0     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   785    33    24     3     5     0  ...    63   401    28     0     0     2     1\n2.0      0   119   328    17     0     3     0  ...    32   223    72     0     0     0     0\n3.0      0    61    10    54     1    28     0  ...     5    39    29     0     0     0     0\n4.0      8     1     0     3   395     9     0  ...     0     4     5     0    21     9     0\n5.0      0     0     0     2    10   631     0  ...     2     3     0     1    15    31     0\n6.0      1     0     0     0     5     0    10  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     0     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     5     0  ...     0     0     0     1     0     2     0\n9.0      0    91    18     3    11     2     0  ...   183   605    11     0     0     1     0\n10.0     0   227    77    14     9    11     1  ...   101  1793    80     0     0    13     4\n11.0     0   163    28    17     0     9     0  ...    14   110   214     0     0     1     0\n12.0     0     0     0     1     0     1     0  ...     0     0     0   185     0     6     0\n13.0     0     0     0     0    19     2     0  ...     0     0     0     4  1161    18     0\n14.0     1     2     0     1    18    79     0  ...     1     1     4    13   116   125     1\n15.0     0     1     7     0     0     1     0  ...     1     5     2     0     0     1    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     25     0     0     0     0     0     0  ...     0     0     1     0     0     0     0\n1.0      0   910    34    26     2     0     1  ...    97   269    12     1     0     1     0\n2.0      0    97   487    18     0     0     0  ...    18   162    14     0     0     0     0\n3.0      3     8    50   121     0     2     0  ...     6    21    13     0     0     5     0\n4.0     13     0     0     4   362    20     1  ...    10     3     7     0    10    32     0\n5.0      0     0     0    17     5   611     0  ...     5    21     0     0     1    35     0\n6.0      3     0     0     0     0     0    15  ...     0     0     0     0     0     0     0\n7.0     21     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     3     0  ...     0     1     0     1     0    14     0\n9.0      0    93     8     0     0     1     0  ...   694   104    17     0     0     0     0\n10.0     0   215    91     2     1     0     0  ...   221  1753    37     0     0    10     0\n11.0     0    39    37     3     0     0     0  ...    33    52   394     0     0     2     0\n12.0     0     0     0     0     0     0     0  ...     0     2     0   190     0     0     0\n13.0     0     0     0     0    34     1     0  ...     0     0     0     2  1137    28     0\n14.0     0     1     0     0    13    35     0  ...     4     3     3    21    98   186     0\n15.0     0     8     0     0     0     0     0  ...     5     3     1     0     0     0    70\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     25     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   938    26    25     3     2     0  ...    96   219    41     0     0     0     0\n2.0      0    43   473    28     1     1     0  ...    14   161    69     0     0     0     0\n3.0      0    34    40    76     8    13     0  ...     5    32    18     0     0     0     0\n4.0     10     0     0     8   403     9     1  ...     2     2     7     0    10     2     0\n5.0      0     0     0     0    14   655     0  ...     0     8     0     0     8     8     0\n6.0      1     0     0     0     0     0    19  ...     0     0     0     0     0     0     0\n7.0     22     0     0     1     1     0    52  ...     6     0     0     0     0     0     0\n8.0      0     0     0     0     0     3     0  ...     0     0     0     0     0     0     0\n9.0      1   131    16    14     2     3     0  ...   577   178    11     0     0     0     0\n10.0     1   275    93    11     7     8     1  ...    95  1769    47     0     0     1     0\n11.0     0    34    53    18     2     2     0  ...    16    49   384     0     0     0     0\n12.0     0     0     0     0     0    16     0  ...     0     1     0   179     0     0     0\n13.0     0     0     0     0    31    11     0  ...     0     3     0     3  1114    41     0\n14.0     0     3     0     2    31   112     0  ...     0    11     2    28    85    94     0\n15.0     0     4     4     0     1     0     0  ...     4     5    10     0     0     0    61\n\n[16 rows x 16 columns]\n🏃 View run thoughtful-gnu-585 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/7e5981a99fb44d278315f91d7c21a13a\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results4.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.692513          0.573164           0.644891\n1    2          0.762247          0.732325           0.726264\n2    3          0.658724          0.602521           0.603915\n3    4          0.758550          0.689539           0.724014\n4    5          0.735750          0.703752           0.697943\n\nAverage Performance Over 5 Runs:\nOverall Accuracy: 0.7216\nAverage Accuracy: 0.6603\nKappa Coefficient: 0.6794\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_5 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 45.7480\nEpoch 1: val_loss improved from inf to 25.97880, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 50ms/step - loss: 45.5240 - val_loss: 25.9788\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 25.7866\nEpoch 2: val_loss improved from 25.97880 to 24.78284, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 42ms/step - loss: 25.7840 - val_loss: 24.7828\nEpoch 3/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 24.8213\nEpoch 3: val_loss improved from 24.78284 to 24.22105, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 24.8171 - val_loss: 24.2210\nEpoch 4/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - loss: 24.0128\nEpoch 4: val_loss improved from 24.22105 to 23.02879, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 44ms/step - loss: 24.0086 - val_loss: 23.0288\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 23.2749\nEpoch 5: val_loss did not improve from 23.02879\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 23.2827 - val_loss: 30.5161\nEpoch 6/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 30.9851\nEpoch 6: val_loss did not improve from 23.02879\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 31.0335 - val_loss: 24.4146\nEpoch 7/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 25.4884\nEpoch 7: val_loss improved from 23.02879 to 21.20369, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - loss: 25.4788 - val_loss: 21.2037\nEpoch 8/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 21.3839\nEpoch 8: val_loss improved from 21.20369 to 20.40245, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 52ms/step - loss: 21.3786 - val_loss: 20.4024\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 20.4652\nEpoch 9: val_loss improved from 20.40245 to 19.51162, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 20.4570 - val_loss: 19.5116\nEpoch 10/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 19.5649\nEpoch 10: val_loss improved from 19.51162 to 19.21368, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 19.5631 - val_loss: 19.2137\nEpoch 11/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 18.9006\nEpoch 11: val_loss improved from 19.21368 to 18.28350, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - loss: 18.8976 - val_loss: 18.2835\nEpoch 12/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 18.0922\nEpoch 12: val_loss improved from 18.28350 to 17.55542, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 18.0880 - val_loss: 17.5554\nEpoch 13/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 17.3761\nEpoch 13: val_loss improved from 17.55542 to 16.55915, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 17.3771 - val_loss: 16.5591\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 16.8099\nEpoch 14: val_loss did not improve from 16.55915\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 16.8652 - val_loss: 37.8800\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 27.8037\nEpoch 15: val_loss did not improve from 16.55915\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 27.6918 - val_loss: 17.3544\nEpoch 16/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 18.8251\nEpoch 16: val_loss improved from 16.55915 to 15.50340, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 35ms/step - loss: 18.8201 - val_loss: 15.5034\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 15.8616\nEpoch 17: val_loss improved from 15.50340 to 14.49141, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 15.8490 - val_loss: 14.4914\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 14.6100\nEpoch 18: val_loss improved from 14.49141 to 13.75304, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step - loss: 14.6050 - val_loss: 13.7530\nEpoch 19/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 13.8611\nEpoch 19: val_loss improved from 13.75304 to 13.28921, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 13.8596 - val_loss: 13.2892\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 13.0821\nEpoch 20: val_loss improved from 13.28921 to 12.74297, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 13.0788 - val_loss: 12.7430\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.4864\nEpoch 21: val_loss improved from 12.74297 to 11.92174, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 12.4836 - val_loss: 11.9217\nEpoch 22/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 11.9756\nEpoch 22: val_loss improved from 11.92174 to 11.66687, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 11.9721 - val_loss: 11.6669\nEpoch 23/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 11.5747\nEpoch 23: val_loss did not improve from 11.66687\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 11.5965 - val_loss: 19.6844\nEpoch 24/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 18.2571\nEpoch 24: val_loss did not improve from 11.66687\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 18.2501 - val_loss: 15.3886\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 13.8368\nEpoch 25: val_loss improved from 11.66687 to 11.33516, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 13.8179 - val_loss: 11.3352\nEpoch 26/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.7134\nEpoch 26: val_loss improved from 11.33516 to 10.12238, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - loss: 10.7090 - val_loss: 10.1224\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.8827\nEpoch 27: val_loss improved from 10.12238 to 9.93773, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 49ms/step - loss: 9.8814 - val_loss: 9.9377\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.6046\nEpoch 28: val_loss improved from 9.93773 to 9.07744, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 9.6068 - val_loss: 9.0774\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.9256\nEpoch 29: val_loss improved from 9.07744 to 8.59510, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step - loss: 8.9261 - val_loss: 8.5951\nEpoch 30/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.4650\nEpoch 30: val_loss did not improve from 8.59510\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 8.4663 - val_loss: 8.8193\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.5984\nEpoch 31: val_loss did not improve from 8.59510\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.6044 - val_loss: 11.1784\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.3300\nEpoch 32: val_loss did not improve from 8.59510\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 10.3873 - val_loss: 17.4211\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.3218\nEpoch 33: val_loss did not improve from 8.59510\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 12.3097 - val_loss: 14.9074\nEpoch 34/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 10.2460\nEpoch 34: val_loss improved from 8.59510 to 7.57646, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 10.2208 - val_loss: 7.5765\nEpoch 35/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 7.2782\nEpoch 35: val_loss did not improve from 7.57646\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - loss: 7.2828 - val_loss: 9.3998\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.0675\nEpoch 36: val_loss improved from 7.57646 to 7.02979, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 8.0672 - val_loss: 7.0298\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.6913\nEpoch 37: val_loss did not improve from 7.02979\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.7077 - val_loss: 10.6509\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.8387\nEpoch 38: val_loss did not improve from 7.02979\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.8422 - val_loss: 9.2819\nEpoch 39/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.8643\nEpoch 39: val_loss did not improve from 7.02979\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 7.8750 - val_loss: 15.0781\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 9.8400\nEpoch 40: val_loss did not improve from 7.02979\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.8085 - val_loss: 7.7164\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.9070\nEpoch 41: val_loss did not improve from 7.02979\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.9063 - val_loss: 7.6222\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.0553\nEpoch 42: val_loss improved from 7.02979 to 5.39111, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step - loss: 6.0472 - val_loss: 5.3911\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.2786\nEpoch 43: val_loss improved from 5.39111 to 4.91555, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 5.2775 - val_loss: 4.9156\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.1894\nEpoch 44: val_loss did not improve from 4.91555\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 5.2315 - val_loss: 15.1840\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 13.2136\nEpoch 45: val_loss did not improve from 4.91555\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - loss: 13.1870 - val_loss: 8.7728\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 8.5021\nEpoch 46: val_loss did not improve from 4.91555\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 8.4611 - val_loss: 6.5142\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 5.5376\nEpoch 47: val_loss did not improve from 4.91555\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 5.5279 - val_loss: 5.3568\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 4.6776\nEpoch 48: val_loss improved from 4.91555 to 4.30218, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 35ms/step - loss: 4.6750 - val_loss: 4.3022\nEpoch 49/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 4.2847\nEpoch 49: val_loss did not improve from 4.30218\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 4.3038 - val_loss: 7.3385\nEpoch 50/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 7.1204\nEpoch 50: val_loss did not improve from 4.30218\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 7.1306 - val_loss: 15.3510\nWARNING:tensorflow:6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x79d19b1953a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nWARNING:tensorflow:6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x79d19b1953a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 216ms/step\n2025/02/20 08:23:52 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpw3or0t3n/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n2025/02/20 08:23:58 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 08:24:07 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpnb83cqcf/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 08:24:07 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run wise-skunk-154 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/d6d4ff2481c34aac97cc5598d2a76cf2\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nWARNING:tensorflow:6 out of the last 6 calls to <function pfor.<locals>.f at 0x79d1f2c362a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nWARNING:tensorflow:6 out of the last 6 calls to <function pfor.<locals>.f at 0x79d1f2c362a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\nSelected number of bands:  25\n======Selected band indices ======= \n [112  23  49 161  29 157 164  18 154 186 178  69 122 175 168  58  64  41\n 132  38  40  65  52  57  42]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 6 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807   120    32     0     2     0  ...    37   354    15     0     0     1     0\n2.0      0   162   364    25     0     2     0  ...    17   184    25     0     0     0     0\n3.0      0    38    73   102     1     0     0  ...     1     4     2     0     0     0     0\n4.0      1     0     9    14   409     1     0  ...     7    12     4     0     3     1     0\n5.0      0     5     0     2     3   646     0  ...     1     2     0     0     2    32     0\n6.0      0     0     0     2     1     0     0  ...     1     2     0     0     0     0     0\n7.0      0     0     0     0    10     0     0  ...     0     1     0     0     0     0     0\n8.0      0    15     0     0     0     2     0  ...     0     0     0     1     2     0     0\n9.0      0    79    37     5     0     4     0  ...   322   446    31     0     0     0     0\n10.0     0   246    83    17    10    10     0  ...   121  1821    17     0     1     2     0\n11.0     0    45    63    19     2     3     0  ...    26   123   285     0     0     1     0\n12.0     0     7     0     0     0     1     0  ...     0     0     0   188     0     0     0\n13.0     0     0     0     0    15     1     0  ...     0     0     1     9  1119    57     0\n14.0     1    29    11     4    32    23     0  ...     1     0     1    24    66   166     0\n15.0     0    12     5     0     0     0     0  ...     0     0     1     0     0     0    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   807    22     5     2     4     0  ...   109   400     4     0     0     0     3\n2.0      0    27   474    25     0     0     0  ...     1   254    13     0     0     0     0\n3.0      0    10    35   158     0    12     1  ...     2     3     0     0     0     0     0\n4.0      0     2     0     5   423    15     1  ...     0     5     1     0     7     0     0\n5.0      0     0     0     0     4   648     0  ...     0     1     0     0     1    35     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      3     0     0     0     0     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    14     0  ...     0     0     0     3     0     2     0\n9.0      0   154     1     2    12     2     0  ...   488   261     9     0     0     0     0\n10.0     0   176    65    13     8    13     1  ...    55  1948    36     0     0     5     0\n11.0     0    28    55    21     0     5     0  ...     3    47   404     0     0     1     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    22     4     0  ...     0     0     0     2  1130    49     0\n14.0     0     0     0     2    36    49     0  ...     1     0     0    31    79   168     1\n15.0     0     1     0     0     0     0     0  ...     3     6     2     0     0     0    76\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     13     0     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   785    33    24     3     5     0  ...    63   401    28     0     0     2     1\n2.0      0   119   328    17     0     3     0  ...    32   223    72     0     0     0     0\n3.0      0    61    10    54     1    28     0  ...     5    39    29     0     0     0     0\n4.0      8     1     0     3   395     9     0  ...     0     4     5     0    21     9     0\n5.0      0     0     0     2    10   631     0  ...     2     3     0     1    15    31     0\n6.0      1     0     0     0     5     0    10  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     0     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     5     0  ...     0     0     0     1     0     2     0\n9.0      0    91    18     3    11     2     0  ...   183   605    11     0     0     1     0\n10.0     0   227    77    14     9    11     1  ...   101  1793    80     0     0    13     4\n11.0     0   163    28    17     0     9     0  ...    14   110   214     0     0     1     0\n12.0     0     0     0     1     0     1     0  ...     0     0     0   185     0     6     0\n13.0     0     0     0     0    19     2     0  ...     0     0     0     4  1161    18     0\n14.0     1     2     0     1    18    79     0  ...     1     1     4    13   116   125     1\n15.0     0     1     7     0     0     1     0  ...     1     5     2     0     0     1    69\n\n[16 rows x 16 columns]\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     25     0     0     0     0     0     0  ...     0     0     1     0     0     0     0\n1.0      0   910    34    26     2     0     1  ...    97   269    12     1     0     1     0\n2.0      0    97   487    18     0     0     0  ...    18   162    14     0     0     0     0\n3.0      3     8    50   121     0     2     0  ...     6    21    13     0     0     5     0\n4.0     13     0     0     4   362    20     1  ...    10     3     7     0    10    32     0\n5.0      0     0     0    17     5   611     0  ...     5    21     0     0     1    35     0\n6.0      3     0     0     0     0     0    15  ...     0     0     0     0     0     0     0\n7.0     21     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     3     0  ...     0     1     0     1     0    14     0\n9.0      0    93     8     0     0     1     0  ...   694   104    17     0     0     0     0\n10.0     0   215    91     2     1     0     0  ...   221  1753    37     0     0    10     0\n11.0     0    39    37     3     0     0     0  ...    33    52   394     0     0     2     0\n12.0     0     0     0     0     0     0     0  ...     0     2     0   190     0     0     0\n13.0     0     0     0     0    34     1     0  ...     0     0     0     2  1137    28     0\n14.0     0     1     0     0    13    35     0  ...     4     3     3    21    98   186     0\n15.0     0     8     0     0     0     0     0  ...     5     3     1     0     0     0    70\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     25     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   938    26    25     3     2     0  ...    96   219    41     0     0     0     0\n2.0      0    43   473    28     1     1     0  ...    14   161    69     0     0     0     0\n3.0      0    34    40    76     8    13     0  ...     5    32    18     0     0     0     0\n4.0     10     0     0     8   403     9     1  ...     2     2     7     0    10     2     0\n5.0      0     0     0     0    14   655     0  ...     0     8     0     0     8     8     0\n6.0      1     0     0     0     0     0    19  ...     0     0     0     0     0     0     0\n7.0     22     0     0     1     1     0    52  ...     6     0     0     0     0     0     0\n8.0      0     0     0     0     0     3     0  ...     0     0     0     0     0     0     0\n9.0      1   131    16    14     2     3     0  ...   577   178    11     0     0     0     0\n10.0     1   275    93    11     7     8     1  ...    95  1769    47     0     0     1     0\n11.0     0    34    53    18     2     2     0  ...    16    49   384     0     0     0     0\n12.0     0     0     0     0     0    16     0  ...     0     1     0   179     0     0     0\n13.0     0     0     0     0    31    11     0  ...     0     3     0     3  1114    41     0\n14.0     0     3     0     2    31   112     0  ...     0    11     2    28    85    94     0\n15.0     0     4     4     0     1     0     0  ...     4     5    10     0     0     0    61\n\n[16 rows x 16 columns]\n\nConfusion Matrix for Run 6:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     40     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n1.0      0   934    21     8     2     8     0  ...   134   249     1     0     0     0     0\n2.0      0    76   482    34     0     0     0  ...     8   160    32     0     0     0     0\n3.0      0    50    27   129     0     9     2  ...     1     5     0     0     0     0     0\n4.0      6     0     0     5   405     7     7  ...     4     6     2     0    16     0     0\n5.0      0     0     0     1     2   672     0  ...     0     1     0     1     4     9     0\n6.0      0     0     0     0     1     0    21  ...     0     0     0     0     0     0     0\n7.0     22     0     0     0     2     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     4     0  ...     0     0     0     0     0     0     0\n9.0      0    66     4     3     0    13     0  ...   551   284     6     0     0     0     0\n10.0     0   193   105    18     5    21     4  ...   112  1830    32     0     0     4     1\n11.0     0    33    26    39     0    16     0  ...    15    63   376     0     0     1     0\n12.0     0     0     0     1     0     3     0  ...     0     0     0   146     0    32     0\n13.0     0     0     0     0    28     9     0  ...     0     2     0     1  1148    12     0\n14.0     0     0     0     1    19    58     1  ...     0    17     0     5   112   150     0\n15.0     0     0     2     0     0     3     0  ...     7     2     3     0     0     0    73\n\n[16 rows x 16 columns]\n🏃 View run brawny-sheep-506 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/0b8ccf40e25e43008e3463d1d129a450\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results5.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.692513          0.573164           0.644891\n1    2          0.762247          0.732325           0.726264\n2    3          0.658724          0.602521           0.603915\n3    4          0.758550          0.689539           0.724014\n4    5          0.735750          0.703752           0.697943\n5    6          0.760193          0.763618           0.724874\n\nAverage Performance Over 6 Runs:\nOverall Accuracy: 0.7280\nAverage Accuracy: 0.6775\nKappa Coefficient: 0.6870\n","output_type":"stream"}],"execution_count":36},{"cell_type":"markdown","source":"## Single layer OG","metadata":{}},{"cell_type":"code","source":"%cd ..\n!rm -r SRL-SOA\n!git clone https://github.com/vidhi-gajra-git/SRL-SOA.git\n%cd SRL-SOA\n!mkdir data \n!mkdir results \n!cp /kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/*.mat data/\n\n\n%matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n\n\n#Single layer original q=1->q\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T12:01:02.688372Z","iopub.execute_input":"2025-02-20T12:01:02.688947Z","execution_failed":"2025-02-20T13:12:38.896Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"/kaggle/working\nCloning into 'SRL-SOA'...\nremote: Enumerating objects: 851, done.\u001b[K\nremote: Counting objects: 100% (94/94), done.\u001b[K\nremote: Compressing objects: 100% (63/63), done.\u001b[K\nremote: Total 851 (delta 68), reused 31 (delta 31), pack-reused 757 (from 3)\u001b[K\nReceiving objects: 100% (851/851), 1.12 MiB | 15.44 MiB/s, done.\nResolving deltas: 100% (538/538), done.\n/kaggle/working/SRL-SOA\n2025-02-20 12:01:04.701382: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1740052864.730901    3011 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1740052864.740371    3011 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nAccessing as vidhi-gajra-git\nInitialized MLflow to track repo \u001b[32m\"vidhi-gajra-git/SRL_SOA\"\u001b[0m\nRepository vidhi-gajra-git/SRL_SOA initialized!\n\nScene:  (145, 145, 200)\n\nClassification:\nTraining samples:  512\nTest samples:  9737\n\n\nNumber of bands:  200\n**********  METHOD : SVM **********\n\t\t\t\t\t *****  #RUNS : 6  *****\n2025-02-20 12:01:13.634935: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ Oper1D (\u001b[94mOper1D\u001b[0m)           │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot (\u001b[94mDot\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ Oper1D[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m],          │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 15.6275\nEpoch 1: val_loss improved from inf to 95.92702, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 18ms/step - loss: 14.9257 - val_loss: 95.9270\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.0770\nEpoch 2: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.0701 - val_loss: 95.9270\nEpoch 3/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.6382\nEpoch 3: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6355 - val_loss: 95.9270\nEpoch 4/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4820\nEpoch 4: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4802 - val_loss: 95.9270\nEpoch 5/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2919\nEpoch 5: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2918 - val_loss: 95.9270\nEpoch 6/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1215\nEpoch 6: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1232 - val_loss: 95.9270\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9792\nEpoch 7: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9803 - val_loss: 95.9270\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9306\nEpoch 8: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9302 - val_loss: 95.9270\nEpoch 9/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8272\nEpoch 9: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8276 - val_loss: 95.9270\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8243\nEpoch 10: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8247 - val_loss: 95.9270\nEpoch 11/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7649\nEpoch 11: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7660 - val_loss: 95.9270\nEpoch 12/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7415\nEpoch 12: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7441 - val_loss: 95.9270\nEpoch 13/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7584\nEpoch 13: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7627 - val_loss: 95.9270\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8149\nEpoch 14: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8202 - val_loss: 95.9270\nEpoch 15/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0402\nEpoch 15: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0350 - val_loss: 95.9270\nEpoch 16/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0181\nEpoch 16: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0450 - val_loss: 95.9270\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.7932\nEpoch 17: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.7866 - val_loss: 95.9270\nEpoch 18/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1114\nEpoch 18: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1390 - val_loss: 95.9270\nEpoch 19/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.6241\nEpoch 19: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.6277 - val_loss: 95.9270\nEpoch 20/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 2.1634\nEpoch 20: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.1343 - val_loss: 95.9270\nEpoch 21/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8477\nEpoch 21: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8472 - val_loss: 95.9270\nEpoch 22/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7765\nEpoch 22: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7726 - val_loss: 95.9270\nEpoch 23/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6279\nEpoch 23: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6291 - val_loss: 95.9270\nEpoch 24/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6167\nEpoch 24: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6173 - val_loss: 95.9270\nEpoch 25/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5500\nEpoch 25: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5509 - val_loss: 95.9270\nEpoch 26/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5301\nEpoch 26: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5315 - val_loss: 95.9270\nEpoch 27/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5224\nEpoch 27: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5235 - val_loss: 95.9270\nEpoch 28/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5178\nEpoch 28: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5204 - val_loss: 95.9270\nEpoch 29/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5325\nEpoch 29: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5330 - val_loss: 95.9270\nEpoch 30/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5208\nEpoch 30: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5225 - val_loss: 95.9270\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5938\nEpoch 31: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5950 - val_loss: 95.9270\nEpoch 32/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8542\nEpoch 32: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.8715 - val_loss: 95.9270\nEpoch 33/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9696\nEpoch 33: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0343 - val_loss: 95.9270\nEpoch 34/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 5.1599\nEpoch 34: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 5.0059 - val_loss: 95.9270\nEpoch 35/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9676\nEpoch 35: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9548 - val_loss: 95.9270\nEpoch 36/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5702\nEpoch 36: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.5722 - val_loss: 95.9270\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5131\nEpoch 37: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5141 - val_loss: 95.9270\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5127\nEpoch 38: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5142 - val_loss: 95.9270\nEpoch 39/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4914\nEpoch 39: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.4937 - val_loss: 95.9270\nEpoch 40/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.4647\nEpoch 40: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.4675 - val_loss: 95.9270\nEpoch 41/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.4484\nEpoch 41: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.4517 - val_loss: 95.9270\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.4448\nEpoch 42: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.4455 - val_loss: 95.9270\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.4409\nEpoch 43: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.4424 - val_loss: 95.9270\nEpoch 44/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.4480\nEpoch 44: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.4515 - val_loss: 95.9270\nEpoch 45/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.5482\nEpoch 45: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.5496 - val_loss: 95.9270\nEpoch 46/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.7307\nEpoch 46: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.7839 - val_loss: 95.9270\nEpoch 47/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 3.3401\nEpoch 47: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 3.4115 - val_loss: 95.9270\nEpoch 48/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.9937\nEpoch 48: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.9700 - val_loss: 95.9270\nEpoch 49/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9942\nEpoch 49: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9863 - val_loss: 95.9270\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6421\nEpoch 50: val_loss did not improve from 95.92702\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6428 - val_loss: 95.9270\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 97ms/step\n2025/02/20 12:02:18 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpcy2136pu/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 12:03:05 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 12:03:15 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpddpp3x4m/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 12:03:15 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run SRL-SOA_run0 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/3dba2a503a45458aa13e847e5f26abe0\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 79  21 119  76 106 149  47  64 116 198 152  75 184  52 172  98 136  10\n 138 124  68  70  46  65 182]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}\nThe model shall evaluate for 1 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   677    10    71     1     3     0  ...   109   478    19     0     0     0     0\n2.0      0    46   391    36     0     0     0  ...    15   239    52     0     0     0     0\n3.0      0    10    24   149     0     8     0  ...     5     9    15     0     0     0     0\n4.0      2     1     0     6   392    13     0  ...     6     1     5     0    14     1     0\n5.0      0     0     0     2    49   597     0  ...     0     1     1     4     3    36     0\n6.0      0     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     2     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     2     0    15     0  ...     0     0     0     3     0     0     0\n9.0      0    78     4     2     1     5     0  ...   503   323     6     0     0     0     0\n10.0     0   154    60    14     4    16     0  ...    71  1952    54     0     0     2     0\n11.0     0    65    90    36     0     3     0  ...    46   164   163     0     0     0     0\n12.0     0     0     0     0     0    12     0  ...     0     0     0   172     0    12     0\n13.0     0     0     0     0    23     7     0  ...     0     0     0     9  1113    48     0\n14.0     0     0     1     0    20    80     0  ...     5     0     6    26    75   144     0\n15.0     0     4     0     0     0     0     0  ...     5     0     0     0     0     0    78\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run0 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/3dba2a503a45458aa13e847e5f26abe0\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results0.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.696416          0.571028           0.649053\n/opt/conda/lib/python3.12/site-packages/numpy/_core/fromnumeric.py:3596: RuntimeWarning: Mean of empty slice.\n  return _methods._mean(a, axis=axis, dtype=dtype,\n/opt/conda/lib/python3.12/site-packages/numpy/_core/_methods.py:138: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n\nAverage Performance Over 1 Runs:\nOverall Accuracy: nan\nAverage Accuracy: nan\nKappa Coefficient: nan\n🏃 View run SRL-SOA_run0 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/3dba2a503a45458aa13e847e5f26abe0\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ Oper1D (\u001b[94mOper1D\u001b[0m)           │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_1 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ Oper1D[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m],          │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 7.4822\nEpoch 1: val_loss improved from inf to 19.46245, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 35ms/step - loss: 7.2256 - val_loss: 19.4624\nEpoch 2/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.1327\nEpoch 2: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.1323 - val_loss: 19.4624\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.7105\nEpoch 3: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 3.6810 - val_loss: 19.4624\nEpoch 4/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 3.6386\nEpoch 4: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 3.5483 - val_loss: 19.4624\nEpoch 5/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.7256\nEpoch 5: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.7076 - val_loss: 19.4624\nEpoch 6/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.7072\nEpoch 6: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6881 - val_loss: 19.4624\nEpoch 7/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3129\nEpoch 7: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.2909 - val_loss: 19.4624\nEpoch 8/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0699\nEpoch 8: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0695 - val_loss: 19.4624\nEpoch 9/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2669\nEpoch 9: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.2485 - val_loss: 19.4624\nEpoch 10/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0735\nEpoch 10: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.0663 - val_loss: 19.4624\nEpoch 11/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3721\nEpoch 11: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.3595 - val_loss: 19.4624\nEpoch 12/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0296\nEpoch 12: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0287 - val_loss: 19.4624\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2838\nEpoch 13: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2771 - val_loss: 19.4624\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0466\nEpoch 14: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0451 - val_loss: 19.4624\nEpoch 15/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1873\nEpoch 15: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1834 - val_loss: 19.4624\nEpoch 16/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0331\nEpoch 16: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0321 - val_loss: 19.4624\nEpoch 17/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2924\nEpoch 17: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2900 - val_loss: 19.4624\nEpoch 18/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0724\nEpoch 18: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0713 - val_loss: 19.4624\nEpoch 19/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4227\nEpoch 19: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4171 - val_loss: 19.4624\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3344\nEpoch 20: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3356 - val_loss: 19.4624\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.3825\nEpoch 21: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.3620 - val_loss: 19.4624\nEpoch 22/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.6950\nEpoch 22: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.6724 - val_loss: 19.4624\nEpoch 23/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.3329\nEpoch 23: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.2671 - val_loss: 19.4624\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1783\nEpoch 24: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1760 - val_loss: 19.4624\nEpoch 25/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.8426\nEpoch 25: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.8373 - val_loss: 19.4624\nEpoch 26/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0236\nEpoch 26: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0198 - val_loss: 19.4624\nEpoch 27/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2896\nEpoch 27: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2744 - val_loss: 19.4624\nEpoch 28/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0062\nEpoch 28: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9987 - val_loss: 19.4624\nEpoch 29/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2871\nEpoch 29: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2568 - val_loss: 19.4624\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9968\nEpoch 30: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9966 - val_loss: 19.4624\nEpoch 31/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2695\nEpoch 31: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2665 - val_loss: 19.4624\nEpoch 32/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0705\nEpoch 32: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0706 - val_loss: 19.4624\nEpoch 33/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2883\nEpoch 33: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2812 - val_loss: 19.4624\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9451\nEpoch 34: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9448 - val_loss: 19.4624\nEpoch 35/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1987\nEpoch 35: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1959 - val_loss: 19.4624\nEpoch 36/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9347\nEpoch 36: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9294 - val_loss: 19.4624\nEpoch 37/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0690\nEpoch 37: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0522 - val_loss: 19.4624\nEpoch 38/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9740\nEpoch 38: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9690 - val_loss: 19.4624\nEpoch 39/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9951\nEpoch 39: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9905 - val_loss: 19.4624\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9904\nEpoch 40: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9880 - val_loss: 19.4624\nEpoch 41/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9364\nEpoch 41: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9348 - val_loss: 19.4624\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9393\nEpoch 42: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9371 - val_loss: 19.4624\nEpoch 43/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8891\nEpoch 43: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8862 - val_loss: 19.4624\nEpoch 44/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9249\nEpoch 44: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9128 - val_loss: 19.4624\nEpoch 45/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8476\nEpoch 45: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8464 - val_loss: 19.4624\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9753\nEpoch 46: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9692 - val_loss: 19.4624\nEpoch 47/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0327\nEpoch 47: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0329 - val_loss: 19.4624\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3235\nEpoch 48: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3176 - val_loss: 19.4624\nEpoch 49/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0268\nEpoch 49: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0253 - val_loss: 19.4624\nEpoch 50/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8617\nEpoch 50: val_loss did not improve from 19.46245\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8638 - val_loss: 19.4624\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 93ms/step\n2025/02/20 12:05:03 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmp0nui6ht1/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 12:06:12 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 12:06:21 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmp8muwq01o/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 12:06:21 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run SRL-SOA_run1 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/4d77f856965243809a51cc875fedaffe\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 57 164  10 154  42  74  84  18 101  59 130 148 160 151  65  15 133  63\n 172  78  90 119 188 120   2]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 2 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   677    10    71     1     3     0  ...   109   478    19     0     0     0     0\n2.0      0    46   391    36     0     0     0  ...    15   239    52     0     0     0     0\n3.0      0    10    24   149     0     8     0  ...     5     9    15     0     0     0     0\n4.0      2     1     0     6   392    13     0  ...     6     1     5     0    14     1     0\n5.0      0     0     0     2    49   597     0  ...     0     1     1     4     3    36     0\n6.0      0     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     2     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     2     0    15     0  ...     0     0     0     3     0     0     0\n9.0      0    78     4     2     1     5     0  ...   503   323     6     0     0     0     0\n10.0     0   154    60    14     4    16     0  ...    71  1952    54     0     0     2     0\n11.0     0    65    90    36     0     3     0  ...    46   164   163     0     0     0     0\n12.0     0     0     0     0     0    12     0  ...     0     0     0   172     0    12     0\n13.0     0     0     0     0    23     7     0  ...     0     0     0     9  1113    48     0\n14.0     0     0     1     0    20    80     0  ...     5     0     6    26    75   144     0\n15.0     0     4     0     0     0     0     0  ...     5     0     0     0     0     0    78\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run1 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/4d77f856965243809a51cc875fedaffe\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   720     9    29     3     2     0  ...   114   458    18     0     0     0     3\n2.0      0    30   441    14     1     1     0  ...     2   276    29     0     0     0     0\n3.0      0    42    59    93     2    19     0  ...     1     6     0     0     0     0     0\n4.0      0     2     0     6   360    15     3  ...     1     3     0     0    65     2     1\n5.0      0     0     0     0    69   587     0  ...     0     1     0     0     4    28     0\n6.0      0     0     0     0     0     0    22  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     3     0    12  ...     0     3     0     0     0     0     0\n8.0      0     0     0     0     2    16     0  ...     0     0     0     2     0     0     0\n9.0      0    64     5    17     7     4     0  ...   586   239     7     0     0     0     0\n10.0     0   108    67    25    11    20     1  ...    58  1993    36     0     0     0     1\n11.0     0    85    99    41     0     7     0  ...    12    98   222     0     0     0     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    25     2     0  ...     0     0     0     6  1142    32     0\n14.0     2     0     0     4    33    76     0  ...     0     0     0    42    87   120     3\n15.0     0     7     0     0     0     0     0  ...     1     3     1     0     0     0    76\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run1 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/4d77f856965243809a51cc875fedaffe\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results1.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.696416          0.571028           0.649053\n1    2          0.718496          0.630997           0.674837\n\nAverage Performance Over 2 Runs:\nOverall Accuracy: 0.6964\nAverage Accuracy: 0.5710\nKappa Coefficient: 0.6491\n🏃 View run SRL-SOA_run1 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/4d77f856965243809a51cc875fedaffe\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ Oper1D (\u001b[94mOper1D\u001b[0m)           │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_2 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ Oper1D[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m],          │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 7.7541\nEpoch 1: val_loss improved from inf to 23.40342, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - loss: 7.7229 - val_loss: 23.4034\nEpoch 2/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.7247\nEpoch 2: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.6882 - val_loss: 23.4034\nEpoch 3/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.7838\nEpoch 3: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.7766 - val_loss: 23.4034\nEpoch 4/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.6516\nEpoch 4: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6432 - val_loss: 23.4034\nEpoch 5/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.5530\nEpoch 5: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5443 - val_loss: 23.4034\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3945\nEpoch 6: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3943 - val_loss: 23.4034\nEpoch 7/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2698\nEpoch 7: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2707 - val_loss: 23.4034\nEpoch 8/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.1700\nEpoch 8: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1730 - val_loss: 23.4034\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0874\nEpoch 9: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0888 - val_loss: 23.4034\nEpoch 10/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0136\nEpoch 10: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0168 - val_loss: 23.4034\nEpoch 11/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9622\nEpoch 11: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9679 - val_loss: 23.4034\nEpoch 12/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9265\nEpoch 12: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9319 - val_loss: 23.4034\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8992\nEpoch 13: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.9017 - val_loss: 23.4034\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8704\nEpoch 14: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8736 - val_loss: 23.4034\nEpoch 15/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8473\nEpoch 15: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8498 - val_loss: 23.4034\nEpoch 16/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8152\nEpoch 16: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8182 - val_loss: 23.4034\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8409\nEpoch 17: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8419 - val_loss: 23.4034\nEpoch 18/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7630\nEpoch 18: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7663 - val_loss: 23.4034\nEpoch 19/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8899\nEpoch 19: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.8903 - val_loss: 23.4034\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7252\nEpoch 20: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7265 - val_loss: 23.4034\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8105\nEpoch 21: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8107 - val_loss: 23.4034\nEpoch 22/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6755\nEpoch 22: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.6775 - val_loss: 23.4034\nEpoch 23/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9422\nEpoch 23: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9423 - val_loss: 23.4034\nEpoch 24/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9383\nEpoch 24: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9485 - val_loss: 23.4034\nEpoch 25/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4139\nEpoch 25: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4102 - val_loss: 23.4034\nEpoch 26/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0374\nEpoch 26: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0357 - val_loss: 23.4034\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7409\nEpoch 27: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7395 - val_loss: 23.4034\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9074\nEpoch 28: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9099 - val_loss: 23.4034\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0297\nEpoch 29: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0350 - val_loss: 23.4034\nEpoch 30/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4925\nEpoch 30: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4909 - val_loss: 23.4034\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3987\nEpoch 31: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4008 - val_loss: 23.4034\nEpoch 32/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.8810\nEpoch 32: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.8656 - val_loss: 23.4034\nEpoch 33/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4635\nEpoch 33: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4514 - val_loss: 23.4034\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2429\nEpoch 34: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2328 - val_loss: 23.4034\nEpoch 35/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0590\nEpoch 35: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0513 - val_loss: 23.4034\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9259\nEpoch 36: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9215 - val_loss: 23.4034\nEpoch 37/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.8215\nEpoch 37: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8124 - val_loss: 23.4034\nEpoch 38/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7215\nEpoch 38: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7113 - val_loss: 23.4034\nEpoch 39/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6318\nEpoch 39: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.6312 - val_loss: 23.4034\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5715\nEpoch 40: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.5707 - val_loss: 23.4034\nEpoch 41/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5320\nEpoch 41: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.5318 - val_loss: 23.4034\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.5073\nEpoch 42: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.5073 - val_loss: 23.4034\nEpoch 43/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.4837\nEpoch 43: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.4840 - val_loss: 23.4034\nEpoch 44/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4775\nEpoch 44: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.4782 - val_loss: 23.4034\nEpoch 45/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5053\nEpoch 45: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.5061 - val_loss: 23.4034\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.6553\nEpoch 46: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6605 - val_loss: 23.4034\nEpoch 47/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3361\nEpoch 47: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3094 - val_loss: 23.4034\nEpoch 48/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9439\nEpoch 48: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9306 - val_loss: 23.4034\nEpoch 49/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.7539\nEpoch 49: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.7536 - val_loss: 23.4034\nEpoch 50/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6332\nEpoch 50: val_loss did not improve from 23.40342\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.6334 - val_loss: 23.4034\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 107ms/step\n2025/02/20 12:08:03 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmp0w8q38rk/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 12:09:12 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 12:09:20 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpeq0ux5hq/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 12:09:20 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run SRL-SOA_run2 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/71ad0e2c2cca4b00b004a670c207f6df\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [111  13  33   7  88 151  22  96  11  75  85 103  10  60 105   6  20  43\n 149  21 199  16 120  78 116]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 3 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   677    10    71     1     3     0  ...   109   478    19     0     0     0     0\n2.0      0    46   391    36     0     0     0  ...    15   239    52     0     0     0     0\n3.0      0    10    24   149     0     8     0  ...     5     9    15     0     0     0     0\n4.0      2     1     0     6   392    13     0  ...     6     1     5     0    14     1     0\n5.0      0     0     0     2    49   597     0  ...     0     1     1     4     3    36     0\n6.0      0     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     2     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     2     0    15     0  ...     0     0     0     3     0     0     0\n9.0      0    78     4     2     1     5     0  ...   503   323     6     0     0     0     0\n10.0     0   154    60    14     4    16     0  ...    71  1952    54     0     0     2     0\n11.0     0    65    90    36     0     3     0  ...    46   164   163     0     0     0     0\n12.0     0     0     0     0     0    12     0  ...     0     0     0   172     0    12     0\n13.0     0     0     0     0    23     7     0  ...     0     0     0     9  1113    48     0\n14.0     0     0     1     0    20    80     0  ...     5     0     6    26    75   144     0\n15.0     0     4     0     0     0     0     0  ...     5     0     0     0     0     0    78\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run2 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/71ad0e2c2cca4b00b004a670c207f6df\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   720     9    29     3     2     0  ...   114   458    18     0     0     0     3\n2.0      0    30   441    14     1     1     0  ...     2   276    29     0     0     0     0\n3.0      0    42    59    93     2    19     0  ...     1     6     0     0     0     0     0\n4.0      0     2     0     6   360    15     3  ...     1     3     0     0    65     2     1\n5.0      0     0     0     0    69   587     0  ...     0     1     0     0     4    28     0\n6.0      0     0     0     0     0     0    22  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     3     0    12  ...     0     3     0     0     0     0     0\n8.0      0     0     0     0     2    16     0  ...     0     0     0     2     0     0     0\n9.0      0    64     5    17     7     4     0  ...   586   239     7     0     0     0     0\n10.0     0   108    67    25    11    20     1  ...    58  1993    36     0     0     0     1\n11.0     0    85    99    41     0     7     0  ...    12    98   222     0     0     0     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    25     2     0  ...     0     0     0     6  1142    32     0\n14.0     2     0     0     4    33    76     0  ...     0     0     0    42    87   120     3\n15.0     0     7     0     0     0     0     0  ...     1     3     1     0     0     0    76\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run2 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/71ad0e2c2cca4b00b004a670c207f6df\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     16     1     0     0     2     0     0  ...     0     0     0     0     0     0     0\n1.0      0   870    28    25     2     3     0  ...    87   249    73     0     0     1     4\n2.0      0   164   294    12     0     0     0  ...    52   242    30     0     0     0     0\n3.0      3    89     7    80     1    17     3  ...     4     8    14     0     0     3     0\n4.0      0     1     0     4   329    26     2  ...     0     2     6     0    60    16     0\n5.0      0     0     0     6    12   630     0  ...    11     1     1     6     3    25     0\n6.0      1     0     0     0     8     0    14  ...     0     0     0     0     0     0     0\n7.0    102     1     0    12     1     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     8     0  ...     0     0     0     5     0     3     0\n9.0      0    92    16     3     5     2     4  ...   513   267    23     0     0     1     0\n10.0     0   320    36     9    15    15     4  ...   126  1737    56     0     0     3     7\n11.0     0   176    39    18     0     3     0  ...    46   108   164     1     0     0     0\n12.0     0     0     0     0     1     2     0  ...     0     0     0   170     0    20     0\n13.0     2     0     0     0    38     5     0  ...     0     2     0     6  1097    54     0\n14.0     0     0     2     0    19    74     0  ...     1     7     3    41   102   117     0\n15.0     0     2     4     0     0     0     0  ...     0     0     7     0     0     0    75\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run2 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/71ad0e2c2cca4b00b004a670c207f6df\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results2.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.696416          0.571028           0.649053\n1    2          0.718496          0.630997           0.674837\n2    3          0.662422          0.579924           0.611732\n\nAverage Performance Over 3 Runs:\nOverall Accuracy: 0.7075\nAverage Accuracy: 0.6010\nKappa Coefficient: 0.6619\n🏃 View run SRL-SOA_run2 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/71ad0e2c2cca4b00b004a670c207f6df\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ Oper1D (\u001b[94mOper1D\u001b[0m)           │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_3 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ Oper1D[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m],          │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 4.9609\nEpoch 1: val_loss improved from inf to 11.60564, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - loss: 4.8905 - val_loss: 11.6056\nEpoch 2/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.1773\nEpoch 2: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.1642 - val_loss: 11.6056\nEpoch 3/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.5168\nEpoch 3: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5106 - val_loss: 11.6056\nEpoch 4/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.5595\nEpoch 4: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.5513 - val_loss: 11.6056\nEpoch 5/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1714\nEpoch 5: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1737 - val_loss: 11.6056\nEpoch 6/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4828\nEpoch 6: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4793 - val_loss: 11.6056\nEpoch 7/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0917\nEpoch 7: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0901 - val_loss: 11.6056\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2213\nEpoch 8: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2179 - val_loss: 11.6056\nEpoch 9/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.2075\nEpoch 9: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1975 - val_loss: 11.6056\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3993\nEpoch 10: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3929 - val_loss: 11.6056\nEpoch 11/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.9687\nEpoch 11: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.9449 - val_loss: 11.6056\nEpoch 12/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.1301\nEpoch 12: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 2.1048 - val_loss: 11.6056\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4087\nEpoch 13: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3988 - val_loss: 11.6056\nEpoch 14/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9836\nEpoch 14: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9958 - val_loss: 11.6056\nEpoch 15/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0557\nEpoch 15: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0840 - val_loss: 11.6056\nEpoch 16/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.9473\nEpoch 16: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.9429 - val_loss: 11.6056\nEpoch 17/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.9542\nEpoch 17: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.9620 - val_loss: 11.6056\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0105\nEpoch 18: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0070 - val_loss: 11.6056\nEpoch 19/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0168\nEpoch 19: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0097 - val_loss: 11.6056\nEpoch 20/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.0018\nEpoch 20: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.9927 - val_loss: 11.6056\nEpoch 21/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0329\nEpoch 21: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0268 - val_loss: 11.6056\nEpoch 22/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.0890\nEpoch 22: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0712 - val_loss: 11.6056\nEpoch 23/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0947\nEpoch 23: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0848 - val_loss: 11.6056\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0331\nEpoch 24: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0297 - val_loss: 11.6056\nEpoch 25/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9364\nEpoch 25: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9337 - val_loss: 11.6056\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8497\nEpoch 26: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8468 - val_loss: 11.6056\nEpoch 27/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7971\nEpoch 27: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7940 - val_loss: 11.6056\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7719\nEpoch 28: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7702 - val_loss: 11.6056\nEpoch 29/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7836\nEpoch 29: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7782 - val_loss: 11.6056\nEpoch 30/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8050\nEpoch 30: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8046 - val_loss: 11.6056\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8603\nEpoch 31: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8582 - val_loss: 11.6056\nEpoch 32/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9676\nEpoch 32: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9627 - val_loss: 11.6056\nEpoch 33/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9838\nEpoch 33: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9802 - val_loss: 11.6056\nEpoch 34/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0161\nEpoch 34: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0073 - val_loss: 11.6056\nEpoch 35/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8332\nEpoch 35: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8279 - val_loss: 11.6056\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7852\nEpoch 36: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7834 - val_loss: 11.6056\nEpoch 37/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7592\nEpoch 37: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7588 - val_loss: 11.6056\nEpoch 38/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.7793\nEpoch 38: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.7792 - val_loss: 11.6056\nEpoch 39/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8475\nEpoch 39: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.8488 - val_loss: 11.6056\nEpoch 40/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1303\nEpoch 40: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1302 - val_loss: 11.6056\nEpoch 41/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.9640\nEpoch 41: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.9349 - val_loss: 11.6056\nEpoch 42/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2031\nEpoch 42: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.1929 - val_loss: 11.6056\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4107\nEpoch 43: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4379 - val_loss: 11.6056\nEpoch 44/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.6309\nEpoch 44: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 3.5713 - val_loss: 11.6056\nEpoch 45/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.8927\nEpoch 45: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.8909 - val_loss: 11.6056\nEpoch 46/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9023\nEpoch 46: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.9021 - val_loss: 11.6056\nEpoch 47/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9512\nEpoch 47: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.9508 - val_loss: 11.6056\nEpoch 48/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0133\nEpoch 48: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.0245 - val_loss: 11.6056\nEpoch 49/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9470\nEpoch 49: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.9447 - val_loss: 11.6056\nEpoch 50/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9482\nEpoch 50: val_loss did not improve from 11.60564\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.9437 - val_loss: 11.6056\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step\n2025/02/20 12:11:10 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpv5m4xu9y/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: dagshub.com. Connection pool size: 10\n2025/02/20 12:12:19 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 12:12:27 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmps89mb7vz/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 12:12:27 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run SRL-SOA_run3 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/495210cb95a24b93a95dab1744149181\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 83 158 140  75  55 182 132 199 102  49  19 115  60  72  15  37 180  36\n 101 127   8  34 154 137  28]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/opt/conda/lib/python3.12/site-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 4 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   677    10    71     1     3     0  ...   109   478    19     0     0     0     0\n2.0      0    46   391    36     0     0     0  ...    15   239    52     0     0     0     0\n3.0      0    10    24   149     0     8     0  ...     5     9    15     0     0     0     0\n4.0      2     1     0     6   392    13     0  ...     6     1     5     0    14     1     0\n5.0      0     0     0     2    49   597     0  ...     0     1     1     4     3    36     0\n6.0      0     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     2     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     2     0    15     0  ...     0     0     0     3     0     0     0\n9.0      0    78     4     2     1     5     0  ...   503   323     6     0     0     0     0\n10.0     0   154    60    14     4    16     0  ...    71  1952    54     0     0     2     0\n11.0     0    65    90    36     0     3     0  ...    46   164   163     0     0     0     0\n12.0     0     0     0     0     0    12     0  ...     0     0     0   172     0    12     0\n13.0     0     0     0     0    23     7     0  ...     0     0     0     9  1113    48     0\n14.0     0     0     1     0    20    80     0  ...     5     0     6    26    75   144     0\n15.0     0     4     0     0     0     0     0  ...     5     0     0     0     0     0    78\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run3 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/495210cb95a24b93a95dab1744149181\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   720     9    29     3     2     0  ...   114   458    18     0     0     0     3\n2.0      0    30   441    14     1     1     0  ...     2   276    29     0     0     0     0\n3.0      0    42    59    93     2    19     0  ...     1     6     0     0     0     0     0\n4.0      0     2     0     6   360    15     3  ...     1     3     0     0    65     2     1\n5.0      0     0     0     0    69   587     0  ...     0     1     0     0     4    28     0\n6.0      0     0     0     0     0     0    22  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     3     0    12  ...     0     3     0     0     0     0     0\n8.0      0     0     0     0     2    16     0  ...     0     0     0     2     0     0     0\n9.0      0    64     5    17     7     4     0  ...   586   239     7     0     0     0     0\n10.0     0   108    67    25    11    20     1  ...    58  1993    36     0     0     0     1\n11.0     0    85    99    41     0     7     0  ...    12    98   222     0     0     0     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    25     2     0  ...     0     0     0     6  1142    32     0\n14.0     2     0     0     4    33    76     0  ...     0     0     0    42    87   120     3\n15.0     0     7     0     0     0     0     0  ...     1     3     1     0     0     0    76\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run3 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/495210cb95a24b93a95dab1744149181\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     16     1     0     0     2     0     0  ...     0     0     0     0     0     0     0\n1.0      0   870    28    25     2     3     0  ...    87   249    73     0     0     1     4\n2.0      0   164   294    12     0     0     0  ...    52   242    30     0     0     0     0\n3.0      3    89     7    80     1    17     3  ...     4     8    14     0     0     3     0\n4.0      0     1     0     4   329    26     2  ...     0     2     6     0    60    16     0\n5.0      0     0     0     6    12   630     0  ...    11     1     1     6     3    25     0\n6.0      1     0     0     0     8     0    14  ...     0     0     0     0     0     0     0\n7.0    102     1     0    12     1     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     8     0  ...     0     0     0     5     0     3     0\n9.0      0    92    16     3     5     2     4  ...   513   267    23     0     0     1     0\n10.0     0   320    36     9    15    15     4  ...   126  1737    56     0     0     3     7\n11.0     0   176    39    18     0     3     0  ...    46   108   164     1     0     0     0\n12.0     0     0     0     0     1     2     0  ...     0     0     0   170     0    20     0\n13.0     2     0     0     0    38     5     0  ...     0     2     0     6  1097    54     0\n14.0     0     0     2     0    19    74     0  ...     1     7     3    41   102   117     0\n15.0     0     2     4     0     0     0     0  ...     0     0     7     0     0     0    75\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run3 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/495210cb95a24b93a95dab1744149181\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     24     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   831    24    19     1     2     0  ...   130   312    32     0     0     1     0\n2.0      0    59   432     4     0     1     0  ...     9   238    53     0     0     0     0\n3.0      0    34    76    47     0     5     0  ...     4    20    40     0     0     0     0\n4.0     12     3     0     1   321    16     0  ...     6     6     8     0    31    61     0\n5.0      0     0     0     1     2   624     0  ...     1    17     1     0     9    40     0\n6.0      1     0     0     0     0     0    17  ...     0     0     0     0     0     0     0\n7.0      6     0     0     0     0     0     3  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0    14     0  ...     0     0     0     2     0     4     0\n9.0      0    48     9     5     0     1     4  ...   618   220    12     0     0     0     0\n10.0     0   153    85     9     0     9     1  ...   120  1886    59     0     0     8     0\n11.0     0    37    78     3     0     0     0  ...    48    80   313     0     0     1     0\n12.0     0     0     0     0     0     4     0  ...     0     0     0   187     0     1     0\n13.0     0     0     0     0    51     2     0  ...     0     0     0     5  1121    23     0\n14.0     0     2     2     0    13    36     0  ...     3     0     4    32   104   168     0\n15.0     0     0     0     0     0     0     0  ...     8     5     3     0     0     0    71\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run3 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/495210cb95a24b93a95dab1744149181\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results3.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.696416          0.571028           0.649053\n1    2          0.718496          0.630997           0.674837\n2    3          0.662422          0.579924           0.611732\n3    4          0.729485          0.647031           0.688786\n\nAverage Performance Over 4 Runs:\nOverall Accuracy: 0.6924\nAverage Accuracy: 0.5940\nKappa Coefficient: 0.6452\n🏃 View run SRL-SOA_run3 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/495210cb95a24b93a95dab1744149181\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ Oper1D (\u001b[94mOper1D\u001b[0m)           │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_4 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ Oper1D[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m],          │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8.2534\nEpoch 1: val_loss improved from inf to 10.38084, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 35ms/step - loss: 8.0505 - val_loss: 10.3808\nEpoch 2/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.0801\nEpoch 2: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 2.0652 - val_loss: 10.3808\nEpoch 3/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4445\nEpoch 3: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4533 - val_loss: 10.3808\nEpoch 4/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4136\nEpoch 4: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4243 - val_loss: 10.3808\nEpoch 5/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4491\nEpoch 5: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4496 - val_loss: 10.3808\nEpoch 6/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4152\nEpoch 6: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4154 - val_loss: 10.3808\nEpoch 7/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3921\nEpoch 7: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3920 - val_loss: 10.3808\nEpoch 8/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3919\nEpoch 8: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3913 - val_loss: 10.3808\nEpoch 9/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4075\nEpoch 9: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4021 - val_loss: 10.3808\nEpoch 10/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4193\nEpoch 10: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4138 - val_loss: 10.3808\nEpoch 11/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4295\nEpoch 11: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4234 - val_loss: 10.3808\nEpoch 12/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4475\nEpoch 12: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4316 - val_loss: 10.3808\nEpoch 13/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4552\nEpoch 13: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4382 - val_loss: 10.3808\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4550\nEpoch 14: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4474 - val_loss: 10.3808\nEpoch 15/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4755\nEpoch 15: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4602 - val_loss: 10.3808\nEpoch 16/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.4682\nEpoch 16: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.4641 - val_loss: 10.3808\nEpoch 17/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4717\nEpoch 17: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4536 - val_loss: 10.3808\nEpoch 18/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4617\nEpoch 18: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4473 - val_loss: 10.3808\nEpoch 19/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4793\nEpoch 19: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4659 - val_loss: 10.3808\nEpoch 20/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.5119\nEpoch 20: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4886 - val_loss: 10.3808\nEpoch 21/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4761\nEpoch 21: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4569 - val_loss: 10.3808\nEpoch 22/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3991\nEpoch 22: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.3879 - val_loss: 10.3808\nEpoch 23/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3054\nEpoch 23: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.3029 - val_loss: 10.3808\nEpoch 24/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2251\nEpoch 24: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2231 - val_loss: 10.3808\nEpoch 25/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1724\nEpoch 25: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1625 - val_loss: 10.3808\nEpoch 26/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0821\nEpoch 26: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.0730 - val_loss: 10.3808\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0724\nEpoch 27: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.0691 - val_loss: 10.3808\nEpoch 28/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9780\nEpoch 28: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.9749 - val_loss: 10.3808\nEpoch 29/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0733\nEpoch 29: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.0688 - val_loss: 10.3808\nEpoch 30/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0092\nEpoch 30: val_loss did not improve from 10.38084\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.0169 - val_loss: 10.3808\nEpoch 31/50\n\u001b[1m  1/103\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2s\u001b[0m 29ms/step - loss: 1.33922025/02/20 12:15:33 WARNING mlflow.tensorflow: You are saving a TensorFlow Core model or Keras model without a signature. Inference with mlflow.pyfunc.spark_udf() will not work unless the model's pyfunc representation accepts pandas DataFrames as inference inputs.\n2025/02/20 12:15:41 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /tmp/tmpzc9_or1u/model, flavor: tensorflow). Fall back to return ['tensorflow==2.18.0', 'cloudpickle==3.1.1']. Set logging level to DEBUG to see the full traceback. \n\u001b[31m2025/02/20 12:15:41 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 37  55  93  41 192  66 189 177  74  56  87 178 191  83 119  65  95  92\n 122 114  99 176  50 101 116]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}\nThe model shall evaluate for 5 times\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     1     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   677    10    71     1     3     0  ...   109   478    19     0     0     0     0\n2.0      0    46   391    36     0     0     0  ...    15   239    52     0     0     0     0\n3.0      0    10    24   149     0     8     0  ...     5     9    15     0     0     0     0\n4.0      2     1     0     6   392    13     0  ...     6     1     5     0    14     1     0\n5.0      0     0     0     2    49   597     0  ...     0     1     1     4     3    36     0\n6.0      0     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     2     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     2     0    15     0  ...     0     0     0     3     0     0     0\n9.0      0    78     4     2     1     5     0  ...   503   323     6     0     0     0     0\n10.0     0   154    60    14     4    16     0  ...    71  1952    54     0     0     2     0\n11.0     0    65    90    36     0     3     0  ...    46   164   163     0     0     0     0\n12.0     0     0     0     0     0    12     0  ...     0     0     0   172     0    12     0\n13.0     0     0     0     0    23     7     0  ...     0     0     0     9  1113    48     0\n14.0     0     0     1     0    20    80     0  ...     5     0     6    26    75   144     0\n15.0     0     4     0     0     0     0     0  ...     5     0     0     0     0     0    78\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   720     9    29     3     2     0  ...   114   458    18     0     0     0     3\n2.0      0    30   441    14     1     1     0  ...     2   276    29     0     0     0     0\n3.0      0    42    59    93     2    19     0  ...     1     6     0     0     0     0     0\n4.0      0     2     0     6   360    15     3  ...     1     3     0     0    65     2     1\n5.0      0     0     0     0    69   587     0  ...     0     1     0     0     4    28     0\n6.0      0     0     0     0     0     0    22  ...     0     0     0     0     0     0     0\n7.0      1     0     0     0     3     0    12  ...     0     3     0     0     0     0     0\n8.0      0     0     0     0     2    16     0  ...     0     0     0     2     0     0     0\n9.0      0    64     5    17     7     4     0  ...   586   239     7     0     0     0     0\n10.0     0   108    67    25    11    20     1  ...    58  1993    36     0     0     0     1\n11.0     0    85    99    41     0     7     0  ...    12    98   222     0     0     0     4\n12.0     0     0     0     0     1     0     0  ...     0     0     0   191     0     0     0\n13.0     0     0     0     0    25     2     0  ...     0     0     0     6  1142    32     0\n14.0     2     0     0     4    33    76     0  ...     0     0     0    42    87   120     3\n15.0     0     7     0     0     0     0     0  ...     1     3     1     0     0     0    76\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     16     1     0     0     2     0     0  ...     0     0     0     0     0     0     0\n1.0      0   870    28    25     2     3     0  ...    87   249    73     0     0     1     4\n2.0      0   164   294    12     0     0     0  ...    52   242    30     0     0     0     0\n3.0      3    89     7    80     1    17     3  ...     4     8    14     0     0     3     0\n4.0      0     1     0     4   329    26     2  ...     0     2     6     0    60    16     0\n5.0      0     0     0     6    12   630     0  ...    11     1     1     6     3    25     0\n6.0      1     0     0     0     8     0    14  ...     0     0     0     0     0     0     0\n7.0    102     1     0    12     1     0     1  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     8     0  ...     0     0     0     5     0     3     0\n9.0      0    92    16     3     5     2     4  ...   513   267    23     0     0     1     0\n10.0     0   320    36     9    15    15     4  ...   126  1737    56     0     0     3     7\n11.0     0   176    39    18     0     3     0  ...    46   108   164     1     0     0     0\n12.0     0     0     0     0     1     2     0  ...     0     0     0   170     0    20     0\n13.0     2     0     0     0    38     5     0  ...     0     2     0     6  1097    54     0\n14.0     0     0     2     0    19    74     0  ...     1     7     3    41   102   117     0\n15.0     0     2     4     0     0     0     0  ...     0     0     7     0     0     0    75\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n/opt/conda/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     24     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   831    24    19     1     2     0  ...   130   312    32     0     0     1     0\n2.0      0    59   432     4     0     1     0  ...     9   238    53     0     0     0     0\n3.0      0    34    76    47     0     5     0  ...     4    20    40     0     0     0     0\n4.0     12     3     0     1   321    16     0  ...     6     6     8     0    31    61     0\n5.0      0     0     0     1     2   624     0  ...     1    17     1     0     9    40     0\n6.0      1     0     0     0     0     0    17  ...     0     0     0     0     0     0     0\n7.0      6     0     0     0     0     0     3  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0    14     0  ...     0     0     0     2     0     4     0\n9.0      0    48     9     5     0     1     4  ...   618   220    12     0     0     0     0\n10.0     0   153    85     9     0     9     1  ...   120  1886    59     0     0     8     0\n11.0     0    37    78     3     0     0     0  ...    48    80   313     0     0     1     0\n12.0     0     0     0     0     0     4     0  ...     0     0     0   187     0     1     0\n13.0     0     0     0     0    51     2     0  ...     0     0     0     5  1121    23     0\n14.0     0     2     2     0    13    36     0  ...     3     0     4    32   104   168     0\n15.0     0     0     0     0     0     0     0  ...     8     5     3     0     0     0    71\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      4     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   916    81     9     5     3     0  ...    76   221    39     0     0     0     0\n2.0      0   103   485    14     0     2     0  ...    12   115    59     0     0     0     0\n3.0      0    31    29    58     4    15     0  ...     4    42    43     0     0     0     0\n4.0      5     2     0     4   404    13     5  ...     5     4     3     0     7     1     0\n5.0      0     0     0     0    14   642     0  ...     0     5     0     0    19    11     0\n6.0      0     0     0     0     2     0    14  ...     2     0     0     0     0     0     0\n7.0      2     0     0     2     2     0    56  ...    13     6     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     0     0     0     0\n9.0      4   123    45    15     2     6     0  ...   405   323    10     0     0     0     0\n10.0     1   393   190    20     8     6     1  ...   185  1474    24     0     0     1     0\n11.0     1    60    63    29     1     2     0  ...    38    53   310     0     0     0     1\n12.0     0     0     0     0     0    15     0  ...     0     1     0   179     0     0     0\n13.0     0     0     0     0    37    10     0  ...     0     5     0     1  1125    25     0\n14.0     0     0     0     0    35   120     1  ...     0    13     1    30    90    80     0\n15.0     0     7    12     0     0     3     0  ...     2    13     0     0     0     0    52\n\n[16 rows x 16 columns]\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\nPerformance results saved to: results/performance_results4.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.696416          0.571028           0.649053\n1    2          0.718496          0.630997           0.674837\n2    3          0.662422          0.579924           0.611732\n3    4          0.729485          0.647031           0.688786\n4    5          0.671973          0.609020           0.625393\n\nAverage Performance Over 5 Runs:\nOverall Accuracy: 0.7017\nAverage Accuracy: 0.6072\nKappa Coefficient: 0.6561\n🏃 View run SRL-SOA_run4 at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0/runs/ea5651e30c0c49f980a52c6f049e8f60\n🧪 View experiment at: https://dagshub.com/vidhi-gajra-git/SRL_SOA.mlflow/#/experiments/0\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ Oper1D (\u001b[94mOper1D\u001b[0m)           │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_5 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ Oper1D[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m],          │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.2739\nEpoch 1: val_loss improved from inf to 6.42319, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - loss: 3.2551 - val_loss: 6.4232\nEpoch 2/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.9605\nEpoch 2: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 3.9064 - val_loss: 6.4232\nEpoch 3/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.2579\nEpoch 3: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 3.2553 - val_loss: 6.4232\nEpoch 4/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.9525\nEpoch 4: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.9575 - val_loss: 6.4232\nEpoch 5/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.7362\nEpoch 5: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.7427 - val_loss: 6.4232\nEpoch 6/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.7445\nEpoch 6: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.7480 - val_loss: 6.4232\nEpoch 7/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.7143\nEpoch 7: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.7158 - val_loss: 6.4232\nEpoch 8/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.6616\nEpoch 8: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6619 - val_loss: 6.4232\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.6081\nEpoch 9: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.6085 - val_loss: 6.4232\nEpoch 10/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.5557\nEpoch 10: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.5581 - val_loss: 6.4232\nEpoch 11/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.5010\nEpoch 11: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.5075 - val_loss: 6.4232\nEpoch 12/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4589\nEpoch 12: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4597 - val_loss: 6.4232\nEpoch 13/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4078\nEpoch 13: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.4133 - val_loss: 6.4232\nEpoch 14/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3740\nEpoch 14: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.3802 - val_loss: 6.4232\nEpoch 15/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3301\nEpoch 15: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.3353 - val_loss: 6.4232\nEpoch 16/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3634\nEpoch 16: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.3688 - val_loss: 6.4232\nEpoch 17/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2616\nEpoch 17: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.2729 - val_loss: 6.4232\nEpoch 18/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2762\nEpoch 18: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.2850 - val_loss: 6.4232\nEpoch 19/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2414\nEpoch 19: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2541 - val_loss: 6.4232\nEpoch 20/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2193\nEpoch 20: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.2307 - val_loss: 6.4232\nEpoch 21/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2000\nEpoch 21: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.2121 - val_loss: 6.4232\nEpoch 22/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.1904\nEpoch 22: val_loss did not improve from 6.42319\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 1.1952 - val_loss: 6.4232\nEpoch 23/50\n\u001b[1m 64/103\u001b[0m \u001b[32m━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.0585","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"%cd ..\n!rm -r SRL-SOA\n!git clone https://github.com/vidhi-gajra-git/SRL-SOA.git\n\n%cd SRL-SOA\n!mkdir data \n!cp /kaggle/input/hyperspectral-image-sensing-dataset-ground-truth/*.mat data/\n\n%matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n# with kernel initializer , multi layer \n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:14:38.001987Z","iopub.execute_input":"2025-02-20T16:14:38.002456Z","iopub.status.idle":"2025-02-20T16:15:04.260328Z","shell.execute_reply.started":"2025-02-20T16:14:38.002420Z","shell.execute_reply":"2025-02-20T16:15:04.258837Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"/kaggle\nrm: cannot remove 'SRL-SOA': No such file or directory\nCloning into 'SRL-SOA'...\nremote: Enumerating objects: 881, done.\u001b[K\nremote: Counting objects: 100% (124/124), done.\u001b[K\nremote: Compressing objects: 100% (93/93), done.\u001b[K\nremote: Total 881 (delta 87), reused 31 (delta 31), pack-reused 757 (from 3)\u001b[K\nReceiving objects: 100% (881/881), 1.13 MiB | 20.97 MiB/s, done.\nResolving deltas: 100% (557/557), done.\n/kaggle/SRL-SOA\n2025-02-20 16:14:43.754493: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2025-02-20 16:14:44.026936: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2025-02-20 16:14:44.103740: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nTraceback (most recent call last):\n  File \"/kaggle/SRL-SOA/main.py\", line 10, in <module>\n    import utils\n  File \"/kaggle/SRL-SOA/utils.py\", line 18, in <module>\n    import mlflow\nModuleNotFoundError: No module named 'mlflow'\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pwd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T07:23:23.079845Z","iopub.execute_input":"2025-02-19T07:23:23.080181Z","iopub.status.idle":"2025-02-19T07:23:23.197187Z","shell.execute_reply.started":"2025-02-19T07:23:23.080154Z","shell.execute_reply":"2025-02-19T07:23:23.196180Z"}},"outputs":[{"name":"stdout","text":"/kaggle/SRL-SOA\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"%matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n# a constant added ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T14:13:14.435514Z","iopub.execute_input":"2025-02-19T14:13:14.436115Z","iopub.status.idle":"2025-02-19T14:18:05.301407Z","shell.execute_reply.started":"2025-02-19T14:13:14.436044Z","shell.execute_reply":"2025-02-19T14:18:05.299919Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"2025-02-19 14:13:15.190310: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2025-02-19 14:13:15.218237: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2025-02-19 14:13:15.226299: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n\nScene:  (145, 145, 200)\n\nClassification:\nTraining samples:  512\nTest samples:  9737\n\n\nNumber of bands:  200\n**********  METHOD : SVM **********\n\t\t\t\t\t *****  #RUNS : 6  *****\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot (\u001b[94mDot\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.2807\nEpoch 1: val_loss improved from inf to 4.12400, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 9ms/step - loss: 1.2694 - val_loss: 4.1240\nEpoch 2/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6890\nEpoch 2: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6795 - val_loss: 4.1240\nEpoch 3/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5003\nEpoch 3: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5087 - val_loss: 4.1240\nEpoch 4/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5876\nEpoch 4: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5833 - val_loss: 4.1240\nEpoch 5/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4070\nEpoch 5: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4091 - val_loss: 4.1240\nEpoch 6/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4314\nEpoch 6: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4311 - val_loss: 4.1240\nEpoch 7/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5006\nEpoch 7: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5021 - val_loss: 4.1240\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3748\nEpoch 8: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3748 - val_loss: 4.1240\nEpoch 9/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4777\nEpoch 9: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4839 - val_loss: 4.1240\nEpoch 10/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3994\nEpoch 10: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3962 - val_loss: 4.1240\nEpoch 11/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4516\nEpoch 11: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4544 - val_loss: 4.1240\nEpoch 12/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3505\nEpoch 12: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3524 - val_loss: 4.1240\nEpoch 13/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3724\nEpoch 13: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - loss: 0.3731 - val_loss: 4.1240\nEpoch 14/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3492\nEpoch 14: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3512 - val_loss: 4.1240\nEpoch 15/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3367\nEpoch 15: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3381 - val_loss: 4.1240\nEpoch 16/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3176\nEpoch 16: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3206 - val_loss: 4.1240\nEpoch 17/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3201\nEpoch 17: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3227 - val_loss: 4.1240\nEpoch 18/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3311\nEpoch 18: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3308 - val_loss: 4.1240\nEpoch 19/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3155\nEpoch 19: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3174 - val_loss: 4.1240\nEpoch 20/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3163\nEpoch 20: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3190 - val_loss: 4.1240\nEpoch 21/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3163\nEpoch 21: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3191 - val_loss: 4.1240\nEpoch 22/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3229\nEpoch 22: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3261 - val_loss: 4.1240\nEpoch 23/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3211\nEpoch 23: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3237 - val_loss: 4.1240\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3156\nEpoch 24: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3168 - val_loss: 4.1240\nEpoch 25/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3234\nEpoch 25: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3254 - val_loss: 4.1240\nEpoch 26/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3262\nEpoch 26: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3269 - val_loss: 4.1240\nEpoch 27/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2831\nEpoch 27: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2850 - val_loss: 4.1240\nEpoch 28/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3454\nEpoch 28: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3453 - val_loss: 4.1240\nEpoch 29/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3109\nEpoch 29: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3158 - val_loss: 4.1240\nEpoch 30/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4116\nEpoch 30: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4117 - val_loss: 4.1240\nEpoch 31/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3631\nEpoch 31: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3675 - val_loss: 4.1240\nEpoch 32/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4081\nEpoch 32: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4118 - val_loss: 4.1240\nEpoch 33/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3476\nEpoch 33: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3471 - val_loss: 4.1240\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2716\nEpoch 34: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2719 - val_loss: 4.1240\nEpoch 35/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3855\nEpoch 35: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3847 - val_loss: 4.1240\nEpoch 36/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2808\nEpoch 36: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2843 - val_loss: 4.1240\nEpoch 37/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3334\nEpoch 37: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3337 - val_loss: 4.1240\nEpoch 38/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3714\nEpoch 38: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3717 - val_loss: 4.1240\nEpoch 39/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2931\nEpoch 39: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2958 - val_loss: 4.1240\nEpoch 40/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2651\nEpoch 40: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2668 - val_loss: 4.1240\nEpoch 41/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5366\nEpoch 41: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.5390 - val_loss: 4.1240\nEpoch 42/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3562\nEpoch 42: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3546 - val_loss: 4.1240\nEpoch 43/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4895\nEpoch 43: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.4937 - val_loss: 4.1240\nEpoch 44/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3391\nEpoch 44: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3391 - val_loss: 4.1240\nEpoch 45/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3182\nEpoch 45: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3203 - val_loss: 4.1240\nEpoch 46/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2859\nEpoch 46: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2873 - val_loss: 4.1240\nEpoch 47/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2628\nEpoch 47: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2625 - val_loss: 4.1240\nEpoch 48/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2715\nEpoch 48: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2707 - val_loss: 4.1240\nEpoch 49/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2531\nEpoch 49: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2538 - val_loss: 4.1240\nEpoch 50/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2953\nEpoch 50: val_loss did not improve from 4.12400\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3005 - val_loss: 4.1240\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [188   0 162 100 179  11  35  91 175 144 127 133 122 138 120  52  64 110\n 185 150  61  53  40  70 118]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 1 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   737    20    82     0     2     0  ...   139   375    13     0     0     0     0\n2.0      0    97   404    36     0     2     0  ...    15   192    33     0     0     0     0\n3.0      0    33    37   129     0     1     0  ...     4     3    13     0     0     1     0\n4.0      2     1     2     4   389     7     0  ...    10    10     2     0     8     7     0\n5.0      0     2     0     2    11   654     0  ...     1     1     0     0     3    19     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      3     3     0     0     1     0     0  ...     0     4     0     0     0     0     0\n8.0      0     2     0     0     1    14     0  ...     0     0     0     0     0     3     0\n9.0      0    53     6     6     2     3     0  ...   503   330    20     0     0     0     0\n10.0     0   163    57    25     4     9     0  ...   123  1904    36     0     0     5     0\n11.0     0    60    77    44     1     1     0  ...    42   159   183     0     0     0     0\n12.0     0     1     0     0     0     7     0  ...     0     0     0   174     0    14     0\n13.0     0     0     0     0    19     1     0  ...     0     0     0     3  1107    72     0\n14.0     2     3     1     0    24    51     0  ...     3     0     1    33    82   160     0\n15.0     0     4     0     0     0     0     0  ...     9     2     0     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results0.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.704221          0.572424           0.658924\n\nAverage Performance Over 1 Runs:\nOverall Accuracy: 0.7042\nAverage Accuracy: 0.5724\nKappa Coefficient: 0.6589\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_1 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 1.1650\nEpoch 1: val_loss improved from inf to 2.61901, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 12ms/step - loss: 1.1534 - val_loss: 2.6190\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6052\nEpoch 2: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.6036 - val_loss: 2.6190\nEpoch 3/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5587\nEpoch 3: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.5559 - val_loss: 2.6190\nEpoch 4/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5492\nEpoch 4: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5457 - val_loss: 2.6190\nEpoch 5/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4646\nEpoch 5: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4634 - val_loss: 2.6190\nEpoch 6/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5255\nEpoch 6: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5246 - val_loss: 2.6190\nEpoch 7/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4892\nEpoch 7: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4885 - val_loss: 2.6190\nEpoch 8/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5026\nEpoch 8: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5015 - val_loss: 2.6190\nEpoch 9/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5074\nEpoch 9: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5040 - val_loss: 2.6190\nEpoch 10/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3861\nEpoch 10: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3966 - val_loss: 2.6190\nEpoch 11/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5552\nEpoch 11: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.5486 - val_loss: 2.6190\nEpoch 12/50\n\u001b[1m 91/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4661\nEpoch 12: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4629 - val_loss: 2.6190\nEpoch 13/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4472\nEpoch 13: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4459 - val_loss: 2.6190\nEpoch 14/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4438\nEpoch 14: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4479 - val_loss: 2.6190\nEpoch 15/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4331\nEpoch 15: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4327 - val_loss: 2.6190\nEpoch 16/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3991\nEpoch 16: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4003 - val_loss: 2.6190\nEpoch 17/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4169\nEpoch 17: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4168 - val_loss: 2.6190\nEpoch 18/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4609\nEpoch 18: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4628 - val_loss: 2.6190\nEpoch 19/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4686\nEpoch 19: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4653 - val_loss: 2.6190\nEpoch 20/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3887\nEpoch 20: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3889 - val_loss: 2.6190\nEpoch 21/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4704\nEpoch 21: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4680 - val_loss: 2.6190\nEpoch 22/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4089\nEpoch 22: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4109 - val_loss: 2.6190\nEpoch 23/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4887\nEpoch 23: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4849 - val_loss: 2.6190\nEpoch 24/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4502\nEpoch 24: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4495 - val_loss: 2.6190\nEpoch 25/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4514\nEpoch 25: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4510 - val_loss: 2.6190\nEpoch 26/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4346\nEpoch 26: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4347 - val_loss: 2.6190\nEpoch 27/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5061\nEpoch 27: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5065 - val_loss: 2.6190\nEpoch 28/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5197\nEpoch 28: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5182 - val_loss: 2.6190\nEpoch 29/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4435\nEpoch 29: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4424 - val_loss: 2.6190\nEpoch 30/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4859\nEpoch 30: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4827 - val_loss: 2.6190\nEpoch 31/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4345\nEpoch 31: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4328 - val_loss: 2.6190\nEpoch 32/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4448\nEpoch 32: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4432 - val_loss: 2.6190\nEpoch 33/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3731\nEpoch 33: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3717 - val_loss: 2.6190\nEpoch 34/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3766\nEpoch 34: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3768 - val_loss: 2.6190\nEpoch 35/50\n\u001b[1m 91/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3297\nEpoch 35: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3291 - val_loss: 2.6190\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3053\nEpoch 36: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3062 - val_loss: 2.6190\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3273\nEpoch 37: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3277 - val_loss: 2.6190\nEpoch 38/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3293\nEpoch 38: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3304 - val_loss: 2.6190\nEpoch 39/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3453\nEpoch 39: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3451 - val_loss: 2.6190\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3731\nEpoch 40: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3737 - val_loss: 2.6190\nEpoch 41/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3613\nEpoch 41: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3604 - val_loss: 2.6190\nEpoch 42/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3427\nEpoch 42: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3436 - val_loss: 2.6190\nEpoch 43/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3367\nEpoch 43: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3363 - val_loss: 2.6190\nEpoch 44/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3352\nEpoch 44: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3365 - val_loss: 2.6190\nEpoch 45/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3679\nEpoch 45: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3659 - val_loss: 2.6190\nEpoch 46/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3651\nEpoch 46: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3659 - val_loss: 2.6190\nEpoch 47/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3964\nEpoch 47: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3923 - val_loss: 2.6190\nEpoch 48/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3334\nEpoch 48: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3335 - val_loss: 2.6190\nEpoch 49/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3440\nEpoch 49: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3420 - val_loss: 2.6190\nEpoch 50/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3283\nEpoch 50: val_loss did not improve from 2.61901\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3284 - val_loss: 2.6190\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [123 147  92  73   9 134 191 146  19  14 106 102  50 142  21 137 107 196\n 100 130  37  15  33 163  63]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 2 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   737    20    82     0     2     0  ...   139   375    13     0     0     0     0\n2.0      0    97   404    36     0     2     0  ...    15   192    33     0     0     0     0\n3.0      0    33    37   129     0     1     0  ...     4     3    13     0     0     1     0\n4.0      2     1     2     4   389     7     0  ...    10    10     2     0     8     7     0\n5.0      0     2     0     2    11   654     0  ...     1     1     0     0     3    19     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      3     3     0     0     1     0     0  ...     0     4     0     0     0     0     0\n8.0      0     2     0     0     1    14     0  ...     0     0     0     0     0     3     0\n9.0      0    53     6     6     2     3     0  ...   503   330    20     0     0     0     0\n10.0     0   163    57    25     4     9     0  ...   123  1904    36     0     0     5     0\n11.0     0    60    77    44     1     1     0  ...    42   159   183     0     0     0     0\n12.0     0     1     0     0     0     7     0  ...     0     0     0   174     0    14     0\n13.0     0     0     0     0    19     1     0  ...     0     0     0     3  1107    72     0\n14.0     2     3     1     0    24    51     0  ...     3     0     1    33    82   160     0\n15.0     0     4     0     0     0     0     0  ...     9     2     0     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      8     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   779    28    13     2     2     0  ...    73   421    36     0     0     0     2\n2.0      0    31   429    18     0     2     0  ...     4   272    38     0     0     0     0\n3.0      0    35    32   134     1     7     0  ...     4     8     0     0     0     0     0\n4.0      0     4     0     4   398     9     0  ...     0     3     0     0    36     1     0\n5.0      0     0     0     0    14   634     0  ...     0     2     0     1     0    38     0\n6.0      0     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     1     0     6  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    17     0  ...     0     0     0     2     0     0     0\n9.0      0    66     5     8     3     4     0  ...   561   270    10     0     0     0     1\n10.0     0   139    50     7     9    13     2  ...    68  1971    53     0     0     6     1\n11.0     0    61    45    20     0     7     0  ...    28   166   237     0     0     0     4\n12.0     0     0     0     0     1     4     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     1    22     2     0  ...     0     0     0     1  1144    37     0\n14.0     3     0     0     2    29    56     0  ...     1     0     0    36    89   146     5\n15.0     0     2     0     0     0     0     0  ...     0     4     6     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results1.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.704221          0.572424           0.658924\n1    2          0.735339          0.624800           0.694008\n\nAverage Performance Over 2 Runs:\nOverall Accuracy: 0.7198\nAverage Accuracy: 0.5986\nKappa Coefficient: 0.6765\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_2 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4062\nEpoch 1: val_loss improved from inf to 3.27366, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - loss: 1.4023 - val_loss: 3.2737\nEpoch 2/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.7567\nEpoch 2: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.7510 - val_loss: 3.2737\nEpoch 3/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5728\nEpoch 3: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5707 - val_loss: 3.2737\nEpoch 4/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5386\nEpoch 4: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5346 - val_loss: 3.2737\nEpoch 5/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.6316\nEpoch 5: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6223 - val_loss: 3.2737\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3724\nEpoch 6: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3722 - val_loss: 3.2737\nEpoch 7/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4228\nEpoch 7: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4219 - val_loss: 3.2737\nEpoch 8/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3667\nEpoch 8: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3663 - val_loss: 3.2737\nEpoch 9/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3389\nEpoch 9: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3406 - val_loss: 3.2737\nEpoch 10/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3552\nEpoch 10: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3537 - val_loss: 3.2737\nEpoch 11/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3268\nEpoch 11: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3273 - val_loss: 3.2737\nEpoch 12/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4451\nEpoch 12: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4445 - val_loss: 3.2737\nEpoch 13/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5226\nEpoch 13: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5225 - val_loss: 3.2737\nEpoch 14/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4584\nEpoch 14: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4559 - val_loss: 3.2737\nEpoch 15/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2867\nEpoch 15: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2855 - val_loss: 3.2737\nEpoch 16/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2837\nEpoch 16: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2829 - val_loss: 3.2737\nEpoch 17/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3189\nEpoch 17: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3170 - val_loss: 3.2737\nEpoch 18/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3371\nEpoch 18: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3364 - val_loss: 3.2737\nEpoch 19/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5995\nEpoch 19: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5910 - val_loss: 3.2737\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3835\nEpoch 20: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3831 - val_loss: 3.2737\nEpoch 21/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5163\nEpoch 21: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5072 - val_loss: 3.2737\nEpoch 22/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3917\nEpoch 22: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3904 - val_loss: 3.2737\nEpoch 23/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2803\nEpoch 23: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2807 - val_loss: 3.2737\nEpoch 24/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3290\nEpoch 24: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3274 - val_loss: 3.2737\nEpoch 25/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3591\nEpoch 25: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3595 - val_loss: 3.2737\nEpoch 26/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5902\nEpoch 26: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5863 - val_loss: 3.2737\nEpoch 27/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4303\nEpoch 27: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4291 - val_loss: 3.2737\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4858\nEpoch 28: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4840 - val_loss: 3.2737\nEpoch 29/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3462\nEpoch 29: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3476 - val_loss: 3.2737\nEpoch 30/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3611\nEpoch 30: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3612 - val_loss: 3.2737\nEpoch 31/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3973\nEpoch 31: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3965 - val_loss: 3.2737\nEpoch 32/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3947\nEpoch 32: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3928 - val_loss: 3.2737\nEpoch 33/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3090\nEpoch 33: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3104 - val_loss: 3.2737\nEpoch 34/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3210\nEpoch 34: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3215 - val_loss: 3.2737\nEpoch 35/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3199\nEpoch 35: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3202 - val_loss: 3.2737\nEpoch 36/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3272\nEpoch 36: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3275 - val_loss: 3.2737\nEpoch 37/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3352\nEpoch 37: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3347 - val_loss: 3.2737\nEpoch 38/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3374\nEpoch 38: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3368 - val_loss: 3.2737\nEpoch 39/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3392\nEpoch 39: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3381 - val_loss: 3.2737\nEpoch 40/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3366\nEpoch 40: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3344 - val_loss: 3.2737\nEpoch 41/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3311\nEpoch 41: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3299 - val_loss: 3.2737\nEpoch 42/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3284\nEpoch 42: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3281 - val_loss: 3.2737\nEpoch 43/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3328\nEpoch 43: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3328 - val_loss: 3.2737\nEpoch 44/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3984\nEpoch 44: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3995 - val_loss: 3.2737\nEpoch 45/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.9993\nEpoch 45: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.9755 - val_loss: 3.2737\nEpoch 46/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.6846\nEpoch 46: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6706 - val_loss: 3.2737\nEpoch 47/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6715\nEpoch 47: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6556 - val_loss: 3.2737\nEpoch 48/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5673\nEpoch 48: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5610 - val_loss: 3.2737\nEpoch 49/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5856\nEpoch 49: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5792 - val_loss: 3.2737\nEpoch 50/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5434\nEpoch 50: val_loss did not improve from 3.27366\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5333 - val_loss: 3.2737\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [165 182  59 153 141 113  82 110  17 185  55  34  89 172   0 139   5 192\n 195  67 124 116 101 164  69]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 3 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   737    20    82     0     2     0  ...   139   375    13     0     0     0     0\n2.0      0    97   404    36     0     2     0  ...    15   192    33     0     0     0     0\n3.0      0    33    37   129     0     1     0  ...     4     3    13     0     0     1     0\n4.0      2     1     2     4   389     7     0  ...    10    10     2     0     8     7     0\n5.0      0     2     0     2    11   654     0  ...     1     1     0     0     3    19     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      3     3     0     0     1     0     0  ...     0     4     0     0     0     0     0\n8.0      0     2     0     0     1    14     0  ...     0     0     0     0     0     3     0\n9.0      0    53     6     6     2     3     0  ...   503   330    20     0     0     0     0\n10.0     0   163    57    25     4     9     0  ...   123  1904    36     0     0     5     0\n11.0     0    60    77    44     1     1     0  ...    42   159   183     0     0     0     0\n12.0     0     1     0     0     0     7     0  ...     0     0     0   174     0    14     0\n13.0     0     0     0     0    19     1     0  ...     0     0     0     3  1107    72     0\n14.0     2     3     1     0    24    51     0  ...     3     0     1    33    82   160     0\n15.0     0     4     0     0     0     0     0  ...     9     2     0     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      8     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   779    28    13     2     2     0  ...    73   421    36     0     0     0     2\n2.0      0    31   429    18     0     2     0  ...     4   272    38     0     0     0     0\n3.0      0    35    32   134     1     7     0  ...     4     8     0     0     0     0     0\n4.0      0     4     0     4   398     9     0  ...     0     3     0     0    36     1     0\n5.0      0     0     0     0    14   634     0  ...     0     2     0     1     0    38     0\n6.0      0     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     1     0     6  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    17     0  ...     0     0     0     2     0     0     0\n9.0      0    66     5     8     3     4     0  ...   561   270    10     0     0     0     1\n10.0     0   139    50     7     9    13     2  ...    68  1971    53     0     0     6     1\n11.0     0    61    45    20     0     7     0  ...    28   166   237     0     0     0     4\n12.0     0     0     0     0     1     4     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     1    22     2     0  ...     0     0     0     1  1144    37     0\n14.0     3     0     0     2    29    56     0  ...     1     0     0    36    89   146     5\n15.0     0     2     0     0     0     0     0  ...     0     4     6     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      9     0     0     0     0     0     0  ...     0     1     0     0     0     0     0\n1.0      0   907     9    14     4     5     0  ...   119   261    25     0     0     0     0\n2.0      0    62   374     9     0     3     0  ...     8   261    77     0     0     0     0\n3.0      0    44    13    71     2    22     0  ...     3    35    37     0     0     0     0\n4.0      1     0     0     3   370    27     0  ...     2     1     3     0    36     3     0\n5.0      0     0     0     0     7   665     0  ...     3     0     0     7     1    13     0\n6.0      0     0     0     0     8     0     6  ...     0     0     0     0     0     0     0\n7.0     26     0     0     0    13     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0    12     0  ...     0     0     0     6     0     0     0\n9.0      0    43    15     1     9     3     0  ...   553   291    10     0     0     1     0\n10.0     0   165    49     2    13    21     0  ...    90  1939    44     0     0     1     4\n11.0     0    81    56    11     1     4     0  ...    19   144   238     0     0     2     0\n12.0     0     0     0     0     0     1     0  ...     0     0     0   192     0     0     0\n13.0     2     0     0     0    43     2     0  ...     0     0     0     4  1132    21     0\n14.0     1     2     0     0    10    51     0  ...     0     0     1    48   123   130     0\n15.0     0     3     1     0     1     0     0  ...     4     0     2     0     0     2    75\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results2.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.704221          0.572424           0.658924\n1    2          0.735339          0.624800           0.694008\n2    3          0.727329          0.600676           0.685136\n\nAverage Performance Over 3 Runs:\nOverall Accuracy: 0.7223\nAverage Accuracy: 0.5993\nKappa Coefficient: 0.6794\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_3 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 1.0604\nEpoch 1: val_loss improved from inf to 2.56886, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 9ms/step - loss: 1.0401 - val_loss: 2.5689\nEpoch 2/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5865\nEpoch 2: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5852 - val_loss: 2.5689\nEpoch 3/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5836\nEpoch 3: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5833 - val_loss: 2.5689\nEpoch 4/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4376\nEpoch 4: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4373 - val_loss: 2.5689\nEpoch 5/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5328\nEpoch 5: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.5337 - val_loss: 2.5689\nEpoch 6/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3754\nEpoch 6: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3757 - val_loss: 2.5689\nEpoch 7/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4987\nEpoch 7: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4982 - val_loss: 2.5689\nEpoch 8/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4903\nEpoch 8: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4884 - val_loss: 2.5689\nEpoch 9/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3951\nEpoch 9: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3937 - val_loss: 2.5689\nEpoch 10/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3889\nEpoch 10: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3881 - val_loss: 2.5689\nEpoch 11/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3505\nEpoch 11: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3499 - val_loss: 2.5689\nEpoch 12/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3499\nEpoch 12: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3494 - val_loss: 2.5689\nEpoch 13/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3654\nEpoch 13: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3692 - val_loss: 2.5689\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5541\nEpoch 14: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5526 - val_loss: 2.5689\nEpoch 15/50\n\u001b[1m 91/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3703\nEpoch 15: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - loss: 0.3679 - val_loss: 2.5689\nEpoch 16/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3157\nEpoch 16: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3176 - val_loss: 2.5689\nEpoch 17/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3028\nEpoch 17: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3031 - val_loss: 2.5689\nEpoch 18/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.3078\nEpoch 18: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - loss: 0.3076 - val_loss: 2.5689\nEpoch 19/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4983\nEpoch 19: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4947 - val_loss: 2.5689\nEpoch 20/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2865\nEpoch 20: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2874 - val_loss: 2.5689\nEpoch 21/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5022\nEpoch 21: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4998 - val_loss: 2.5689\nEpoch 22/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2790\nEpoch 22: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 0.2789 - val_loss: 2.5689\nEpoch 23/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4034\nEpoch 23: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.4002 - val_loss: 2.5689\nEpoch 24/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2776\nEpoch 24: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2786 - val_loss: 2.5689\nEpoch 25/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5275\nEpoch 25: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5257 - val_loss: 2.5689\nEpoch 26/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2731\nEpoch 26: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2729 - val_loss: 2.5689\nEpoch 27/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3313\nEpoch 27: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3283 - val_loss: 2.5689\nEpoch 28/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2864\nEpoch 28: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2853 - val_loss: 2.5689\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2646\nEpoch 29: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2647 - val_loss: 2.5689\nEpoch 30/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2762\nEpoch 30: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2774 - val_loss: 2.5689\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3218\nEpoch 31: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3238 - val_loss: 2.5689\nEpoch 32/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5557\nEpoch 32: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5464 - val_loss: 2.5689\nEpoch 33/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3680\nEpoch 33: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3671 - val_loss: 2.5689\nEpoch 34/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2944\nEpoch 34: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2976 - val_loss: 2.5689\nEpoch 35/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4812\nEpoch 35: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4783 - val_loss: 2.5689\nEpoch 36/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2936\nEpoch 36: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2958 - val_loss: 2.5689\nEpoch 37/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4714\nEpoch 37: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4651 - val_loss: 2.5689\nEpoch 38/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2664\nEpoch 38: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2645 - val_loss: 2.5689\nEpoch 39/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2635\nEpoch 39: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2617 - val_loss: 2.5689\nEpoch 40/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2551\nEpoch 40: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2539 - val_loss: 2.5689\nEpoch 41/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2575\nEpoch 41: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2628 - val_loss: 2.5689\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.6204\nEpoch 42: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6158 - val_loss: 2.5689\nEpoch 43/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2547\nEpoch 43: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2577 - val_loss: 2.5689\nEpoch 44/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2876\nEpoch 44: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2939 - val_loss: 2.5689\nEpoch 45/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4557\nEpoch 45: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4506 - val_loss: 2.5689\nEpoch 46/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3031\nEpoch 46: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3064 - val_loss: 2.5689\nEpoch 47/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4767\nEpoch 47: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4721 - val_loss: 2.5689\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2680\nEpoch 48: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2674 - val_loss: 2.5689\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2614\nEpoch 49: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2634 - val_loss: 2.5689\nEpoch 50/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5494\nEpoch 50: val_loss did not improve from 2.56886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5408 - val_loss: 2.5689\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 15  23  71  98  22   2 112 185 194 114 157 167  34   0  55 189 129  37\n  42 162  40 106  73  63 109]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 4 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   737    20    82     0     2     0  ...   139   375    13     0     0     0     0\n2.0      0    97   404    36     0     2     0  ...    15   192    33     0     0     0     0\n3.0      0    33    37   129     0     1     0  ...     4     3    13     0     0     1     0\n4.0      2     1     2     4   389     7     0  ...    10    10     2     0     8     7     0\n5.0      0     2     0     2    11   654     0  ...     1     1     0     0     3    19     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      3     3     0     0     1     0     0  ...     0     4     0     0     0     0     0\n8.0      0     2     0     0     1    14     0  ...     0     0     0     0     0     3     0\n9.0      0    53     6     6     2     3     0  ...   503   330    20     0     0     0     0\n10.0     0   163    57    25     4     9     0  ...   123  1904    36     0     0     5     0\n11.0     0    60    77    44     1     1     0  ...    42   159   183     0     0     0     0\n12.0     0     1     0     0     0     7     0  ...     0     0     0   174     0    14     0\n13.0     0     0     0     0    19     1     0  ...     0     0     0     3  1107    72     0\n14.0     2     3     1     0    24    51     0  ...     3     0     1    33    82   160     0\n15.0     0     4     0     0     0     0     0  ...     9     2     0     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      8     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   779    28    13     2     2     0  ...    73   421    36     0     0     0     2\n2.0      0    31   429    18     0     2     0  ...     4   272    38     0     0     0     0\n3.0      0    35    32   134     1     7     0  ...     4     8     0     0     0     0     0\n4.0      0     4     0     4   398     9     0  ...     0     3     0     0    36     1     0\n5.0      0     0     0     0    14   634     0  ...     0     2     0     1     0    38     0\n6.0      0     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     1     0     6  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    17     0  ...     0     0     0     2     0     0     0\n9.0      0    66     5     8     3     4     0  ...   561   270    10     0     0     0     1\n10.0     0   139    50     7     9    13     2  ...    68  1971    53     0     0     6     1\n11.0     0    61    45    20     0     7     0  ...    28   166   237     0     0     0     4\n12.0     0     0     0     0     1     4     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     1    22     2     0  ...     0     0     0     1  1144    37     0\n14.0     3     0     0     2    29    56     0  ...     1     0     0    36    89   146     5\n15.0     0     2     0     0     0     0     0  ...     0     4     6     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      9     0     0     0     0     0     0  ...     0     1     0     0     0     0     0\n1.0      0   907     9    14     4     5     0  ...   119   261    25     0     0     0     0\n2.0      0    62   374     9     0     3     0  ...     8   261    77     0     0     0     0\n3.0      0    44    13    71     2    22     0  ...     3    35    37     0     0     0     0\n4.0      1     0     0     3   370    27     0  ...     2     1     3     0    36     3     0\n5.0      0     0     0     0     7   665     0  ...     3     0     0     7     1    13     0\n6.0      0     0     0     0     8     0     6  ...     0     0     0     0     0     0     0\n7.0     26     0     0     0    13     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0    12     0  ...     0     0     0     6     0     0     0\n9.0      0    43    15     1     9     3     0  ...   553   291    10     0     0     1     0\n10.0     0   165    49     2    13    21     0  ...    90  1939    44     0     0     1     4\n11.0     0    81    56    11     1     4     0  ...    19   144   238     0     0     2     0\n12.0     0     0     0     0     0     1     0  ...     0     0     0   192     0     0     0\n13.0     2     0     0     0    43     2     0  ...     0     0     0     4  1132    21     0\n14.0     1     2     0     0    10    51     0  ...     0     0     1    48   123   130     0\n15.0     0     3     1     0     1     0     0  ...     4     0     2     0     0     2    75\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      7     0     0     0     0     0     0  ...     0     0     1     0     0     0     0\n1.0      0   800    21    16     1     3     0  ...   149   349    14     0     0     0     0\n2.0      0   106   394    16     0     0     0  ...    37   218    25     0     0     0     0\n3.0      1    38    49   108     0     6     0  ...     6     7    12     0     0     0     0\n4.0     13     3     0     2   370    25     0  ...     7     6     8     0    12    20     0\n5.0      0     1     0     7     2   615     0  ...     1    26     0     0     3    40     0\n6.0      1     0     0     0     0     0     3  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     1     0    15     0  ...     0     0     0     3     0     1     0\n9.0      0    96     9     2     0     1     0  ...   657   140    12     0     0     0     0\n10.0     0   202    64     9     1     9     0  ...   156  1835    50     0     0     3     0\n11.0     0    55    33     2     0     0     0  ...    79    92   297     0     0     1     1\n12.0     0     0     0     0     0     0     0  ...     0     2     0   186     0     4     0\n13.0     0     0     0     0    12     2     0  ...     0     0     0     5  1166    17     0\n14.0     0     0     0     0    12    57     0  ...     3     0     7    32    87   166     0\n15.0     0     1     0     0     0     0     0  ...     5     6     2     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results3.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.704221          0.572424           0.658924\n1    2          0.735339          0.624800           0.694008\n2    3          0.727329          0.600676           0.685136\n3    4          0.732156          0.611152           0.692033\n\nAverage Performance Over 4 Runs:\nOverall Accuracy: 0.7248\nAverage Accuracy: 0.6023\nKappa Coefficient: 0.6825\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_4 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 1.0298\nEpoch 1: val_loss improved from inf to 1.90886, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - loss: 1.0128 - val_loss: 1.9089\nEpoch 2/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5678\nEpoch 2: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5652 - val_loss: 1.9089\nEpoch 3/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5558\nEpoch 3: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5540 - val_loss: 1.9089\nEpoch 4/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4949\nEpoch 4: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4939 - val_loss: 1.9089\nEpoch 5/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4702\nEpoch 5: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4683 - val_loss: 1.9089\nEpoch 6/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4621\nEpoch 6: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4653 - val_loss: 1.9089\nEpoch 7/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5684\nEpoch 7: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.5659 - val_loss: 1.9089\nEpoch 8/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4463\nEpoch 8: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.4451 - val_loss: 1.9089\nEpoch 9/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.6071\nEpoch 9: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6037 - val_loss: 1.9089\nEpoch 10/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5467\nEpoch 10: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5440 - val_loss: 1.9089\nEpoch 11/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4690\nEpoch 11: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4648 - val_loss: 1.9089\nEpoch 12/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3499\nEpoch 12: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3503 - val_loss: 1.9089\nEpoch 13/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3953\nEpoch 13: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3939 - val_loss: 1.9089\nEpoch 14/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3745\nEpoch 14: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3747 - val_loss: 1.9089\nEpoch 15/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4231\nEpoch 15: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4280 - val_loss: 1.9089\nEpoch 16/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.6581\nEpoch 16: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.6539 - val_loss: 1.9089\nEpoch 17/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4957\nEpoch 17: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4885 - val_loss: 1.9089\nEpoch 18/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3495\nEpoch 18: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3521 - val_loss: 1.9089\nEpoch 19/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4299\nEpoch 19: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4285 - val_loss: 1.9089\nEpoch 20/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3611\nEpoch 20: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3613 - val_loss: 1.9089\nEpoch 21/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3772\nEpoch 21: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3770 - val_loss: 1.9089\nEpoch 22/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3540\nEpoch 22: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3546 - val_loss: 1.9089\nEpoch 23/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4184\nEpoch 23: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4188 - val_loss: 1.9089\nEpoch 24/50\n\u001b[1m 91/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5952\nEpoch 24: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - loss: 0.5872 - val_loss: 1.9089\nEpoch 25/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4994\nEpoch 25: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4967 - val_loss: 1.9089\nEpoch 26/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3899\nEpoch 26: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3902 - val_loss: 1.9089\nEpoch 27/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4170\nEpoch 27: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4171 - val_loss: 1.9089\nEpoch 28/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3920\nEpoch 28: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3921 - val_loss: 1.9089\nEpoch 29/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4944\nEpoch 29: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4919 - val_loss: 1.9089\nEpoch 30/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4115\nEpoch 30: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4102 - val_loss: 1.9089\nEpoch 31/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4466\nEpoch 31: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4444 - val_loss: 1.9089\nEpoch 32/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3716\nEpoch 32: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3699 - val_loss: 1.9089\nEpoch 33/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3172\nEpoch 33: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3160 - val_loss: 1.9089\nEpoch 34/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3173\nEpoch 34: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3163 - val_loss: 1.9089\nEpoch 35/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3339\nEpoch 35: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3329 - val_loss: 1.9089\nEpoch 36/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3190\nEpoch 36: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3183 - val_loss: 1.9089\nEpoch 37/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3429\nEpoch 37: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3413 - val_loss: 1.9089\nEpoch 38/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3349\nEpoch 38: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3342 - val_loss: 1.9089\nEpoch 39/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3518\nEpoch 39: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3500 - val_loss: 1.9089\nEpoch 40/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3644\nEpoch 40: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3632 - val_loss: 1.9089\nEpoch 41/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3506\nEpoch 41: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3489 - val_loss: 1.9089\nEpoch 42/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3683\nEpoch 42: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3688 - val_loss: 1.9089\nEpoch 43/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3992\nEpoch 43: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4047 - val_loss: 1.9089\nEpoch 44/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4400\nEpoch 44: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4394 - val_loss: 1.9089\nEpoch 45/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3034\nEpoch 45: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3036 - val_loss: 1.9089\nEpoch 46/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3117\nEpoch 46: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3107 - val_loss: 1.9089\nEpoch 47/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3092\nEpoch 47: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3086 - val_loss: 1.9089\nEpoch 48/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3330\nEpoch 48: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3295 - val_loss: 1.9089\nEpoch 49/50\n\u001b[1m 93/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3340\nEpoch 49: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3324 - val_loss: 1.9089\nEpoch 50/50\n\u001b[1m 91/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3310\nEpoch 50: val_loss did not improve from 1.90886\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - loss: 0.3305 - val_loss: 1.9089\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [181 162  27  12 170 135 176  37  48 144  25  14  76 192  53 120 131 184\n 199  45 113  79  22 180  29]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 5 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   737    20    82     0     2     0  ...   139   375    13     0     0     0     0\n2.0      0    97   404    36     0     2     0  ...    15   192    33     0     0     0     0\n3.0      0    33    37   129     0     1     0  ...     4     3    13     0     0     1     0\n4.0      2     1     2     4   389     7     0  ...    10    10     2     0     8     7     0\n5.0      0     2     0     2    11   654     0  ...     1     1     0     0     3    19     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      3     3     0     0     1     0     0  ...     0     4     0     0     0     0     0\n8.0      0     2     0     0     1    14     0  ...     0     0     0     0     0     3     0\n9.0      0    53     6     6     2     3     0  ...   503   330    20     0     0     0     0\n10.0     0   163    57    25     4     9     0  ...   123  1904    36     0     0     5     0\n11.0     0    60    77    44     1     1     0  ...    42   159   183     0     0     0     0\n12.0     0     1     0     0     0     7     0  ...     0     0     0   174     0    14     0\n13.0     0     0     0     0    19     1     0  ...     0     0     0     3  1107    72     0\n14.0     2     3     1     0    24    51     0  ...     3     0     1    33    82   160     0\n15.0     0     4     0     0     0     0     0  ...     9     2     0     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      8     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   779    28    13     2     2     0  ...    73   421    36     0     0     0     2\n2.0      0    31   429    18     0     2     0  ...     4   272    38     0     0     0     0\n3.0      0    35    32   134     1     7     0  ...     4     8     0     0     0     0     0\n4.0      0     4     0     4   398     9     0  ...     0     3     0     0    36     1     0\n5.0      0     0     0     0    14   634     0  ...     0     2     0     1     0    38     0\n6.0      0     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     1     0     6  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    17     0  ...     0     0     0     2     0     0     0\n9.0      0    66     5     8     3     4     0  ...   561   270    10     0     0     0     1\n10.0     0   139    50     7     9    13     2  ...    68  1971    53     0     0     6     1\n11.0     0    61    45    20     0     7     0  ...    28   166   237     0     0     0     4\n12.0     0     0     0     0     1     4     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     1    22     2     0  ...     0     0     0     1  1144    37     0\n14.0     3     0     0     2    29    56     0  ...     1     0     0    36    89   146     5\n15.0     0     2     0     0     0     0     0  ...     0     4     6     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      9     0     0     0     0     0     0  ...     0     1     0     0     0     0     0\n1.0      0   907     9    14     4     5     0  ...   119   261    25     0     0     0     0\n2.0      0    62   374     9     0     3     0  ...     8   261    77     0     0     0     0\n3.0      0    44    13    71     2    22     0  ...     3    35    37     0     0     0     0\n4.0      1     0     0     3   370    27     0  ...     2     1     3     0    36     3     0\n5.0      0     0     0     0     7   665     0  ...     3     0     0     7     1    13     0\n6.0      0     0     0     0     8     0     6  ...     0     0     0     0     0     0     0\n7.0     26     0     0     0    13     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0    12     0  ...     0     0     0     6     0     0     0\n9.0      0    43    15     1     9     3     0  ...   553   291    10     0     0     1     0\n10.0     0   165    49     2    13    21     0  ...    90  1939    44     0     0     1     4\n11.0     0    81    56    11     1     4     0  ...    19   144   238     0     0     2     0\n12.0     0     0     0     0     0     1     0  ...     0     0     0   192     0     0     0\n13.0     2     0     0     0    43     2     0  ...     0     0     0     4  1132    21     0\n14.0     1     2     0     0    10    51     0  ...     0     0     1    48   123   130     0\n15.0     0     3     1     0     1     0     0  ...     4     0     2     0     0     2    75\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      7     0     0     0     0     0     0  ...     0     0     1     0     0     0     0\n1.0      0   800    21    16     1     3     0  ...   149   349    14     0     0     0     0\n2.0      0   106   394    16     0     0     0  ...    37   218    25     0     0     0     0\n3.0      1    38    49   108     0     6     0  ...     6     7    12     0     0     0     0\n4.0     13     3     0     2   370    25     0  ...     7     6     8     0    12    20     0\n5.0      0     1     0     7     2   615     0  ...     1    26     0     0     3    40     0\n6.0      1     0     0     0     0     0     3  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     1     0    15     0  ...     0     0     0     3     0     1     0\n9.0      0    96     9     2     0     1     0  ...   657   140    12     0     0     0     0\n10.0     0   202    64     9     1     9     0  ...   156  1835    50     0     0     3     0\n11.0     0    55    33     2     0     0     0  ...    79    92   297     0     0     1     1\n12.0     0     0     0     0     0     0     0  ...     0     2     0   186     0     4     0\n13.0     0     0     0     0    12     2     0  ...     0     0     0     5  1166    17     0\n14.0     0     0     0     0    12    57     0  ...     3     0     7    32    87   166     0\n15.0     0     1     0     0     0     0     0  ...     5     6     2     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     19     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   936    44     5     3     4     0  ...    85   238    35     0     0     0     0\n2.0      0    76   477    20     0     2     0  ...    16   179    20     0     0     0     0\n3.0      4    28    51    91     5    23     0  ...     5     5    15     0     0     0     0\n4.0      8     7     0     1   379    19     9  ...     9     0     0     0    15    12     0\n5.0      0     1     0     0    33   647     0  ...     0     0     0     0     3     7     0\n6.0      2     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      7     0     0     0     4     3     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     8     0  ...     0     0     0     0     0     0     0\n9.0      1   147     9    12     2     2     0  ...   557   194     9     0     0     0     0\n10.0     4   290   104    17     7     9     1  ...    58  1743    72     0     0     2     0\n11.0     0    49    59    14     1     3     0  ...    42    63   327     0     0     0     0\n12.0     0     0     0     0     0    17     0  ...     0     1     0   176     0     0     0\n13.0     0     0     0     0    50     6     0  ...     0     0     0     1  1087    59     0\n14.0     0     0     0     3    79    65     2  ...     2     1     1    33    70   116     0\n15.0     0     2     0     0     0     0     0  ...     6     3     8     0     0     0    70\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results4.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.704221          0.572424           0.658924\n1    2          0.735339          0.624800           0.694008\n2    3          0.727329          0.600676           0.685136\n3    4          0.732156          0.611152           0.692033\n4    5          0.728048          0.653811           0.689050\n\nAverage Performance Over 5 Runs:\nOverall Accuracy: 0.7254\nAverage Accuracy: 0.6126\nKappa Coefficient: 0.6838\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│  (\u001b[94mOper1D\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │          \u001b[32m2,400\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_5 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ [\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m], input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]    │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m2,400\u001b[0m (9.38 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 1.0863\nEpoch 1: val_loss improved from inf to 1.97521, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - loss: 1.0630 - val_loss: 1.9752\nEpoch 2/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5166\nEpoch 2: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5167 - val_loss: 1.9752\nEpoch 3/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4446\nEpoch 3: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4459 - val_loss: 1.9752\nEpoch 4/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3742\nEpoch 4: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.3757 - val_loss: 1.9752\nEpoch 5/50\n\u001b[1m 92/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.4018\nEpoch 5: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4013 - val_loss: 1.9752\nEpoch 6/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3390\nEpoch 6: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3396 - val_loss: 1.9752\nEpoch 7/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3671\nEpoch 7: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3690 - val_loss: 1.9752\nEpoch 8/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4285\nEpoch 8: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4288 - val_loss: 1.9752\nEpoch 9/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4124\nEpoch 9: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4106 - val_loss: 1.9752\nEpoch 10/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3220\nEpoch 10: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3227 - val_loss: 1.9752\nEpoch 11/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3058\nEpoch 11: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3060 - val_loss: 1.9752\nEpoch 12/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4829\nEpoch 12: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4798 - val_loss: 1.9752\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3466\nEpoch 13: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3468 - val_loss: 1.9752\nEpoch 14/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3079\nEpoch 14: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - loss: 0.3083 - val_loss: 1.9752\nEpoch 15/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3475\nEpoch 15: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3487 - val_loss: 1.9752\nEpoch 16/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3663\nEpoch 16: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3655 - val_loss: 1.9752\nEpoch 17/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4034\nEpoch 17: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4035 - val_loss: 1.9752\nEpoch 18/50\n\u001b[1m 91/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5092\nEpoch 18: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5124 - val_loss: 1.9752\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3451\nEpoch 19: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3473 - val_loss: 1.9752\nEpoch 20/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4478\nEpoch 20: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4463 - val_loss: 1.9752\nEpoch 21/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3459\nEpoch 21: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3463 - val_loss: 1.9752\nEpoch 22/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.5272\nEpoch 22: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5273 - val_loss: 1.9752\nEpoch 23/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3504\nEpoch 23: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3548 - val_loss: 1.9752\nEpoch 24/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3138\nEpoch 24: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3184 - val_loss: 1.9752\nEpoch 25/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3197\nEpoch 25: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3190 - val_loss: 1.9752\nEpoch 26/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3650\nEpoch 26: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3645 - val_loss: 1.9752\nEpoch 27/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3035\nEpoch 27: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3064 - val_loss: 1.9752\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4005\nEpoch 28: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4001 - val_loss: 1.9752\nEpoch 29/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3140\nEpoch 29: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3135 - val_loss: 1.9752\nEpoch 30/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3183\nEpoch 30: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3221 - val_loss: 1.9752\nEpoch 31/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3944\nEpoch 31: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3904 - val_loss: 1.9752\nEpoch 32/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2997\nEpoch 32: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3022 - val_loss: 1.9752\nEpoch 33/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2710\nEpoch 33: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.2721 - val_loss: 1.9752\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.5372\nEpoch 34: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.5364 - val_loss: 1.9752\nEpoch 35/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3937\nEpoch 35: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3926 - val_loss: 1.9752\nEpoch 36/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3245\nEpoch 36: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3239 - val_loss: 1.9752\nEpoch 37/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4910\nEpoch 37: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4905 - val_loss: 1.9752\nEpoch 38/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3290\nEpoch 38: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3281 - val_loss: 1.9752\nEpoch 39/50\n\u001b[1m 94/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.4342\nEpoch 39: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.4342 - val_loss: 1.9752\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2627\nEpoch 40: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2628 - val_loss: 1.9752\nEpoch 41/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2732\nEpoch 41: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2773 - val_loss: 1.9752\nEpoch 42/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3117\nEpoch 42: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3143 - val_loss: 1.9752\nEpoch 43/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2972\nEpoch 43: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3002 - val_loss: 1.9752\nEpoch 44/50\n\u001b[1m 96/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2914\nEpoch 44: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2924 - val_loss: 1.9752\nEpoch 45/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.2549\nEpoch 45: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.2563 - val_loss: 1.9752\nEpoch 46/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.3437\nEpoch 46: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3445 - val_loss: 1.9752\nEpoch 47/50\n\u001b[1m 97/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.3568\nEpoch 47: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.3543 - val_loss: 1.9752\nEpoch 48/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2529\nEpoch 48: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2533 - val_loss: 1.9752\nEpoch 49/50\n\u001b[1m 98/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2857\nEpoch 49: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2845 - val_loss: 1.9752\nEpoch 50/50\n\u001b[1m 95/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.2657\nEpoch 50: val_loss did not improve from 1.97521\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.2670 - val_loss: 1.9752\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 98 177  11   5  99 149   1   4  68  19  13 106 152  12  76  36 130  30\n 115  54  56 107 134 192  38]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}\nThe model shall evaluate for 6 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      0     0     0     1     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   737    20    82     0     2     0  ...   139   375    13     0     0     0     0\n2.0      0    97   404    36     0     2     0  ...    15   192    33     0     0     0     0\n3.0      0    33    37   129     0     1     0  ...     4     3    13     0     0     1     0\n4.0      2     1     2     4   389     7     0  ...    10    10     2     0     8     7     0\n5.0      0     2     0     2    11   654     0  ...     1     1     0     0     3    19     0\n6.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0      3     3     0     0     1     0     0  ...     0     4     0     0     0     0     0\n8.0      0     2     0     0     1    14     0  ...     0     0     0     0     0     3     0\n9.0      0    53     6     6     2     3     0  ...   503   330    20     0     0     0     0\n10.0     0   163    57    25     4     9     0  ...   123  1904    36     0     0     5     0\n11.0     0    60    77    44     1     1     0  ...    42   159   183     0     0     0     0\n12.0     0     1     0     0     0     7     0  ...     0     0     0   174     0    14     0\n13.0     0     0     0     0    19     1     0  ...     0     0     0     3  1107    72     0\n14.0     2     3     1     0    24    51     0  ...     3     0     1    33    82   160     0\n15.0     0     4     0     0     0     0     0  ...     9     2     0     0     0     0    72\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      8     1     0     0     1     0     0  ...     0     0     0     0     0     0     0\n1.0      0   779    28    13     2     2     0  ...    73   421    36     0     0     0     2\n2.0      0    31   429    18     0     2     0  ...     4   272    38     0     0     0     0\n3.0      0    35    32   134     1     7     0  ...     4     8     0     0     0     0     0\n4.0      0     4     0     4   398     9     0  ...     0     3     0     0    36     1     0\n5.0      0     0     0     0    14   634     0  ...     0     2     0     1     0    38     0\n6.0      0     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     1     0     6  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1    17     0  ...     0     0     0     2     0     0     0\n9.0      0    66     5     8     3     4     0  ...   561   270    10     0     0     0     1\n10.0     0   139    50     7     9    13     2  ...    68  1971    53     0     0     6     1\n11.0     0    61    45    20     0     7     0  ...    28   166   237     0     0     0     4\n12.0     0     0     0     0     1     4     0  ...     0     0     0   187     0     0     0\n13.0     0     0     0     1    22     2     0  ...     0     0     0     1  1144    37     0\n14.0     3     0     0     2    29    56     0  ...     1     0     0    36    89   146     5\n15.0     0     2     0     0     0     0     0  ...     0     4     6     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      9     0     0     0     0     0     0  ...     0     1     0     0     0     0     0\n1.0      0   907     9    14     4     5     0  ...   119   261    25     0     0     0     0\n2.0      0    62   374     9     0     3     0  ...     8   261    77     0     0     0     0\n3.0      0    44    13    71     2    22     0  ...     3    35    37     0     0     0     0\n4.0      1     0     0     3   370    27     0  ...     2     1     3     0    36     3     0\n5.0      0     0     0     0     7   665     0  ...     3     0     0     7     1    13     0\n6.0      0     0     0     0     8     0     6  ...     0     0     0     0     0     0     0\n7.0     26     0     0     0    13     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0    12     0  ...     0     0     0     6     0     0     0\n9.0      0    43    15     1     9     3     0  ...   553   291    10     0     0     1     0\n10.0     0   165    49     2    13    21     0  ...    90  1939    44     0     0     1     4\n11.0     0    81    56    11     1     4     0  ...    19   144   238     0     0     2     0\n12.0     0     0     0     0     0     1     0  ...     0     0     0   192     0     0     0\n13.0     2     0     0     0    43     2     0  ...     0     0     0     4  1132    21     0\n14.0     1     2     0     0    10    51     0  ...     0     0     1    48   123   130     0\n15.0     0     3     1     0     1     0     0  ...     4     0     2     0     0     2    75\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      7     0     0     0     0     0     0  ...     0     0     1     0     0     0     0\n1.0      0   800    21    16     1     3     0  ...   149   349    14     0     0     0     0\n2.0      0   106   394    16     0     0     0  ...    37   218    25     0     0     0     0\n3.0      1    38    49   108     0     6     0  ...     6     7    12     0     0     0     0\n4.0     13     3     0     2   370    25     0  ...     7     6     8     0    12    20     0\n5.0      0     1     0     7     2   615     0  ...     1    26     0     0     3    40     0\n6.0      1     0     0     0     0     0     3  ...     0     0     0     0     0     0     0\n7.0      0     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     1     0    15     0  ...     0     0     0     3     0     1     0\n9.0      0    96     9     2     0     1     0  ...   657   140    12     0     0     0     0\n10.0     0   202    64     9     1     9     0  ...   156  1835    50     0     0     3     0\n11.0     0    55    33     2     0     0     0  ...    79    92   297     0     0     1     1\n12.0     0     0     0     0     0     0     0  ...     0     2     0   186     0     4     0\n13.0     0     0     0     0    12     2     0  ...     0     0     0     5  1166    17     0\n14.0     0     0     0     0    12    57     0  ...     3     0     7    32    87   166     0\n15.0     0     1     0     0     0     0     0  ...     5     6     2     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     19     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   936    44     5     3     4     0  ...    85   238    35     0     0     0     0\n2.0      0    76   477    20     0     2     0  ...    16   179    20     0     0     0     0\n3.0      4    28    51    91     5    23     0  ...     5     5    15     0     0     0     0\n4.0      8     7     0     1   379    19     9  ...     9     0     0     0    15    12     0\n5.0      0     1     0     0    33   647     0  ...     0     0     0     0     3     7     0\n6.0      2     0     0     0     2     0     7  ...     0     0     0     0     0     0     0\n7.0      7     0     0     0     4     3     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     1     8     0  ...     0     0     0     0     0     0     0\n9.0      1   147     9    12     2     2     0  ...   557   194     9     0     0     0     0\n10.0     4   290   104    17     7     9     1  ...    58  1743    72     0     0     2     0\n11.0     0    49    59    14     1     3     0  ...    42    63   327     0     0     0     0\n12.0     0     0     0     0     0    17     0  ...     0     1     0   176     0     0     0\n13.0     0     0     0     0    50     6     0  ...     0     0     0     1  1087    59     0\n14.0     0     0     0     3    79    65     2  ...     2     1     1    33    70   116     0\n15.0     0     2     0     0     0     0     0  ...     6     3     8     0     0     0    70\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 6:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     22     0     0     0     1     0     0  ...     1     0     0     0     0     0     0\n1.0      0   960    19    42     2     1     0  ...    72   211    49     0     0     0     0\n2.0      0   116   315    23     0     1     0  ...    14   266    57     0     0     0     0\n3.0      0    83     4    87     3     2     1  ...     5    38     0     0     0     0     0\n4.0      0     6     0     6   403     6     0  ...     3     6     1     0    13    13     0\n5.0      0     0     0    15    11   653     0  ...     0     0     0     0     1    11     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      6     0     0     2     0     0     2  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     0     0     0     0\n9.0      0   125     5    10     0     0     0  ...   587   195     5     0     0     0     0\n10.0     0   187    37    28     7     7     0  ...   110  1900    43     0     0     4     1\n11.0     0   196    42    27     0     1     0  ...    25    82   196     0     0     0     0\n12.0     0     1     0     0     0     0     0  ...     0     0     0   170     0     8     0\n13.0     0     0     0     0    13     5     0  ...     0     0     0     1  1170    11     0\n14.0     0     2     3     1    10    63     0  ...     0    13     0    13   108   147     0\n15.0     0     2     3     0     0     0     0  ...     0    33     0     0     0     0    52\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results5.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.704221          0.572424           0.658924\n1    2          0.735339          0.624800           0.694008\n2    3          0.727329          0.600676           0.685136\n3    4          0.732156          0.611152           0.692033\n4    5          0.728048          0.653811           0.689050\n5    6          0.733388          0.687444           0.692483\n\nAverage Performance Over 6 Runs:\nOverall Accuracy: 0.7267\nAverage Accuracy: 0.6251\nKappa Coefficient: 0.6853\nFigure(800x500)\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"%matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n\n# [3] with attention\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T16:00:38.387539Z","iopub.execute_input":"2025-02-19T16:00:38.388088Z","iopub.status.idle":"2025-02-19T16:14:59.663866Z","shell.execute_reply.started":"2025-02-19T16:00:38.388030Z","shell.execute_reply":"2025-02-19T16:14:59.662427Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"2025-02-19 16:00:39.092128: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2025-02-19 16:00:39.117081: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2025-02-19 16:00:39.124746: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n\nScene:  (145, 145, 200)\n\nClassification:\nTraining samples:  512\nTest samples:  9737\n\n\nNumber of bands:  200\n**********  METHOD : SVM **********\n\t\t\t\t\t *****  #RUNS : 6  *****\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot (\u001b[94mDot\u001b[0m)                 │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 33.4752\nEpoch 1: val_loss improved from inf to 25.38056, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 29ms/step - loss: 33.4312 - val_loss: 25.3806\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 26.1390\nEpoch 2: val_loss improved from 25.38056 to 24.55471, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 26.1473 - val_loss: 24.5547\nEpoch 3/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.6003\nEpoch 3: val_loss improved from 24.55471 to 23.80293, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 25.6113 - val_loss: 23.8029\nEpoch 4/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 26.2240\nEpoch 4: val_loss did not improve from 23.80293\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 26.2803 - val_loss: 24.8458\nEpoch 5/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.9143\nEpoch 5: val_loss improved from 23.80293 to 23.05680, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 25.9245 - val_loss: 23.0568\nEpoch 6/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 23.0173\nEpoch 6: val_loss improved from 23.05680 to 21.67834, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 23.0147 - val_loss: 21.6783\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 21.1825\nEpoch 7: val_loss improved from 21.67834 to 20.56856, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 21.1902 - val_loss: 20.5686\nEpoch 8/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 20.1150\nEpoch 8: val_loss improved from 20.56856 to 19.66222, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 20.1256 - val_loss: 19.6622\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 19.1927\nEpoch 9: val_loss improved from 19.66222 to 18.40226, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 19.1944 - val_loss: 18.4023\nEpoch 10/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 18.2167\nEpoch 10: val_loss improved from 18.40226 to 17.45225, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 18.2211 - val_loss: 17.4522\nEpoch 11/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 17.3560\nEpoch 11: val_loss improved from 17.45225 to 16.69582, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 17.3601 - val_loss: 16.6958\nEpoch 12/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.5343\nEpoch 12: val_loss improved from 16.69582 to 15.60261, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 16.5337 - val_loss: 15.6026\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.6085\nEpoch 13: val_loss did not improve from 15.60261\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step - loss: 15.6219 - val_loss: 16.2538\nEpoch 14/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.8201\nEpoch 14: val_loss did not improve from 15.60261\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 16.8699 - val_loss: 22.2272\nEpoch 15/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.1538\nEpoch 15: val_loss improved from 15.60261 to 15.36665, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 22.1197 - val_loss: 15.3666\nEpoch 16/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 15.1677\nEpoch 16: val_loss improved from 15.36665 to 15.19090, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 15.1583 - val_loss: 15.1909\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.0050\nEpoch 17: val_loss improved from 15.19090 to 13.36689, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 13.9955 - val_loss: 13.3669\nEpoch 18/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.9937\nEpoch 18: val_loss improved from 13.36689 to 12.82938, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.9922 - val_loss: 12.8294\nEpoch 19/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.4268\nEpoch 19: val_loss improved from 12.82938 to 12.52713, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.4292 - val_loss: 12.5271\nEpoch 20/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.1778\nEpoch 20: val_loss improved from 12.52713 to 12.01036, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 12.1802 - val_loss: 12.0104\nEpoch 21/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.7293\nEpoch 21: val_loss improved from 12.01036 to 11.06619, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 11.7269 - val_loss: 11.0662\nEpoch 22/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.8190\nEpoch 22: val_loss improved from 11.06619 to 10.10030, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.8120 - val_loss: 10.1003\nEpoch 23/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.9660\nEpoch 23: val_loss improved from 10.10030 to 9.48093, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.9649 - val_loss: 9.4809\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.3726\nEpoch 24: val_loss improved from 9.48093 to 9.41955, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.3759 - val_loss: 9.4195\nEpoch 25/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.3691\nEpoch 25: val_loss did not improve from 9.41955\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 10.4837 - val_loss: 12.6013\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 14.8616\nEpoch 26: val_loss did not improve from 9.41955\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step - loss: 14.8381 - val_loss: 10.3161\nEpoch 27/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.4939\nEpoch 27: val_loss did not improve from 9.41955\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 10.4984 - val_loss: 10.8826\nEpoch 28/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.4547\nEpoch 28: val_loss improved from 9.41955 to 8.64689, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.4339 - val_loss: 8.6469\nEpoch 29/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.2654\nEpoch 29: val_loss improved from 8.64689 to 8.35759, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 8.2690 - val_loss: 8.3576\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.3334\nEpoch 30: val_loss did not improve from 8.35759\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 8.3594 - val_loss: 10.4602\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.3683\nEpoch 31: val_loss did not improve from 8.35759\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 9.3639 - val_loss: 9.6591\nEpoch 32/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.6738\nEpoch 32: val_loss improved from 8.35759 to 8.05464, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 7.6921 - val_loss: 8.0546\nEpoch 33/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.3552\nEpoch 33: val_loss improved from 8.05464 to 7.90084, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.3664 - val_loss: 7.9008\nEpoch 34/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.1023\nEpoch 34: val_loss improved from 7.90084 to 7.29707, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.0992 - val_loss: 7.2971\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.7737\nEpoch 35: val_loss did not improve from 7.29707\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.7658 - val_loss: 7.6994\nEpoch 36/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.9054\nEpoch 36: val_loss did not improve from 7.29707\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 6.8914 - val_loss: 7.6721\nEpoch 37/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.4163\nEpoch 37: val_loss improved from 7.29707 to 6.71938, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 6.4141 - val_loss: 6.7194\nEpoch 38/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.9382\nEpoch 38: val_loss improved from 6.71938 to 5.66067, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.9339 - val_loss: 5.6607\nEpoch 39/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.4801\nEpoch 39: val_loss did not improve from 5.66067\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.4871 - val_loss: 6.6042\nEpoch 40/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.4356\nEpoch 40: val_loss did not improve from 5.66067\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 7.5002 - val_loss: 14.6485\nEpoch 41/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.0372\nEpoch 41: val_loss did not improve from 5.66067\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.0360 - val_loss: 9.8492\nEpoch 42/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.1929\nEpoch 42: val_loss did not improve from 5.66067\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 23ms/step - loss: 7.1921 - val_loss: 7.6431\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.4595\nEpoch 43: val_loss did not improve from 5.66067\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 6.4688 - val_loss: 5.9686\nEpoch 44/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.8214\nEpoch 44: val_loss improved from 5.66067 to 5.28041, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.8195 - val_loss: 5.2804\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.1893\nEpoch 45: val_loss did not improve from 5.28041\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 5.1968 - val_loss: 5.5842\nEpoch 46/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 5.9797\nEpoch 46: val_loss did not improve from 5.28041\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 6.0144 - val_loss: 7.2048\nEpoch 47/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.9733\nEpoch 47: val_loss did not improve from 5.28041\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 7.9749 - val_loss: 6.5757\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.5054\nEpoch 48: val_loss did not improve from 5.28041\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 5.5130 - val_loss: 5.8197\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.1341\nEpoch 49: val_loss improved from 5.28041 to 4.91196, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run0.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 5.1334 - val_loss: 4.9120\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.5323\nEpoch 50: val_loss did not improve from 4.91196\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step - loss: 4.5424 - val_loss: 5.6308\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 46 197 140  91  72 152 182  47 177  66 133 137  37  49  68  94  65  69\n  43  57  63  48  58  40  81]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 1 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   749    33    27     0     2     0  ...    86   450    21     0     0     0     0\n2.0      0    75   394    16     0     0     0  ...    18   211    65     0     0     0     0\n3.0      0    17    47   105     1     2     0  ...     3    18    28     0     0     0     0\n4.0      5     5     0     2   396    11     0  ...     3    14     5     0     7     0     0\n5.0      0     0     0     8     4   626     0  ...     0     1     0     1     8    45     0\n6.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0     15    18     0     0     0     0     0  ...     0     2     0     0     0     0     0\n8.0      0    16     0     0     0     0     0  ...     0     0     0     1     0     3     0\n9.0      0    76     6     4     0     3     0  ...   380   438    16     0     0     0     0\n10.0     0   173    76    12     2    13     0  ...   195  1822    27     0     0     6     1\n11.0     0    19   121    32     1     1     0  ...    11    57   322     0     0     1     2\n12.0     0     1     0     0     0     1     0  ...     0     1     0   192     0     1     0\n13.0     0     0     0     0    23     3     0  ...     0     0     0    10  1090    76     0\n14.0     4     8     5     6    21    37     0  ...     0     0     0    23    55   202     0\n15.0     0     3     4     0     0     0     0  ...     9     4     0     0     0     0    67\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results0.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.695081          0.582247           0.648307\n\nAverage Performance Over 1 Runs:\nOverall Accuracy: 0.6951\nAverage Accuracy: 0.5822\nKappa Coefficient: 0.6483\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_1 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 32.5203\nEpoch 1: val_loss improved from inf to 34.15582, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 27ms/step - loss: 32.4250 - val_loss: 34.1558\nEpoch 2/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 30.6111\nEpoch 2: val_loss improved from 34.15582 to 33.57347, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 30.6231 - val_loss: 33.5735\nEpoch 3/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 27.7766\nEpoch 3: val_loss improved from 33.57347 to 25.77802, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 27.7344 - val_loss: 25.7780\nEpoch 4/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 25.7986\nEpoch 4: val_loss did not improve from 25.77802\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 25.8203 - val_loss: 25.9244\nEpoch 5/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 23.5171\nEpoch 5: val_loss did not improve from 25.77802\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 24ms/step - loss: 23.5153 - val_loss: 29.8975\nEpoch 6/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 23.9163\nEpoch 6: val_loss improved from 25.77802 to 22.50282, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 23.8871 - val_loss: 22.5028\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 22.3567\nEpoch 7: val_loss did not improve from 22.50282\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 22.3517 - val_loss: 35.2041\nEpoch 8/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.6653\nEpoch 8: val_loss did not improve from 22.50282\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 25.6479 - val_loss: 30.0672\nEpoch 9/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.9382\nEpoch 9: val_loss did not improve from 22.50282\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 25.8696 - val_loss: 23.2986\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 23.4164\nEpoch 10: val_loss improved from 22.50282 to 21.28776, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 23.3963 - val_loss: 21.2878\nEpoch 11/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 20.6042\nEpoch 11: val_loss did not improve from 21.28776\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 20.5884 - val_loss: 21.9505\nEpoch 12/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 19.6214\nEpoch 12: val_loss improved from 21.28776 to 18.46066, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 19.5963 - val_loss: 18.4607\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 19.4593\nEpoch 13: val_loss did not improve from 18.46066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 19.4622 - val_loss: 25.4767\nEpoch 14/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 19.7064\nEpoch 14: val_loss did not improve from 18.46066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 19.6787 - val_loss: 20.3940\nEpoch 15/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 19.7746\nEpoch 15: val_loss did not improve from 18.46066\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 19.7580 - val_loss: 21.5168\nEpoch 16/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 18.2145\nEpoch 16: val_loss improved from 18.46066 to 17.88660, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 18.1990 - val_loss: 17.8866\nEpoch 17/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.5627\nEpoch 17: val_loss improved from 17.88660 to 15.40263, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 16.5592 - val_loss: 15.4026\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.9904\nEpoch 18: val_loss improved from 15.40263 to 14.55886, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 14.9902 - val_loss: 14.5589\nEpoch 19/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 14.2276\nEpoch 19: val_loss improved from 14.55886 to 13.73911, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 14.2270 - val_loss: 13.7391\nEpoch 20/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 13.4601\nEpoch 20: val_loss improved from 13.73911 to 12.94038, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 13.4588 - val_loss: 12.9404\nEpoch 21/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 12.7328\nEpoch 21: val_loss improved from 12.94038 to 12.64833, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 12.7305 - val_loss: 12.6483\nEpoch 22/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.1221\nEpoch 22: val_loss improved from 12.64833 to 12.08128, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.1186 - val_loss: 12.0813\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.4933\nEpoch 23: val_loss improved from 12.08128 to 11.66550, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 11.4910 - val_loss: 11.6655\nEpoch 24/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 10.9584\nEpoch 24: val_loss improved from 11.66550 to 11.54885, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.9580 - val_loss: 11.5488\nEpoch 25/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.5912\nEpoch 25: val_loss did not improve from 11.54885\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 10.5942 - val_loss: 12.7541\nEpoch 26/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.8261\nEpoch 26: val_loss improved from 11.54885 to 11.23996, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 10.8352 - val_loss: 11.2400\nEpoch 27/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.2804\nEpoch 27: val_loss improved from 11.23996 to 10.02445, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 10.2750 - val_loss: 10.0245\nEpoch 28/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.4108\nEpoch 28: val_loss improved from 10.02445 to 9.02870, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 9.4087 - val_loss: 9.0287\nEpoch 29/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 8.7574\nEpoch 29: val_loss improved from 9.02870 to 8.26323, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 8.7561 - val_loss: 8.2632\nEpoch 30/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.4107\nEpoch 30: val_loss improved from 8.26323 to 7.64243, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 8.4086 - val_loss: 7.6424\nEpoch 31/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.4927\nEpoch 31: val_loss did not improve from 7.64243\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 8.4945 - val_loss: 9.7002\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 13.3119\nEpoch 32: val_loss did not improve from 7.64243\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 13.3468 - val_loss: 11.6155\nEpoch 33/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.1542\nEpoch 33: val_loss did not improve from 7.64243\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.1328 - val_loss: 9.0031\nEpoch 34/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.5607\nEpoch 34: val_loss did not improve from 7.64243\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 8.5549 - val_loss: 10.3724\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.6801\nEpoch 35: val_loss improved from 7.64243 to 6.50430, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.6684 - val_loss: 6.5043\nEpoch 36/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.3855\nEpoch 36: val_loss did not improve from 6.50430\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.3889 - val_loss: 8.9121\nEpoch 37/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.9533\nEpoch 37: val_loss improved from 6.50430 to 6.17590, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.9475 - val_loss: 6.1759\nEpoch 38/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.4116\nEpoch 38: val_loss did not improve from 6.17590\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.4224 - val_loss: 8.6363\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.2479\nEpoch 39: val_loss improved from 6.17590 to 5.77488, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 6.2375 - val_loss: 5.7749\nEpoch 40/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.5466\nEpoch 40: val_loss improved from 5.77488 to 5.52586, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.5346 - val_loss: 5.5259\nEpoch 41/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.0821\nEpoch 41: val_loss improved from 5.52586 to 4.82277, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run1.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 5.0828 - val_loss: 4.8228\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.0778\nEpoch 42: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 5.0838 - val_loss: 11.5915\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.8091\nEpoch 43: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 9.7917 - val_loss: 13.4186\nEpoch 44/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 11.0583\nEpoch 44: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 11.1601 - val_loss: 11.5508\nEpoch 45/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.3699\nEpoch 45: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 11.3673 - val_loss: 10.7484\nEpoch 46/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.0354\nEpoch 46: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 8.0290 - val_loss: 7.8241\nEpoch 47/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.2824\nEpoch 47: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 7.2658 - val_loss: 8.2308\nEpoch 48/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.2478\nEpoch 48: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 6.2436 - val_loss: 5.2567\nEpoch 49/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.2147\nEpoch 49: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 6.2092 - val_loss: 7.4175\nEpoch 50/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.5690\nEpoch 50: val_loss did not improve from 4.82277\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 5.5694 - val_loss: 4.9989\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [114 140  40 152 189  42 160 108 130 112 126 164 107 118  92 125 178 113\n  43 170  13  53  44 177 134]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 2 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   749    33    27     0     2     0  ...    86   450    21     0     0     0     0\n2.0      0    75   394    16     0     0     0  ...    18   211    65     0     0     0     0\n3.0      0    17    47   105     1     2     0  ...     3    18    28     0     0     0     0\n4.0      5     5     0     2   396    11     0  ...     3    14     5     0     7     0     0\n5.0      0     0     0     8     4   626     0  ...     0     1     0     1     8    45     0\n6.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0     15    18     0     0     0     0     0  ...     0     2     0     0     0     0     0\n8.0      0    16     0     0     0     0     0  ...     0     0     0     1     0     3     0\n9.0      0    76     6     4     0     3     0  ...   380   438    16     0     0     0     0\n10.0     0   173    76    12     2    13     0  ...   195  1822    27     0     0     6     1\n11.0     0    19   121    32     1     1     0  ...    11    57   322     0     0     1     2\n12.0     0     1     0     0     0     1     0  ...     0     1     0   192     0     1     0\n13.0     0     0     0     0    23     3     0  ...     0     0     0    10  1090    76     0\n14.0     4     8     5     6    21    37     0  ...     0     0     0    23    55   202     0\n15.0     0     3     4     0     0     0     0  ...     9     4     0     0     0     0    67\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   778    16    15     2     2     0  ...   110   421    11     0     0     0     1\n2.0      0    22   416    53     0     0     0  ...     0   274    29     0     0     0     0\n3.0      0     5    21   181     1     4     0  ...     2     6     1     0     0     0     0\n4.0      0     2     0     2   380    15     1  ...     0     7     0     0    51     0     0\n5.0      0     0     0     0    15   621     0  ...     0     1     0     0     1    51     0\n6.0      0     0     0     0     1     0    10  ...     0     0     0     0     0     0     0\n7.0      9     0     0     0     1     0     5  ...     0     0     0     0     0     0     0\n8.0      0     0     0     5     5     4     0  ...     0     0     0     5     0     1     0\n9.0      0   135     1     4    11     3     0  ...   497   272     6     0     0     0     0\n10.0     0   182    36    30     9    14     1  ...    68  1935    41     0     0     3     1\n11.0     0    26    55    25     0     5     0  ...     3    77   373     0     0     0     4\n12.0     0     0     0     2     0     0     0  ...     0     0     0   190     0     0     0\n13.0     0     0     0     0    30     3     0  ...     0     0     0     4  1109    61     0\n14.0     0     0     1     0    37    88     0  ...     0     0     0    30    71   138     2\n15.0     0     3     0     0     0     0     0  ...     1     5     3     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results1.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.695081          0.582247           0.648307\n1    2          0.737291          0.684670           0.697336\n\nAverage Performance Over 2 Runs:\nOverall Accuracy: 0.7162\nAverage Accuracy: 0.6335\nKappa Coefficient: 0.6728\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_2 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 31.1366\nEpoch 1: val_loss improved from inf to 25.73653, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 31ms/step - loss: 31.0882 - val_loss: 25.7365\nEpoch 2/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.9034\nEpoch 2: val_loss improved from 25.73653 to 24.51036, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 24ms/step - loss: 25.8997 - val_loss: 24.5104\nEpoch 3/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 24.8443\nEpoch 3: val_loss improved from 24.51036 to 23.78682, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 24.8285 - val_loss: 23.7868\nEpoch 4/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 27.1538\nEpoch 4: val_loss did not improve from 23.78682\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 27.1714 - val_loss: 24.9626\nEpoch 5/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 26.5651\nEpoch 5: val_loss improved from 23.78682 to 21.68315, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 26.4558 - val_loss: 21.6831\nEpoch 6/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.1758\nEpoch 6: val_loss improved from 21.68315 to 21.03993, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 22.1674 - val_loss: 21.0399\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 21.3473\nEpoch 7: val_loss improved from 21.03993 to 20.49067, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 21.3353 - val_loss: 20.4907\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 21.1699\nEpoch 8: val_loss improved from 20.49067 to 20.15569, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 21.1525 - val_loss: 20.1557\nEpoch 9/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 20.8073\nEpoch 9: val_loss improved from 20.15569 to 19.54175, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 24ms/step - loss: 20.8011 - val_loss: 19.5417\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 19.8680\nEpoch 10: val_loss improved from 19.54175 to 18.66121, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 19.8561 - val_loss: 18.6612\nEpoch 11/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 18.4243\nEpoch 11: val_loss improved from 18.66121 to 18.25475, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 18.4215 - val_loss: 18.2547\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 17.3952\nEpoch 12: val_loss did not improve from 18.25475\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - loss: 17.4028 - val_loss: 18.3472\nEpoch 13/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.0836\nEpoch 13: val_loss did not improve from 18.25475\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 17.0900 - val_loss: 18.5318\nEpoch 14/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.5545\nEpoch 14: val_loss improved from 18.25475 to 16.37577, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 17.5514 - val_loss: 16.3758\nEpoch 15/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.3324\nEpoch 15: val_loss improved from 16.37577 to 14.62854, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 17.3156 - val_loss: 14.6285\nEpoch 16/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.2892\nEpoch 16: val_loss did not improve from 14.62854\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 17.2541 - val_loss: 15.2267\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.9226\nEpoch 17: val_loss improved from 14.62854 to 14.06667, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 16.8978 - val_loss: 14.0667\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 13.9364\nEpoch 18: val_loss improved from 14.06667 to 13.45039, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 13.9225 - val_loss: 13.4504\nEpoch 19/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.5474\nEpoch 19: val_loss improved from 13.45039 to 12.52386, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 12.5360 - val_loss: 12.5239\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.8039\nEpoch 20: val_loss improved from 12.52386 to 11.65321, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.8016 - val_loss: 11.6532\nEpoch 21/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.1638\nEpoch 21: val_loss improved from 11.65321 to 10.92826, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 11.1627 - val_loss: 10.9283\nEpoch 22/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.5259\nEpoch 22: val_loss improved from 10.92826 to 10.25225, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.5261 - val_loss: 10.2523\nEpoch 23/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.8681\nEpoch 23: val_loss improved from 10.25225 to 9.66172, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 9.8702 - val_loss: 9.6617\nEpoch 24/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.4265\nEpoch 24: val_loss improved from 9.66172 to 9.30513, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 9.4282 - val_loss: 9.3051\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 8.9508\nEpoch 25: val_loss improved from 9.30513 to 9.04561, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 8.9500 - val_loss: 9.0456\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.6430\nEpoch 26: val_loss did not improve from 9.04561\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 27ms/step - loss: 8.6489 - val_loss: 10.6285\nEpoch 27/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.5001\nEpoch 27: val_loss improved from 9.04561 to 8.72454, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.4650 - val_loss: 8.7245\nEpoch 28/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.2790\nEpoch 28: val_loss did not improve from 8.72454\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.3076 - val_loss: 10.2380\nEpoch 29/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.6527\nEpoch 29: val_loss did not improve from 8.72454\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 9.7346 - val_loss: 15.0212\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 14.6311\nEpoch 30: val_loss did not improve from 8.72454\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 14.5205 - val_loss: 11.0256\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.8600\nEpoch 31: val_loss did not improve from 8.72454\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.8380 - val_loss: 10.0940\nEpoch 32/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.8359\nEpoch 32: val_loss did not improve from 8.72454\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 8.8150 - val_loss: 9.2848\nEpoch 33/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.7638\nEpoch 33: val_loss improved from 8.72454 to 8.47986, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.7433 - val_loss: 8.4799\nEpoch 34/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.2012\nEpoch 34: val_loss improved from 8.47986 to 7.95284, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 7.1886 - val_loss: 7.9528\nEpoch 35/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.8320\nEpoch 35: val_loss improved from 7.95284 to 7.68189, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 6.8220 - val_loss: 7.6819\nEpoch 36/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 6.3869\nEpoch 36: val_loss improved from 7.68189 to 7.65671, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 6.3835 - val_loss: 7.6567\nEpoch 37/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 6.0764\nEpoch 37: val_loss improved from 7.65671 to 6.11361, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 27ms/step - loss: 6.0630 - val_loss: 6.1136\nEpoch 38/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.9343\nEpoch 38: val_loss improved from 6.11361 to 5.26749, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.9247 - val_loss: 5.2675\nEpoch 39/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.4243\nEpoch 39: val_loss improved from 5.26749 to 5.04147, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.4177 - val_loss: 5.0415\nEpoch 40/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.1226\nEpoch 40: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.1120 - val_loss: 5.7462\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 4.7473\nEpoch 41: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 4.7773 - val_loss: 19.3826\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.5216\nEpoch 42: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 8.5028 - val_loss: 6.1711\nEpoch 43/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.9803\nEpoch 43: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 7.9348 - val_loss: 6.5248\nEpoch 44/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.6116\nEpoch 44: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.6201 - val_loss: 8.0634\nEpoch 45/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.9239\nEpoch 45: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 5.9061 - val_loss: 5.3701\nEpoch 46/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.3330\nEpoch 46: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.3317 - val_loss: 7.5407\nEpoch 47/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.1919\nEpoch 47: val_loss did not improve from 5.04147\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 8.1807 - val_loss: 5.1095\nEpoch 48/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.5860\nEpoch 48: val_loss improved from 5.04147 to 4.27961, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 5.5684 - val_loss: 4.2796\nEpoch 49/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.7061\nEpoch 49: val_loss improved from 4.27961 to 4.04611, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run2.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 5.6959 - val_loss: 4.0461\nEpoch 50/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.8385\nEpoch 50: val_loss did not improve from 4.04611\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 4.8355 - val_loss: 4.7355\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [131  37 147 162  68  71 168  42 106  69  80  48  38 101  47  50  64 166\n  52  66  40  53  49  59  46]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 3 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   749    33    27     0     2     0  ...    86   450    21     0     0     0     0\n2.0      0    75   394    16     0     0     0  ...    18   211    65     0     0     0     0\n3.0      0    17    47   105     1     2     0  ...     3    18    28     0     0     0     0\n4.0      5     5     0     2   396    11     0  ...     3    14     5     0     7     0     0\n5.0      0     0     0     8     4   626     0  ...     0     1     0     1     8    45     0\n6.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0     15    18     0     0     0     0     0  ...     0     2     0     0     0     0     0\n8.0      0    16     0     0     0     0     0  ...     0     0     0     1     0     3     0\n9.0      0    76     6     4     0     3     0  ...   380   438    16     0     0     0     0\n10.0     0   173    76    12     2    13     0  ...   195  1822    27     0     0     6     1\n11.0     0    19   121    32     1     1     0  ...    11    57   322     0     0     1     2\n12.0     0     1     0     0     0     1     0  ...     0     1     0   192     0     1     0\n13.0     0     0     0     0    23     3     0  ...     0     0     0    10  1090    76     0\n14.0     4     8     5     6    21    37     0  ...     0     0     0    23    55   202     0\n15.0     0     3     4     0     0     0     0  ...     9     4     0     0     0     0    67\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   778    16    15     2     2     0  ...   110   421    11     0     0     0     1\n2.0      0    22   416    53     0     0     0  ...     0   274    29     0     0     0     0\n3.0      0     5    21   181     1     4     0  ...     2     6     1     0     0     0     0\n4.0      0     2     0     2   380    15     1  ...     0     7     0     0    51     0     0\n5.0      0     0     0     0    15   621     0  ...     0     1     0     0     1    51     0\n6.0      0     0     0     0     1     0    10  ...     0     0     0     0     0     0     0\n7.0      9     0     0     0     1     0     5  ...     0     0     0     0     0     0     0\n8.0      0     0     0     5     5     4     0  ...     0     0     0     5     0     1     0\n9.0      0   135     1     4    11     3     0  ...   497   272     6     0     0     0     0\n10.0     0   182    36    30     9    14     1  ...    68  1935    41     0     0     3     1\n11.0     0    26    55    25     0     5     0  ...     3    77   373     0     0     0     4\n12.0     0     0     0     2     0     0     0  ...     0     0     0   190     0     0     0\n13.0     0     0     0     0    30     3     0  ...     0     0     0     4  1109    61     0\n14.0     0     0     1     0    37    88     0  ...     0     0     0    30    71   138     2\n15.0     0     3     0     0     0     0     0  ...     1     5     3     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     1     0     0  ...     0     0     1     0     0     0     0\n1.0      0   846    24    31     5     5     0  ...    50   376     8     0     0     0     0\n2.0      0   106   393    15     2     2     0  ...    17   201    57     0     0     1     0\n3.0      3    73     8    55     1    29     0  ...     2    25    33     0     0     0     0\n4.0     12     0     1     8   406     6     1  ...     0     4     3     0    10     7     0\n5.0      0     0     0     0    13   660     0  ...     5     0     0     1     3    14     0\n6.0      1     0     0     0     5     0    16  ...     0     0     0     0     0     0     0\n7.0     11     0     0     0     1     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     1     0     1     0\n9.0      0    80    10     5    10     2     0  ...   261   543    13     0     0     2     0\n10.0     0   186    78    11    19    13     1  ...    80  1866    73     0     0     3     1\n11.0     0    59    35    31     0     9     0  ...     4    49   369     0     0     0     0\n12.0     0     0     0     1     0     0     0  ...     0     0     0   192     0     0     0\n13.0     0     0     0     2    43     2     0  ...     0     2     0     2  1120    33     0\n14.0     1     0     0     0    13    44     0  ...     0     3     3    10    89   203     2\n15.0     0     0     6     1     0     0     0  ...     2     0     5     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results2.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.695081          0.582247           0.648307\n1    2          0.737291          0.684670           0.697336\n2    3          0.711821          0.670818           0.666978\n\nAverage Performance Over 3 Runs:\nOverall Accuracy: 0.7147\nAverage Accuracy: 0.6459\nKappa Coefficient: 0.6709\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_3 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 56.8435\nEpoch 1: val_loss improved from inf to 26.55679, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 27ms/step - loss: 56.3855 - val_loss: 26.5568\nEpoch 2/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 26.0891\nEpoch 2: val_loss improved from 26.55679 to 26.00789, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 26.0957 - val_loss: 26.0079\nEpoch 3/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.2747\nEpoch 3: val_loss improved from 26.00789 to 24.12273, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 25.2723 - val_loss: 24.1227\nEpoch 4/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 23.8823\nEpoch 4: val_loss improved from 24.12273 to 23.31990, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 23.8807 - val_loss: 23.3199\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 23.2442\nEpoch 5: val_loss improved from 23.31990 to 22.99453, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 23.2412 - val_loss: 22.9945\nEpoch 6/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.7783\nEpoch 6: val_loss did not improve from 22.99453\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 22.7939 - val_loss: 23.7303\nEpoch 7/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.4877\nEpoch 7: val_loss did not improve from 22.99453\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 22.4874 - val_loss: 24.0015\nEpoch 8/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 22.6978\nEpoch 8: val_loss improved from 22.99453 to 22.76166, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 22.7025 - val_loss: 22.7617\nEpoch 9/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 23.4450\nEpoch 9: val_loss improved from 22.76166 to 20.96401, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 23.4259 - val_loss: 20.9640\nEpoch 10/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 21.0593\nEpoch 10: val_loss improved from 20.96401 to 20.16770, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 21.0652 - val_loss: 20.1677\nEpoch 11/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 21.1540\nEpoch 11: val_loss improved from 20.16770 to 18.96096, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 21.1708 - val_loss: 18.9610\nEpoch 12/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.3142\nEpoch 12: val_loss did not improve from 18.96096\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 22.2958 - val_loss: 19.7707\nEpoch 13/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 18.2640\nEpoch 13: val_loss improved from 18.96096 to 16.88167, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 18.2390 - val_loss: 16.8817\nEpoch 14/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.4191\nEpoch 14: val_loss did not improve from 16.88167\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 17.4250 - val_loss: 17.1310\nEpoch 15/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.6325\nEpoch 15: val_loss improved from 16.88167 to 15.98992, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 16.6321 - val_loss: 15.9899\nEpoch 16/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.4108\nEpoch 16: val_loss improved from 15.98992 to 15.90486, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 16.4157 - val_loss: 15.9049\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.1922\nEpoch 17: val_loss improved from 15.90486 to 15.26686, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 16.1943 - val_loss: 15.2669\nEpoch 18/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 15.9405\nEpoch 18: val_loss improved from 15.26686 to 14.86798, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 23ms/step - loss: 15.9316 - val_loss: 14.8680\nEpoch 19/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.5743\nEpoch 19: val_loss improved from 14.86798 to 13.90415, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 14.5608 - val_loss: 13.9042\nEpoch 20/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 13.5176\nEpoch 20: val_loss improved from 13.90415 to 13.19728, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 13.5111 - val_loss: 13.1973\nEpoch 21/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 12.6862\nEpoch 21: val_loss improved from 13.19728 to 12.52589, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 12.6821 - val_loss: 12.5259\nEpoch 22/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.0205\nEpoch 22: val_loss improved from 12.52589 to 11.91251, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.0198 - val_loss: 11.9125\nEpoch 23/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.4734\nEpoch 23: val_loss improved from 11.91251 to 11.52921, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 11.4759 - val_loss: 11.5292\nEpoch 24/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.9212\nEpoch 24: val_loss improved from 11.52921 to 11.08641, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.9223 - val_loss: 11.0864\nEpoch 25/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 10.3692\nEpoch 25: val_loss improved from 11.08641 to 10.67837, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.3717 - val_loss: 10.6784\nEpoch 26/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.8913\nEpoch 26: val_loss improved from 10.67837 to 10.29320, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.8931 - val_loss: 10.2932\nEpoch 27/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.6662\nEpoch 27: val_loss did not improve from 10.29320\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.6971 - val_loss: 12.9254\nEpoch 28/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.4808\nEpoch 28: val_loss did not improve from 10.29320\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.4772 - val_loss: 11.2275\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.6494\nEpoch 29: val_loss improved from 10.29320 to 9.43809, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 11.6401 - val_loss: 9.4381\nEpoch 30/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.0615\nEpoch 30: val_loss improved from 9.43809 to 9.33013, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.1028 - val_loss: 9.3301\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 9.7325\nEpoch 31: val_loss improved from 9.33013 to 8.34910, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.7497 - val_loss: 8.3491\nEpoch 32/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.7253\nEpoch 32: val_loss improved from 8.34910 to 7.49886, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 8.7037 - val_loss: 7.4989\nEpoch 33/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.6599\nEpoch 33: val_loss improved from 7.49886 to 6.84512, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 7.6601 - val_loss: 6.8451\nEpoch 34/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.3608\nEpoch 34: val_loss did not improve from 6.84512\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 7.3596 - val_loss: 7.5569\nEpoch 35/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.7973\nEpoch 35: val_loss improved from 6.84512 to 6.38410, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 24ms/step - loss: 6.7924 - val_loss: 6.3841\nEpoch 36/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.6022\nEpoch 36: val_loss did not improve from 6.38410\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 6.5941 - val_loss: 6.4434\nEpoch 37/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.0160\nEpoch 37: val_loss did not improve from 6.38410\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.0204 - val_loss: 9.0162\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.7143\nEpoch 38: val_loss improved from 6.38410 to 6.03019, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 6.7071 - val_loss: 6.0302\nEpoch 39/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.2559\nEpoch 39: val_loss did not improve from 6.03019\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 7.3437 - val_loss: 11.8602\nEpoch 40/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.5087\nEpoch 40: val_loss did not improve from 6.03019\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 11.4841 - val_loss: 6.4970\nEpoch 41/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.3678\nEpoch 41: val_loss improved from 6.03019 to 5.78185, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.3450 - val_loss: 5.7818\nEpoch 42/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.6844\nEpoch 42: val_loss did not improve from 5.78185\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.6748 - val_loss: 5.8329\nEpoch 43/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.2914\nEpoch 43: val_loss did not improve from 5.78185\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.2951 - val_loss: 6.2314\nEpoch 44/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.3379\nEpoch 44: val_loss did not improve from 5.78185\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.3429 - val_loss: 6.4327\nEpoch 45/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.7638\nEpoch 45: val_loss improved from 5.78185 to 5.52268, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 6.7506 - val_loss: 5.5227\nEpoch 46/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.1713\nEpoch 46: val_loss improved from 5.52268 to 4.49518, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - loss: 7.1672 - val_loss: 4.4952\nEpoch 47/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 5.8186\nEpoch 47: val_loss improved from 4.49518 to 4.24765, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run3.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 27ms/step - loss: 5.8184 - val_loss: 4.2476\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.1495\nEpoch 48: val_loss did not improve from 4.24765\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 5.1452 - val_loss: 4.3407\nEpoch 49/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.6238\nEpoch 49: val_loss did not improve from 4.24765\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 4.6283 - val_loss: 5.1907\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.3721\nEpoch 50: val_loss did not improve from 4.24765\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 4.3776 - val_loss: 5.0152\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 13  38  22 113 182 120 118  15 185 141 158 137 128  42  43  71  51 171\n  23 124 151  64 132 111 180]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\n/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n  warnings.warn(\nSVM Train Finished.\n\nBest paramters:{'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}\nThe model shall evaluate for 4 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   749    33    27     0     2     0  ...    86   450    21     0     0     0     0\n2.0      0    75   394    16     0     0     0  ...    18   211    65     0     0     0     0\n3.0      0    17    47   105     1     2     0  ...     3    18    28     0     0     0     0\n4.0      5     5     0     2   396    11     0  ...     3    14     5     0     7     0     0\n5.0      0     0     0     8     4   626     0  ...     0     1     0     1     8    45     0\n6.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0     15    18     0     0     0     0     0  ...     0     2     0     0     0     0     0\n8.0      0    16     0     0     0     0     0  ...     0     0     0     1     0     3     0\n9.0      0    76     6     4     0     3     0  ...   380   438    16     0     0     0     0\n10.0     0   173    76    12     2    13     0  ...   195  1822    27     0     0     6     1\n11.0     0    19   121    32     1     1     0  ...    11    57   322     0     0     1     2\n12.0     0     1     0     0     0     1     0  ...     0     1     0   192     0     1     0\n13.0     0     0     0     0    23     3     0  ...     0     0     0    10  1090    76     0\n14.0     4     8     5     6    21    37     0  ...     0     0     0    23    55   202     0\n15.0     0     3     4     0     0     0     0  ...     9     4     0     0     0     0    67\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   778    16    15     2     2     0  ...   110   421    11     0     0     0     1\n2.0      0    22   416    53     0     0     0  ...     0   274    29     0     0     0     0\n3.0      0     5    21   181     1     4     0  ...     2     6     1     0     0     0     0\n4.0      0     2     0     2   380    15     1  ...     0     7     0     0    51     0     0\n5.0      0     0     0     0    15   621     0  ...     0     1     0     0     1    51     0\n6.0      0     0     0     0     1     0    10  ...     0     0     0     0     0     0     0\n7.0      9     0     0     0     1     0     5  ...     0     0     0     0     0     0     0\n8.0      0     0     0     5     5     4     0  ...     0     0     0     5     0     1     0\n9.0      0   135     1     4    11     3     0  ...   497   272     6     0     0     0     0\n10.0     0   182    36    30     9    14     1  ...    68  1935    41     0     0     3     1\n11.0     0    26    55    25     0     5     0  ...     3    77   373     0     0     0     4\n12.0     0     0     0     2     0     0     0  ...     0     0     0   190     0     0     0\n13.0     0     0     0     0    30     3     0  ...     0     0     0     4  1109    61     0\n14.0     0     0     1     0    37    88     0  ...     0     0     0    30    71   138     2\n15.0     0     3     0     0     0     0     0  ...     1     5     3     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     1     0     0  ...     0     0     1     0     0     0     0\n1.0      0   846    24    31     5     5     0  ...    50   376     8     0     0     0     0\n2.0      0   106   393    15     2     2     0  ...    17   201    57     0     0     1     0\n3.0      3    73     8    55     1    29     0  ...     2    25    33     0     0     0     0\n4.0     12     0     1     8   406     6     1  ...     0     4     3     0    10     7     0\n5.0      0     0     0     0    13   660     0  ...     5     0     0     1     3    14     0\n6.0      1     0     0     0     5     0    16  ...     0     0     0     0     0     0     0\n7.0     11     0     0     0     1     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     1     0     1     0\n9.0      0    80    10     5    10     2     0  ...   261   543    13     0     0     2     0\n10.0     0   186    78    11    19    13     1  ...    80  1866    73     0     0     3     1\n11.0     0    59    35    31     0     9     0  ...     4    49   369     0     0     0     0\n12.0     0     0     0     1     0     0     0  ...     0     0     0   192     0     0     0\n13.0     0     0     0     2    43     2     0  ...     0     2     0     2  1120    33     0\n14.0     1     0     0     0    13    44     0  ...     0     3     3    10    89   203     2\n15.0     0     0     6     1     0     0     0  ...     2     0     5     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     30     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   855    10    23     1     2     0  ...    79   370    13     0     0     0     0\n2.0      0    57   435     8     0     0     0  ...     1   220    75     0     0     0     0\n3.0      1     5    75   113     0     8     0  ...     7    10    10     0     0     0     0\n4.0     13     2     1     5   334    30     2  ...     5     4     6     0    26    36     0\n5.0      0     3     0     7     5   581     0  ...     3    23     2     0     4    67     0\n6.0      0     0     0     0     1     0    24  ...     0     0     0     0     0     0     0\n7.0      7     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     1     0    15     0  ...     0     0     0     0     0     4     0\n9.0      0   126     8     4     1     0     0  ...   584   185     9     0     0     0     0\n10.0     1   242    85    14     2     1     0  ...    75  1788   111     0     0    10     0\n11.0     0    17    58     6     0     0     0  ...    17    82   379     0     0     1     0\n12.0     0     0     1     0     0     4     0  ...     0     0     0   186     0     1     0\n13.0     0     0     0     0    18     2     0  ...     0     0     0     6  1152    24     0\n14.0     0     0     1     0    12    56     0  ...     3     0     5    36    90   161     0\n15.0     0     2     0     0     0     0     0  ...     7     0     7     0     0     0    71\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results3.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.695081          0.582247           0.648307\n1    2          0.737291          0.684670           0.697336\n2    3          0.711821          0.670818           0.666978\n3    4          0.732977          0.692036           0.693421\n\nAverage Performance Over 4 Runs:\nOverall Accuracy: 0.7193\nAverage Accuracy: 0.6574\nKappa Coefficient: 0.6765\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_4 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 40.8833\nEpoch 1: val_loss improved from inf to 25.83064, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 26ms/step - loss: 40.8232 - val_loss: 25.8306\nEpoch 2/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 26.0735\nEpoch 2: val_loss improved from 25.83064 to 24.80719, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 26.0774 - val_loss: 24.8072\nEpoch 3/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 25.8611\nEpoch 3: val_loss improved from 24.80719 to 24.64030, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 23ms/step - loss: 25.8716 - val_loss: 24.6403\nEpoch 4/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 24.1235\nEpoch 4: val_loss improved from 24.64030 to 22.87881, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 24.1167 - val_loss: 22.8788\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 23.0952\nEpoch 5: val_loss improved from 22.87881 to 21.98920, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 23.0894 - val_loss: 21.9892\nEpoch 6/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 21.9326\nEpoch 6: val_loss improved from 21.98920 to 21.03850, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 21.9285 - val_loss: 21.0385\nEpoch 7/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.6102\nEpoch 7: val_loss did not improve from 21.03850\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 22.6547 - val_loss: 26.7567\nEpoch 8/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 28.7267\nEpoch 8: val_loss did not improve from 21.03850\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 28.8368 - val_loss: 36.7838\nEpoch 9/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 27.4696\nEpoch 9: val_loss did not improve from 21.03850\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 27.4333 - val_loss: 21.1464\nEpoch 10/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 23.6540\nEpoch 10: val_loss improved from 21.03850 to 20.25050, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 23.6525 - val_loss: 20.2505\nEpoch 11/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 20.1499\nEpoch 11: val_loss improved from 20.25050 to 18.13911, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 20.1447 - val_loss: 18.1391\nEpoch 12/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 19.4665\nEpoch 12: val_loss improved from 18.13911 to 17.87720, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 19.4613 - val_loss: 17.8772\nEpoch 13/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 18.6679\nEpoch 13: val_loss improved from 17.87720 to 16.95597, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 18.6656 - val_loss: 16.9560\nEpoch 14/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.6296\nEpoch 14: val_loss improved from 16.95597 to 16.30966, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 17.6250 - val_loss: 16.3097\nEpoch 15/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.7425\nEpoch 15: val_loss improved from 16.30966 to 15.70782, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 16.7363 - val_loss: 15.7078\nEpoch 16/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 15.9073\nEpoch 16: val_loss improved from 15.70782 to 15.07167, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 15.8991 - val_loss: 15.0717\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 15.0899\nEpoch 17: val_loss improved from 15.07167 to 14.44814, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 15.0844 - val_loss: 14.4481\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 14.3419\nEpoch 18: val_loss improved from 14.44814 to 13.88682, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 14.3367 - val_loss: 13.8868\nEpoch 19/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 13.7078\nEpoch 19: val_loss improved from 13.88682 to 13.59295, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 13.7033 - val_loss: 13.5930\nEpoch 20/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 13.2423\nEpoch 20: val_loss did not improve from 13.59295\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 13.2412 - val_loss: 13.9032\nEpoch 21/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.8997\nEpoch 21: val_loss improved from 13.59295 to 12.72140, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.8973 - val_loss: 12.7214\nEpoch 22/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 12.2892\nEpoch 22: val_loss did not improve from 12.72140\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.2956 - val_loss: 13.5423\nEpoch 23/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.4541\nEpoch 23: val_loss did not improve from 12.72140\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 14.5061 - val_loss: 20.0285\nEpoch 24/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 15.4228\nEpoch 24: val_loss did not improve from 12.72140\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 15.4153 - val_loss: 13.2536\nEpoch 25/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.3744\nEpoch 25: val_loss improved from 12.72140 to 12.58683, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 14.3537 - val_loss: 12.5868\nEpoch 26/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.0656\nEpoch 26: val_loss improved from 12.58683 to 10.97353, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 11.0815 - val_loss: 10.9735\nEpoch 27/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.3899\nEpoch 27: val_loss improved from 10.97353 to 9.68294, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.3869 - val_loss: 9.6829\nEpoch 28/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.4875\nEpoch 28: val_loss improved from 9.68294 to 9.66606, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.4868 - val_loss: 9.6661\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.3425\nEpoch 29: val_loss did not improve from 9.66606\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.3426 - val_loss: 9.9202\nEpoch 30/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.3080\nEpoch 30: val_loss did not improve from 9.66606\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.3067 - val_loss: 10.2398\nEpoch 31/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 9.2949\nEpoch 31: val_loss improved from 9.66606 to 9.53007, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 9.2878 - val_loss: 9.5301\nEpoch 32/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.5922\nEpoch 32: val_loss improved from 9.53007 to 8.41641, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step - loss: 8.5810 - val_loss: 8.4164\nEpoch 33/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.7861\nEpoch 33: val_loss improved from 8.41641 to 7.54774, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 7.7806 - val_loss: 7.5477\nEpoch 34/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 7.2436\nEpoch 34: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.2435 - val_loss: 8.2727\nEpoch 35/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.0911\nEpoch 35: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 8.1002 - val_loss: 8.7949\nEpoch 36/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.6385\nEpoch 36: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.7096 - val_loss: 12.2059\nEpoch 37/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.0674\nEpoch 37: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 9.0838 - val_loss: 11.7956\nEpoch 38/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 10.1844\nEpoch 38: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 10.1914 - val_loss: 8.6263\nEpoch 39/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 8.6467\nEpoch 39: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 24ms/step - loss: 8.6737 - val_loss: 12.8311\nEpoch 40/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.2930\nEpoch 40: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.3018 - val_loss: 8.1189\nEpoch 41/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.3318\nEpoch 41: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 8.3500 - val_loss: 8.9944\nEpoch 42/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.2658\nEpoch 42: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.2511 - val_loss: 9.1656\nEpoch 43/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 8.5596\nEpoch 43: val_loss did not improve from 7.54774\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step - loss: 8.5374 - val_loss: 8.0713\nEpoch 44/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 7.1559\nEpoch 44: val_loss improved from 7.54774 to 6.63997, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 7.1317 - val_loss: 6.6400\nEpoch 45/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.1393\nEpoch 45: val_loss improved from 6.63997 to 5.47399, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 6.1309 - val_loss: 5.4740\nEpoch 46/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.2959\nEpoch 46: val_loss improved from 5.47399 to 4.89093, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.2946 - val_loss: 4.8909\nEpoch 47/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.1734\nEpoch 47: val_loss improved from 4.89093 to 4.75480, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run4.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 5.1816 - val_loss: 4.7548\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.9735\nEpoch 48: val_loss did not improve from 4.75480\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 4.9766 - val_loss: 6.4784\nEpoch 49/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.0399\nEpoch 49: val_loss did not improve from 4.75480\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 5.0481 - val_loss: 11.9594\nEpoch 50/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.1703\nEpoch 50: val_loss did not improve from 4.75480\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.2145 - val_loss: 9.2469\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 52  64 120  54  50  67 174 168  76  65  58  97  37  62  78  41  80  57\n  66  51  48  68  49  81  92]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 1000, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}\nThe model shall evaluate for 5 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   749    33    27     0     2     0  ...    86   450    21     0     0     0     0\n2.0      0    75   394    16     0     0     0  ...    18   211    65     0     0     0     0\n3.0      0    17    47   105     1     2     0  ...     3    18    28     0     0     0     0\n4.0      5     5     0     2   396    11     0  ...     3    14     5     0     7     0     0\n5.0      0     0     0     8     4   626     0  ...     0     1     0     1     8    45     0\n6.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0     15    18     0     0     0     0     0  ...     0     2     0     0     0     0     0\n8.0      0    16     0     0     0     0     0  ...     0     0     0     1     0     3     0\n9.0      0    76     6     4     0     3     0  ...   380   438    16     0     0     0     0\n10.0     0   173    76    12     2    13     0  ...   195  1822    27     0     0     6     1\n11.0     0    19   121    32     1     1     0  ...    11    57   322     0     0     1     2\n12.0     0     1     0     0     0     1     0  ...     0     1     0   192     0     1     0\n13.0     0     0     0     0    23     3     0  ...     0     0     0    10  1090    76     0\n14.0     4     8     5     6    21    37     0  ...     0     0     0    23    55   202     0\n15.0     0     3     4     0     0     0     0  ...     9     4     0     0     0     0    67\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   778    16    15     2     2     0  ...   110   421    11     0     0     0     1\n2.0      0    22   416    53     0     0     0  ...     0   274    29     0     0     0     0\n3.0      0     5    21   181     1     4     0  ...     2     6     1     0     0     0     0\n4.0      0     2     0     2   380    15     1  ...     0     7     0     0    51     0     0\n5.0      0     0     0     0    15   621     0  ...     0     1     0     0     1    51     0\n6.0      0     0     0     0     1     0    10  ...     0     0     0     0     0     0     0\n7.0      9     0     0     0     1     0     5  ...     0     0     0     0     0     0     0\n8.0      0     0     0     5     5     4     0  ...     0     0     0     5     0     1     0\n9.0      0   135     1     4    11     3     0  ...   497   272     6     0     0     0     0\n10.0     0   182    36    30     9    14     1  ...    68  1935    41     0     0     3     1\n11.0     0    26    55    25     0     5     0  ...     3    77   373     0     0     0     4\n12.0     0     0     0     2     0     0     0  ...     0     0     0   190     0     0     0\n13.0     0     0     0     0    30     3     0  ...     0     0     0     4  1109    61     0\n14.0     0     0     1     0    37    88     0  ...     0     0     0    30    71   138     2\n15.0     0     3     0     0     0     0     0  ...     1     5     3     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     1     0     0  ...     0     0     1     0     0     0     0\n1.0      0   846    24    31     5     5     0  ...    50   376     8     0     0     0     0\n2.0      0   106   393    15     2     2     0  ...    17   201    57     0     0     1     0\n3.0      3    73     8    55     1    29     0  ...     2    25    33     0     0     0     0\n4.0     12     0     1     8   406     6     1  ...     0     4     3     0    10     7     0\n5.0      0     0     0     0    13   660     0  ...     5     0     0     1     3    14     0\n6.0      1     0     0     0     5     0    16  ...     0     0     0     0     0     0     0\n7.0     11     0     0     0     1     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     1     0     1     0\n9.0      0    80    10     5    10     2     0  ...   261   543    13     0     0     2     0\n10.0     0   186    78    11    19    13     1  ...    80  1866    73     0     0     3     1\n11.0     0    59    35    31     0     9     0  ...     4    49   369     0     0     0     0\n12.0     0     0     0     1     0     0     0  ...     0     0     0   192     0     0     0\n13.0     0     0     0     2    43     2     0  ...     0     2     0     2  1120    33     0\n14.0     1     0     0     0    13    44     0  ...     0     3     3    10    89   203     2\n15.0     0     0     6     1     0     0     0  ...     2     0     5     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     30     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   855    10    23     1     2     0  ...    79   370    13     0     0     0     0\n2.0      0    57   435     8     0     0     0  ...     1   220    75     0     0     0     0\n3.0      1     5    75   113     0     8     0  ...     7    10    10     0     0     0     0\n4.0     13     2     1     5   334    30     2  ...     5     4     6     0    26    36     0\n5.0      0     3     0     7     5   581     0  ...     3    23     2     0     4    67     0\n6.0      0     0     0     0     1     0    24  ...     0     0     0     0     0     0     0\n7.0      7     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     1     0    15     0  ...     0     0     0     0     0     4     0\n9.0      0   126     8     4     1     0     0  ...   584   185     9     0     0     0     0\n10.0     1   242    85    14     2     1     0  ...    75  1788   111     0     0    10     0\n11.0     0    17    58     6     0     0     0  ...    17    82   379     0     0     1     0\n12.0     0     0     1     0     0     4     0  ...     0     0     0   186     0     1     0\n13.0     0     0     0     0    18     2     0  ...     0     0     0     6  1152    24     0\n14.0     0     0     1     0    12    56     0  ...     3     0     5    36    90   161     0\n15.0     0     2     0     0     0     0     0  ...     7     0     7     0     0     0    71\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     14     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   857    47     3     2     3     0  ...    60   349    28     0     0     0     0\n2.0      0   120   379     8     0     3     0  ...    26   187    67     0     0     0     0\n3.0      3    37    36    53    10    14     0  ...     0    26    48     0     0     0     0\n4.0     14     3     0     6   400     9     4  ...     0     8     6     0     8     2     0\n5.0      0     0     0     2    11   664     0  ...     0     1     0     0     9     6     0\n6.0      3     0     0     0     0     0    20  ...     0     0     0     0     0     0     0\n7.0      8     0     0     5     0     0    43  ...     0     0     0     0     6     0     0\n8.0      0     0     0     0     0     4     0  ...     0     0     0     0     0     0     0\n9.0      1   117    17     3     1     8     0  ...   244   539     4     0     0     0     0\n10.0     0   262   108     6     3    12     2  ...   110  1770    37     0     0     0     0\n11.0     0    59    42    23     0     2     0  ...    20    86   325     0     0     0     1\n12.0     0     0     0     0     0    14     0  ...     0     0     0   179     0     1     0\n13.0     0     0     0     0    43     5     0  ...     0     0     0     3  1089    63     0\n14.0     2     0     0     1    38    88     0  ...     0     2     2    31    92   107     2\n15.0     0     3    14     0     0     2     0  ...     2     6     4     0     0     0    56\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results4.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.695081          0.582247           0.648307\n1    2          0.737291          0.684670           0.697336\n2    3          0.711821          0.670818           0.666978\n3    4          0.732977          0.692036           0.693421\n4    5          0.675054          0.640800           0.624930\n\nAverage Performance Over 5 Runs:\nOverall Accuracy: 0.7104\nAverage Accuracy: 0.6541\nKappa Coefficient: 0.6662\nFigure(800x500)\n\u001b[1mModel: \"OSEN\"\u001b[0m\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ input (\u001b[94mInputLayer\u001b[0m)        │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ -                      │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ SparseAutoencoderNonLine… │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m200\u001b[0m)       │         \u001b[32m40,200\u001b[0m │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n│ (\u001b[94mSparseAutoencoderNonLin…\u001b[0m │                        │                │                        │\n├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n│ dot_5 (\u001b[94mDot\u001b[0m)               │ (\u001b[96mNone\u001b[0m, \u001b[32m200\u001b[0m, \u001b[32m1\u001b[0m)         │              \u001b[32m0\u001b[0m │ SparseAutoencoderNonL… │\n│                           │                        │                │ input[\u001b[32m0\u001b[0m][\u001b[32m0\u001b[0m]            │\n└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n\u001b[1m Total params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Trainable params: \u001b[0m\u001b[32m40,200\u001b[0m (157.03 KB)\n\u001b[1m Non-trainable params: \u001b[0m\u001b[32m0\u001b[0m (0.00 B)\nEpoch 1/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 36.7278\nEpoch 1: val_loss improved from inf to 26.24405, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 29ms/step - loss: 36.6536 - val_loss: 26.2440\nEpoch 2/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 28.4219\nEpoch 2: val_loss improved from 26.24405 to 25.87011, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 24ms/step - loss: 28.4325 - val_loss: 25.8701\nEpoch 3/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 25.0760\nEpoch 3: val_loss improved from 25.87011 to 24.38579, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 25.0688 - val_loss: 24.3858\nEpoch 4/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 24.0527\nEpoch 4: val_loss improved from 24.38579 to 22.91959, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 24.0501 - val_loss: 22.9196\nEpoch 5/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 23.4231\nEpoch 5: val_loss improved from 22.91959 to 22.73110, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 23.4287 - val_loss: 22.7311\nEpoch 6/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 22.0460\nEpoch 6: val_loss did not improve from 22.73110\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 22.0831 - val_loss: 26.6656\nEpoch 7/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 29.8628\nEpoch 7: val_loss improved from 22.73110 to 21.80623, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 29.8275 - val_loss: 21.8062\nEpoch 8/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 24.6552\nEpoch 8: val_loss improved from 21.80623 to 21.06219, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 24.6713 - val_loss: 21.0622\nEpoch 9/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 20.6031\nEpoch 9: val_loss improved from 21.06219 to 20.30596, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 20.5967 - val_loss: 20.3060\nEpoch 10/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 20.2522\nEpoch 10: val_loss improved from 20.30596 to 19.09968, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 20.2129 - val_loss: 19.0997\nEpoch 11/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 18.6548\nEpoch 11: val_loss improved from 19.09968 to 18.99949, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 18.6441 - val_loss: 18.9995\nEpoch 12/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 18.1497\nEpoch 12: val_loss improved from 18.99949 to 17.78353, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 18.1241 - val_loss: 17.7835\nEpoch 13/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 17.0699\nEpoch 13: val_loss improved from 17.78353 to 16.48631, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 17.0574 - val_loss: 16.4863\nEpoch 14/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 16.1069\nEpoch 14: val_loss improved from 16.48631 to 15.65219, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 16.1048 - val_loss: 15.6522\nEpoch 15/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 15.4318\nEpoch 15: val_loss improved from 15.65219 to 15.00949, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 15.4285 - val_loss: 15.0095\nEpoch 16/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.9325\nEpoch 16: val_loss improved from 15.00949 to 14.66566, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 14.9237 - val_loss: 14.6657\nEpoch 17/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.7988\nEpoch 17: val_loss improved from 14.66566 to 14.22937, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 14.7916 - val_loss: 14.2294\nEpoch 18/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 14.0527\nEpoch 18: val_loss did not improve from 14.22937\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 14.1293 - val_loss: 34.6677\nEpoch 19/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 26.8382\nEpoch 19: val_loss improved from 14.22937 to 13.58381, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 26.6080 - val_loss: 13.5838\nEpoch 20/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 16.4043\nEpoch 20: val_loss improved from 13.58381 to 12.97197, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 16.3802 - val_loss: 12.9720\nEpoch 21/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 13.3417\nEpoch 21: val_loss improved from 12.97197 to 12.13962, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 13.3200 - val_loss: 12.1396\nEpoch 22/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.2683\nEpoch 22: val_loss improved from 12.13962 to 11.88979, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 12.2563 - val_loss: 11.8898\nEpoch 23/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.6820\nEpoch 23: val_loss improved from 11.88979 to 11.51687, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.6739 - val_loss: 11.5169\nEpoch 24/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.0162\nEpoch 24: val_loss improved from 11.51687 to 10.96635, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.0135 - val_loss: 10.9664\nEpoch 25/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.2839\nEpoch 25: val_loss improved from 10.96635 to 10.17615, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 10.2787 - val_loss: 10.1761\nEpoch 26/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.6081\nEpoch 26: val_loss improved from 10.17615 to 9.43165, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 9.6025 - val_loss: 9.4316\nEpoch 27/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 9.0484\nEpoch 27: val_loss did not improve from 9.43165\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 28ms/step - loss: 9.0532 - val_loss: 10.8845\nEpoch 28/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.9765\nEpoch 28: val_loss did not improve from 9.43165\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 10.0574 - val_loss: 29.0153\nEpoch 29/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 18.1767\nEpoch 29: val_loss did not improve from 9.43165\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 18.1009 - val_loss: 9.4487\nEpoch 30/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 10.7093\nEpoch 30: val_loss improved from 9.43165 to 9.39076, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 23ms/step - loss: 10.7124 - val_loss: 9.3908\nEpoch 31/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 9.1135\nEpoch 31: val_loss improved from 9.39076 to 8.05959, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 9.0916 - val_loss: 8.0596\nEpoch 32/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.7146\nEpoch 32: val_loss improved from 8.05959 to 7.91473, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 7.7092 - val_loss: 7.9147\nEpoch 33/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.4530\nEpoch 33: val_loss improved from 7.91473 to 7.51620, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 7.4494 - val_loss: 7.5162\nEpoch 34/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.9026\nEpoch 34: val_loss did not improve from 7.51620\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.9043 - val_loss: 8.6467\nEpoch 35/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 8.2254\nEpoch 35: val_loss did not improve from 7.51620\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 8.2808 - val_loss: 18.0662\nEpoch 36/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.7633\nEpoch 36: val_loss did not improve from 7.51620\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 26ms/step - loss: 12.7198 - val_loss: 7.9882\nEpoch 37/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 7.6208\nEpoch 37: val_loss improved from 7.51620 to 7.38735, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 7.6254 - val_loss: 7.3873\nEpoch 38/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.8632\nEpoch 38: val_loss improved from 7.38735 to 6.36550, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 6.8593 - val_loss: 6.3655\nEpoch 39/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.1134\nEpoch 39: val_loss improved from 6.36550 to 5.93666, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 25ms/step - loss: 6.1036 - val_loss: 5.9367\nEpoch 40/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 5.5007\nEpoch 40: val_loss did not improve from 5.93666\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - loss: 5.5020 - val_loss: 7.4540\nEpoch 41/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.9439\nEpoch 41: val_loss did not improve from 5.93666\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 6.9676 - val_loss: 15.1547\nEpoch 42/50\n\u001b[1m101/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 11.5064\nEpoch 42: val_loss did not improve from 5.93666\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.4851 - val_loss: 7.1427\nEpoch 43/50\n\u001b[1m100/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.3283\nEpoch 43: val_loss did not improve from 5.93666\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.3308 - val_loss: 6.1466\nEpoch 44/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.7062\nEpoch 44: val_loss improved from 5.93666 to 5.41820, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 5.6900 - val_loss: 5.4182\nEpoch 45/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 5.1223\nEpoch 45: val_loss improved from 5.41820 to 4.83597, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 5.1127 - val_loss: 4.8360\nEpoch 46/50\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.6685\nEpoch 46: val_loss did not improve from 4.83597\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - loss: 4.6815 - val_loss: 16.4462\nEpoch 47/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 12.0562\nEpoch 47: val_loss did not improve from 4.83597\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 11.9342 - val_loss: 6.0290\nEpoch 48/50\n\u001b[1m102/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 6.0694\nEpoch 48: val_loss did not improve from 4.83597\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 6.0682 - val_loss: 5.1334\nEpoch 49/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.5088\nEpoch 49: val_loss improved from 4.83597 to 4.60611, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 23ms/step - loss: 4.5056 - val_loss: 4.6061\nEpoch 50/50\n\u001b[1m 99/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.0818\nEpoch 50: val_loss improved from 4.60611 to 4.13299, saving model to weights/Indian_pines_corrected/SRL-SOA_q3_run5.weights.h5\n\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - loss: 4.0797 - val_loss: 4.1330\nSRL-SOA is trained!\nSelected number of bands:  25\n======Selected band indices ======= \n [ 21 162  45 179 172 114 124 139 170 154 193  13  59 132  51  47  69 190\n  52 176  26  44  40 160 148]\nClassification...\n\nSVM parameter search is selected.\nSVM Train...\nSVM Train Finished.\n\nBest paramters:{'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}\nThe model shall evaluate for 6 times\n\nConfusion Matrix for Run 1:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0      6     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   749    33    27     0     2     0  ...    86   450    21     0     0     0     0\n2.0      0    75   394    16     0     0     0  ...    18   211    65     0     0     0     0\n3.0      0    17    47   105     1     2     0  ...     3    18    28     0     0     0     0\n4.0      5     5     0     2   396    11     0  ...     3    14     5     0     7     0     0\n5.0      0     0     0     8     4   626     0  ...     0     1     0     1     8    45     0\n6.0      1     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n7.0     15    18     0     0     0     0     0  ...     0     2     0     0     0     0     0\n8.0      0    16     0     0     0     0     0  ...     0     0     0     1     0     3     0\n9.0      0    76     6     4     0     3     0  ...   380   438    16     0     0     0     0\n10.0     0   173    76    12     2    13     0  ...   195  1822    27     0     0     6     1\n11.0     0    19   121    32     1     1     0  ...    11    57   322     0     0     1     2\n12.0     0     1     0     0     0     1     0  ...     0     1     0   192     0     1     0\n13.0     0     0     0     0    23     3     0  ...     0     0     0    10  1090    76     0\n14.0     4     8     5     6    21    37     0  ...     0     0     0    23    55   202     0\n15.0     0     3     4     0     0     0     0  ...     9     4     0     0     0     0    67\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 2:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     34     1     0     0     1     0     1  ...     0     0     0     0     0     0     0\n1.0      0   778    16    15     2     2     0  ...   110   421    11     0     0     0     1\n2.0      0    22   416    53     0     0     0  ...     0   274    29     0     0     0     0\n3.0      0     5    21   181     1     4     0  ...     2     6     1     0     0     0     0\n4.0      0     2     0     2   380    15     1  ...     0     7     0     0    51     0     0\n5.0      0     0     0     0    15   621     0  ...     0     1     0     0     1    51     0\n6.0      0     0     0     0     1     0    10  ...     0     0     0     0     0     0     0\n7.0      9     0     0     0     1     0     5  ...     0     0     0     0     0     0     0\n8.0      0     0     0     5     5     4     0  ...     0     0     0     5     0     1     0\n9.0      0   135     1     4    11     3     0  ...   497   272     6     0     0     0     0\n10.0     0   182    36    30     9    14     1  ...    68  1935    41     0     0     3     1\n11.0     0    26    55    25     0     5     0  ...     3    77   373     0     0     0     4\n12.0     0     0     0     2     0     0     0  ...     0     0     0   190     0     0     0\n13.0     0     0     0     0    30     3     0  ...     0     0     0     4  1109    61     0\n14.0     0     0     1     0    37    88     0  ...     0     0     0    30    71   138     2\n15.0     0     3     0     0     0     0     0  ...     1     5     3     0     0     0    76\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 3:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     15     0     0     0     1     0     0  ...     0     0     1     0     0     0     0\n1.0      0   846    24    31     5     5     0  ...    50   376     8     0     0     0     0\n2.0      0   106   393    15     2     2     0  ...    17   201    57     0     0     1     0\n3.0      3    73     8    55     1    29     0  ...     2    25    33     0     0     0     0\n4.0     12     0     1     8   406     6     1  ...     0     4     3     0    10     7     0\n5.0      0     0     0     0    13   660     0  ...     5     0     0     1     3    14     0\n6.0      1     0     0     0     5     0    16  ...     0     0     0     0     0     0     0\n7.0     11     0     0     0     1     0     2  ...     0     0     0     0     0     0     0\n8.0      0     0     0     0     0     6     0  ...     0     0     0     1     0     1     0\n9.0      0    80    10     5    10     2     0  ...   261   543    13     0     0     2     0\n10.0     0   186    78    11    19    13     1  ...    80  1866    73     0     0     3     1\n11.0     0    59    35    31     0     9     0  ...     4    49   369     0     0     0     0\n12.0     0     0     0     1     0     0     0  ...     0     0     0   192     0     0     0\n13.0     0     0     0     2    43     2     0  ...     0     2     0     2  1120    33     0\n14.0     1     0     0     0    13    44     0  ...     0     3     3    10    89   203     2\n15.0     0     0     6     1     0     0     0  ...     2     0     5     0     0     0    73\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 4:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     30     0     0     0     0     0     0  ...     1     0     0     0     0     0     0\n1.0      0   855    10    23     1     2     0  ...    79   370    13     0     0     0     0\n2.0      0    57   435     8     0     0     0  ...     1   220    75     0     0     0     0\n3.0      1     5    75   113     0     8     0  ...     7    10    10     0     0     0     0\n4.0     13     2     1     5   334    30     2  ...     5     4     6     0    26    36     0\n5.0      0     3     0     7     5   581     0  ...     3    23     2     0     4    67     0\n6.0      0     0     0     0     1     0    24  ...     0     0     0     0     0     0     0\n7.0      7     0     0     0     1     0     0  ...     0     0     0     0     0     0     0\n8.0      0     0     0     1     0    15     0  ...     0     0     0     0     0     4     0\n9.0      0   126     8     4     1     0     0  ...   584   185     9     0     0     0     0\n10.0     1   242    85    14     2     1     0  ...    75  1788   111     0     0    10     0\n11.0     0    17    58     6     0     0     0  ...    17    82   379     0     0     1     0\n12.0     0     0     1     0     0     4     0  ...     0     0     0   186     0     1     0\n13.0     0     0     0     0    18     2     0  ...     0     0     0     6  1152    24     0\n14.0     0     0     1     0    12    56     0  ...     3     0     5    36    90   161     0\n15.0     0     2     0     0     0     0     0  ...     7     0     7     0     0     0    71\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 5:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     14     0     0     0     0     0     0  ...     0     0     0     0     0     0     0\n1.0      0   857    47     3     2     3     0  ...    60   349    28     0     0     0     0\n2.0      0   120   379     8     0     3     0  ...    26   187    67     0     0     0     0\n3.0      3    37    36    53    10    14     0  ...     0    26    48     0     0     0     0\n4.0     14     3     0     6   400     9     4  ...     0     8     6     0     8     2     0\n5.0      0     0     0     2    11   664     0  ...     0     1     0     0     9     6     0\n6.0      3     0     0     0     0     0    20  ...     0     0     0     0     0     0     0\n7.0      8     0     0     5     0     0    43  ...     0     0     0     0     6     0     0\n8.0      0     0     0     0     0     4     0  ...     0     0     0     0     0     0     0\n9.0      1   117    17     3     1     8     0  ...   244   539     4     0     0     0     0\n10.0     0   262   108     6     3    12     2  ...   110  1770    37     0     0     0     0\n11.0     0    59    42    23     0     2     0  ...    20    86   325     0     0     0     1\n12.0     0     0     0     0     0    14     0  ...     0     0     0   179     0     1     0\n13.0     0     0     0     0    43     5     0  ...     0     0     0     3  1089    63     0\n14.0     2     0     0     1    38    88     0  ...     0     2     2    31    92   107     2\n15.0     0     3    14     0     0     2     0  ...     2     6     4     0     0     0    56\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nConfusion Matrix for Run 6:\n      0.0   1.0   2.0   3.0   4.0   5.0   6.0   ...  9.0   10.0  11.0  12.0  13.0  14.0  15.0\n0.0     25     0     0     0     1     0     8  ...     1     0     0     0     0     0     0\n1.0      1   977    37    17     2     4     0  ...    72   238     9     0     0     0     0\n2.0      0    49   480    40     0     0     0  ...     7   165    51     0     0     0     0\n3.0      0    50    44   107     2     6     3  ...     1     6     4     0     0     0     0\n4.0      2     5     0     7   401     8     9  ...     1     5     1     0    13     5     0\n5.0      0     0     0     2     3   648     0  ...     0     1     0     9     0    28     0\n6.0      0     0     0     0     1     0    22  ...     0     0     0     0     0     0     0\n7.0      9     0     0     0     2     0     1  ...     0     1     0     0     0     0     0\n8.0      0     0     0     0     2     1     0  ...     0     0     0     0     0     0     0\n9.0      0    95     5     4     0     6     3  ...   668   140     6     0     0     0     0\n10.0     0   206    85    23     7    11     5  ...   104  1827    52     0     0     3     1\n11.0     0    47    70    43     0     4     0  ...    10    31   364     0     0     0     0\n12.0     0     0     0     0     0     4     1  ...     0     0     0   151     0    12     0\n13.0     0     0     0     0    47     9     0  ...     0     2     0     1  1123    18     0\n14.0     0     1     0     1    16    66     2  ...     0     4     0    17   112   145     0\n15.0     0    12    11     1     0     0     0  ...     0    10     1     0     0     0    55\n\n[16 rows x 16 columns]\nFigure(600x500)\n\nPerformance results saved to: results/performance_results5.csv\nConfusion matrices saved to: results/confusion_matrices.csv\n\nPerformance Metrics Summary:\n   Run  Overall Accuracy  Average Accuracy  Kappa Coefficient\n0    1          0.695081          0.582247           0.648307\n1    2          0.737291          0.684670           0.697336\n2    3          0.711821          0.670818           0.666978\n3    4          0.732977          0.692036           0.693421\n4    5          0.675054          0.640800           0.624930\n5    6          0.765225          0.736956           0.731529\n\nAverage Performance Over 6 Runs:\nOverall Accuracy: 0.7196\nAverage Accuracy: 0.6679\nKappa Coefficient: 0.6771\nFigure(800x500)\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"%matplotlib inline\n!python main.py --dataset Indian_pines_corrected --method SRL-SOA --q 3 --bands 25 --weights False\n\n# [3] with attention\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Dagshub \n!pip install mlflow dagshub\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-19T15:50:26.201314Z","iopub.execute_input":"2025-02-19T15:50:26.201858Z","iopub.status.idle":"2025-02-19T15:50:46.311989Z","shell.execute_reply.started":"2025-02-19T15:50:26.201816Z","shell.execute_reply":"2025-02-19T15:50:46.310546Z"}},"outputs":[{"name":"stdout","text":"Collecting mlflow\n  Downloading mlflow-2.20.2-py3-none-any.whl.metadata (30 kB)\nCollecting dagshub\n  Downloading dagshub-0.5.6-py3-none-any.whl.metadata (12 kB)\nCollecting mlflow-skinny==2.20.2 (from mlflow)\n  Downloading mlflow_skinny-2.20.2-py3-none-any.whl.metadata (31 kB)\nRequirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.0)\nRequirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\nRequirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.14.1)\nRequirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\nCollecting graphene<4 (from mlflow)\n  Downloading graphene-3.4.3-py2.py3-none-any.whl.metadata (6.9 kB)\nCollecting gunicorn<24 (from mlflow)\n  Downloading gunicorn-23.0.0-py3-none-any.whl.metadata (4.4 kB)\nRequirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7)\nRequirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.5)\nRequirement already satisfied: numpy<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.26.4)\nRequirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.3)\nCollecting pyarrow<19,>=4.0.0 (from mlflow)\n  Downloading pyarrow-18.1.0-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\nRequirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\nRequirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\nRequirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.36)\nRequirement already satisfied: cachetools<6,>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (5.5.0)\nRequirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (8.1.7)\nRequirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (3.1.0)\nCollecting databricks-sdk<1,>=0.20.0 (from mlflow-skinny==2.20.2->mlflow)\n  Downloading databricks_sdk-0.44.1-py3-none-any.whl.metadata (38 kB)\nRequirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (3.1.43)\nRequirement already satisfied: importlib_metadata!=4.7.0,<9,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (8.5.0)\nRequirement already satisfied: opentelemetry-api<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (1.29.0)\nRequirement already satisfied: opentelemetry-sdk<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (1.29.0)\nRequirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (24.2)\nRequirement already satisfied: protobuf<6,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (3.20.3)\nRequirement already satisfied: pydantic<3,>=1.10.8 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (2.11.0a1)\nRequirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (6.0.2)\nRequirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (2.32.3)\nRequirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (0.5.3)\nRequirement already satisfied: typing-extensions<5,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.20.2->mlflow) (4.12.2)\nCollecting appdirs>=1.4.4 (from dagshub)\n  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\nRequirement already satisfied: httpx>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.28.1)\nRequirement already satisfied: rich>=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.9.4)\nCollecting dacite~=1.6.0 (from dagshub)\n  Downloading dacite-1.6.0-py3-none-any.whl.metadata (14 kB)\nRequirement already satisfied: tenacity>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (9.0.0)\nCollecting gql[requests] (from dagshub)\n  Downloading gql-3.5.1-py2.py3-none-any.whl.metadata (9.4 kB)\nRequirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.7)\nCollecting treelib>=1.6.4 (from dagshub)\n  Downloading treelib-1.7.0-py3-none-any.whl.metadata (1.3 kB)\nCollecting pathvalidate>=3.0.0 (from dagshub)\n  Downloading pathvalidate-3.2.3-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.9.0.post0)\nRequirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.36.13)\nRequirement already satisfied: semver in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.4)\nCollecting dagshub-annotation-converter>=0.1.3 (from dagshub)\n  Downloading dagshub_annotation_converter-0.1.3-py3-none-any.whl.metadata (2.5 kB)\nRequirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.9)\nRequirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from dagshub-annotation-converter>=0.1.3->dagshub) (5.3.0)\nRequirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from dagshub-annotation-converter>=0.1.3->dagshub) (11.0.0)\nRequirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.3.0)\nRequirement already satisfied: Werkzeug>=3.1 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.1.3)\nRequirement already satisfied: itsdangerous>=2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\nRequirement already satisfied: blinker>=1.9 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (1.9.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow-skinny==2.20.2->mlflow) (4.0.11)\nCollecting graphql-core<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_core-3.2.6-py3-none-any.whl.metadata (11 kB)\nCollecting graphql-relay<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_relay-3.2.0-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx>=0.23.0->dagshub) (3.7.1)\nRequirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.23.0->dagshub) (2025.1.31)\nRequirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.23.0->dagshub) (1.0.7)\nRequirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from httpx>=0.23.0->dagshub) (3.10)\nRequirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.23.0->dagshub) (0.14.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (3.0.2)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.55.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.7)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.2.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow) (2.4.1)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2025.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->dagshub) (1.17.0)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=13.1.0->dagshub) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=13.1.0->dagshub) (2.19.1)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\nRequirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.1.1)\nRequirement already satisfied: botocore<1.37.0,>=1.36.13 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.36.13)\nRequirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\nRequirement already satisfied: s3transfer<0.12.0,>=0.11.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.11.2)\nRequirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.26.1)\nRequirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\nCollecting graphql-core<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_core-3.2.3-py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.18.3)\nCollecting backoff<3.0,>=1.11.1 (from gql[requests]->dagshub)\n  Downloading backoff-2.2.1-py3-none-any.whl.metadata (14 kB)\nRequirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\nRequirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio->httpx>=0.23.0->dagshub) (1.3.1)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx>=0.23.0->dagshub) (1.2.2)\nRequirement already satisfied: google-auth~=2.0 in /usr/local/lib/python3.10/dist-packages (from databricks-sdk<1,>=0.20.0->mlflow-skinny==2.20.2->mlflow) (2.27.0)\nRequirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow-skinny==2.20.2->mlflow) (5.0.1)\nRequirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib_metadata!=4.7.0,<9,>=3.7.0->mlflow-skinny==2.20.2->mlflow) (3.21.0)\nRequirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=13.1.0->dagshub) (0.1.2)\nRequirement already satisfied: deprecated>=1.2.6 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-api<3,>=1.9.0->mlflow-skinny==2.20.2->mlflow) (1.2.15)\nRequirement already satisfied: opentelemetry-semantic-conventions==0.50b0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-sdk<3,>=1.9.0->mlflow-skinny==2.20.2->mlflow) (0.50b0)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.10.8->mlflow-skinny==2.20.2->mlflow) (0.7.0)\nRequirement already satisfied: pydantic-core==2.28.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.10.8->mlflow-skinny==2.20.2->mlflow) (2.28.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow-skinny==2.20.2->mlflow) (3.4.1)\nRequirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\nRequirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.1.0)\nRequirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (0.2.1)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3->mlflow) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3->mlflow) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<3->mlflow) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<3->mlflow) (2024.2.0)\nRequirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated>=1.2.6->opentelemetry-api<3,>=1.9.0->mlflow-skinny==2.20.2->mlflow) (1.17.0)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==2.20.2->mlflow) (0.4.1)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==2.20.2->mlflow) (4.9)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<3->mlflow) (2024.2.0)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==2.20.2->mlflow) (0.6.1)\nDownloading mlflow-2.20.2-py3-none-any.whl (28.4 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m28.4/28.4 MB\u001b[0m \u001b[31m57.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading mlflow_skinny-2.20.2-py3-none-any.whl (6.0 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.0/6.0 MB\u001b[0m \u001b[31m23.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading dagshub-0.5.6-py3-none-any.whl (259 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m259.8/259.8 kB\u001b[0m \u001b[31m15.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\nDownloading dacite-1.6.0-py3-none-any.whl (12 kB)\nDownloading dagshub_annotation_converter-0.1.3-py3-none-any.whl (33 kB)\nDownloading graphene-3.4.3-py2.py3-none-any.whl (114 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m114.9/114.9 kB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading gunicorn-23.0.0-py3-none-any.whl (85 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.0/85.0 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pathvalidate-3.2.3-py3-none-any.whl (24 kB)\nDownloading pyarrow-18.1.0-cp310-cp310-manylinux_2_28_x86_64.whl (40.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.1/40.1 MB\u001b[0m \u001b[31m38.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading treelib-1.7.0-py3-none-any.whl (18 kB)\nDownloading backoff-2.2.1-py3-none-any.whl (15 kB)\nDownloading databricks_sdk-0.44.1-py3-none-any.whl (648 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m648.7/648.7 kB\u001b[0m \u001b[31m31.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_core-3.2.3-py3-none-any.whl (202 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m202.9/202.9 kB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_relay-3.2.0-py3-none-any.whl (16 kB)\nDownloading gql-3.5.1-py2.py3-none-any.whl (74 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m74.2/74.2 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: appdirs, treelib, pyarrow, pathvalidate, gunicorn, graphql-core, dacite, backoff, graphql-relay, graphene, gql, databricks-sdk, mlflow-skinny, dagshub-annotation-converter, mlflow, dagshub\n  Attempting uninstall: pyarrow\n    Found existing installation: pyarrow 19.0.0\n    Uninstalling pyarrow-19.0.0:\n      Successfully uninstalled pyarrow-19.0.0\n  Attempting uninstall: dacite\n    Found existing installation: dacite 1.9.2\n    Uninstalling dacite-1.9.2:\n      Successfully uninstalled dacite-1.9.2\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\npandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\nydata-profiling 4.12.2 requires dacite>=1.8, but you have dacite 1.6.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed appdirs-1.4.4 backoff-2.2.1 dacite-1.6.0 dagshub-0.5.6 dagshub-annotation-converter-0.1.3 databricks-sdk-0.44.1 gql-3.5.1 graphene-3.4.3 graphql-core-3.2.3 graphql-relay-3.2.0 gunicorn-23.0.0 mlflow-2.20.2 mlflow-skinny-2.20.2 pathvalidate-3.2.3 pyarrow-18.1.0 treelib-1.7.0\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"import mlflow\nimport dagshub\nimport dagshub\ndagshub.init(repo_owner='vidhi-gajra-git', repo_name='SRL_SOA', mlflow=True)\n# Replace with your DAGsHub repository details\nDAGSHUB_REPO_OWNER = \"your-username\"\nDAGSHUB_REPO_NAME = \"your-repo\"\nDAGSHUB_USERNAME = \"your-username\"\nDAGSHUB_TOKEN = \"your-dagshub-token\"  # Get this from DAGsHub settings\n\ndagshub.auth.add_basic_auth(DAGSHUB_USERNAME, DAGSHUB_TOKEN)\n\nMLFLOW_TRACKING_URI = f\"https://dagshub.com/{DAGSHUB_REPO_OWNER}/{DAGSHUB_REPO_NAME}.mlflow\"\nmlflow.set_tracking_uri(MLFLOW_TRACKING_URI)\nmlflow.set_experiment(\"SparseAutoencoder_Attention\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}